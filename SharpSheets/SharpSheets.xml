<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpSheets</name>
    </assembly>
    <members>
        <member name="T:SharpSheets.Canvas.TextFieldType">
            <summary>
            Indicates the content type for a text field.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextFieldType.STRING">
            <summary>
            This field may contain any arbitrary text string.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextFieldType.INT">
            <summary>
            This field should contain only strings representing integer values.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextFieldType.FLOAT">
            <summary>
            This field should contain only strings representing floating point (decimal) values.
            </summary>
        </member>
        <member name="T:SharpSheets.Canvas.CheckType">
            <summary>
            Indicates the symbol to be used in a check field to indicate an "On" state.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.CheckType.CHECK">
            <summary>
            A "check" or "tick" mark.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.CheckType.CIRCLE">
            <summary>
            A filled circle.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.CheckType.CROSS">
            <summary>
            An "X" shaped (i.e. diagonal) cross.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.CheckType.DIAMOND">
            <summary>
            A filled rhombus, or "diamond", shape.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.CheckType.SQUARE">
            <summary>
            A filled square.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.CheckType.STAR">
            <summary>
            A filled, five pointed star.
            </summary>
        </member>
        <member name="T:SharpSheets.Canvas.TextRenderingMode">
            <summary>
            Indicates whether the text glyph outlines should be stroked, filled,
            used as a clipping path, or some combination thereof. Filling is
            performed using the current canvas text color, and stroking with the
            current canvas stroking color.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextRenderingMode.INVISIBLE">
            <summary>
            The text should neither be filled nor stroked (this means it will be
            "rendered" invisibly).
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextRenderingMode.FILL">
            <summary>
            The text should be filled with the current text color, and no other
            rendering actions taken.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextRenderingMode.STROKE">
            <summary>
            The text should be stroked with the current stroke color, and no other
            rendering actions taken. This means the glyph outlines will be shown,
            but not filled.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextRenderingMode.CLIP">
            <summary>
            The text outline is to be used as a path for clipping, and no other
            rendering actions should be taken.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextRenderingMode.FILL_STROKE">
            <summary>
            The text should both be filled and stroked, with the current text color
            and stroking color, respectively.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextRenderingMode.FILL_CLIP">
            <summary>
            The text should be filled with the current text color, and the outline
            used as a path for clipping. No stroking is performed.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextRenderingMode.STROKE_CLIP">
            <summary>
            The text should be stroked with the current stroking color, and the outline
            used as a path for clipping. No fill is performed.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.TextRenderingMode.FILL_STROKE_CLIP">
            <summary>
            The text should be filled and stroked, with the current text and stroking
            color, respectively, and the outline used as a path for clipping.
            </summary>
        </member>
        <member name="T:SharpSheets.Canvas.LineCapStyle">
            <summary>
            Indicates the shape to be used at the ends of open paths (and dashes, if any)
            when they are stroked.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.LineCapStyle.BUTT">
            <summary>
            The stroke should be be squared off at the end of the path,
            such that the path end point lies on this squared end (i.e.
            there is no projection beyond the end of the path).
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.LineCapStyle.ROUND">
            <summary>
            The stroke should end with a semi-circular cap, whose diameter is
            equal to the stroke width, such that the path end point is at the
            centre of the semi-circle.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.LineCapStyle.PROJECTING_SQUARE">
            <summary>
            The stroke continues beyond the end point of the path for a distance
            equal to half the line width and is squared off.
            </summary>
        </member>
        <member name="T:SharpSheets.Canvas.LineJoinStyle">
            <summary>
            Indicates the way in which the outer edges of two connected path
            segments should be joined, before the inside of the stroke is filled
            with the current stroke color. The outer edges are those on the side
            where the angle is greater than 180 degrees.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.LineJoinStyle.MITER">
            <summary>
            The outer edges of the strokes for the two segments are extended
            until they meet at an angle. If the segments meet at too sharp of an
            angle, a bevel join is used instead.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.LineJoinStyle.ROUND">
            <summary>
            The outer edges of the strokes are connected with a circular arc,
            centred at the point where the lines meet, with a diameter equal
            to the line width.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.LineJoinStyle.BEVEL">
            <summary>
            The two segments are finished with butt caps, and the resulting
            corners of the outer edge are connected.
            </summary>
        </member>
        <member name="M:SharpSheets.Canvas.CanvasDrawingExtensions.BezierArc(System.Single,System.Single,System.Single,System.Single)">
            <summary>Generates an array of bezier curves to draw an arc.</summary>
            <remarks>
            Generates an array of bezier curves to draw an arc.
            <br/>
            (x1, y1) and (x2, y2) are the corners of the enclosing rectangle.
            Angles, measured in degrees, start with 0 to the right (the positive X
            axis) and increase counter-clockwise.  The arc extends from startAng
            to startAng+extent.  i.e. startAng=0 and extent=180 yields an openside-down
            semi-circle.
            <br/>
            The resulting coordinates are of the form double[]{x1,y1,x2,y2,x3,y3, x4,y4}
            such that the curve goes from (x1, y1) to (x4, y4) with (x2, y2) and
            (x3, y3) as their respective Bezier control points.
            <br/>
            Note: this code was taken from ReportLab (www.reportlab.org), an excellent
            PDF generator for Python (BSD license: http://www.reportlab.org/devfaq.html#1.3 ).
            </remarks>
            <param name="rx">X-axis radius of the ellipse.</param>
            <param name="ry">Y-axis radius of the ellipse.</param>
            <param name="startAng">Starting angle of the arc in radians.</param>
            <param name="extent">Anglular extent of the arc in radians.</param>
            <returns>a list of double[] with the bezier curves.</returns>
        </member>
        <member name="M:SharpSheets.Canvas.CanvasImageData.#ctor(SharpSheets.Utilities.FilePath)">
            <summary></summary>
            <param name="path"></param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.ISharpGraphicsState.RestoreState">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.ISharpGraphicsState.SetTransform(SharpSheets.Canvas.Transform)">
            <summary></summary>
            <param name="transform"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.ISharpGraphicsState.ApplyTransform(SharpSheets.Canvas.Transform)">
            <summary></summary>
            <param name="transform"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.ISharpCanvas.ImageField(SharpSheets.Layouts.Rectangle,System.String,System.String,SharpSheets.Canvas.CanvasImageData)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <param name="name"></param>
            <param name="tooltip"></param>
            <param name="defaultImage"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.ISharpCanvas.AddImage(SharpSheets.Canvas.CanvasImageData,SharpSheets.Layouts.Rectangle,System.Nullable{System.Single})">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="rect"></param>
            <param name="imageAspect"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.ISharpGraphicsStateExtensions.LoadSnapshot(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Canvas.SharpCanvasGraphicsSnapshot)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="F:SharpSheets.Canvas.Text.ParagraphSpecification.LineSpacing">
            <summary> Distance between baseline positions, as a factor of fontsize. </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.ParagraphSpecification.ParagraphSpacing">
            <summary> Absolute distance (in points) between paragraphs. </summary>
        </member>
        <member name="T:SharpSheets.Canvas.Text.RichParagraphs">
            <summary>
            Stores information about <see cref="T:SharpSheets.Canvas.Text.RichString"/> sentence splitting and token widths for more efficient line splitting calculations.
            </summary>
        </member>
        <member name="P:SharpSheets.Canvas.Text.RichString.Text">
            <summary>
            The unformatted and unescaped version of this string (i.e. without any markdown syntax indicating text format).
            </summary>
        </member>
        <member name="P:SharpSheets.Canvas.Text.RichString.Formatted">
            <summary>
            Formatted and escaped version of this string.
            </summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringDrawingUtils.DrawRichText(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Canvas.Text.RichString,System.Single,System.Single)">
            <summary>Draws a single line of <see cref="T:SharpSheets.Canvas.Text.RichString"/> to the canvas as position (x,y).</summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringDrawingUtils.DrawRichText(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Canvas.Text.RichString,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.ValueTuple{System.Single,System.Single})">
            <summary>Draws a single line of <see cref="T:SharpSheets.Canvas.Text.RichString"/> to the canvas inside <paramref name="rect"/> at the current font size.</summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLayout.CalculateWidth(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString[][],System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,System.Boolean)">
            <summary>Calculate the width of a given set of <see cref="T:SharpSheets.Canvas.Text.RichString"/> lines (paragraph grouped), assuming no further splitting required.</summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLayout.CalculateWidth(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString[],System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,System.Boolean)">
            <summary>Calculate the width of a given set of <see cref="T:SharpSheets.Canvas.Text.RichString"/> lines (single paragraph), assuming no further splitting required.</summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLayout.CalculateHeight(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString[][],System.Single,System.Single,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>Calculate the height of a given set of <see cref="T:SharpSheets.Canvas.Text.RichString"/> lines (paragraph grouped), assuming no further splitting required.</summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLayout.CalculateHeight(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString[],System.Single,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>Calculate the height of a given set of <see cref="T:SharpSheets.Canvas.Text.RichString"/> lines (single paragraph), assuming no further splitting required.</summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLayout.CalculateHeight(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString[][],System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>Calculated the height of a given set of <see cref="T:SharpSheets.Canvas.Text.RichString"/> lines (paragraph grouped), assuming no further splitting required.</summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLayout.CalculateHeight(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString[],System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>Calculated the height of a given set of <see cref="T:SharpSheets.Canvas.Text.RichString"/> lines (single paragraph), assuming no further splitting required.</summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLayout.CalculateHeight(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString,System.Single,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.TextHeightStrategy,System.Boolean)">
            <summary>Calculates the height of a <see cref="T:SharpSheets.Canvas.Text.RichString"/>, which potentially contains newline characters, based on a provided final line <paramref name="width"/>.</summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLayoutDrawingUtils.DrawRichText(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Canvas.Text.RichString[][],System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.Boolean,System.ValueTuple{System.Single,System.Single})">
            <summary>Draws multiple lines (with paragraph subdivisions) of <see cref="T:SharpSheets.Canvas.Text.RichString"/> to the canvas, without performing any splitting.</summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLayoutDrawingUtils.DrawRichText(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Canvas.Text.RichString[],System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.Boolean,System.ValueTuple{System.Single,System.Single})">
            <summary>Draws multiple lines (for a single paragraph) of <see cref="T:SharpSheets.Canvas.Text.RichString"/> to the canvas, without performing any splitting.</summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLineSplitting.SplitLines(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString,System.Single,System.Single,System.Single,System.Single)">
            <summary>Splits a single line of <c>RichString</c> (i.e. no newlines) into lines below a fixed width.</summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringLineSplitting.SplitLines(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString,System.Single,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification)">
            <summary>Splits a single line of <c>RichString</c> (i.e. no newlines) into lines below a fixed width.</summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.RichStringSplitLineDrawingUtils.DrawRichText(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Canvas.Text.RichString,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.Boolean,System.ValueTuple{System.Single,System.Single})">
            <summary>Draws <see cref="T:SharpSheets.Canvas.Text.RichString"/> to the canvas inside <c>rect</c> at a given font size, splitting the text as necessary (into lines and paragraphs).</summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.Text.TextFittingUtils.FitRichText(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Canvas.Text.RichString,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.FontSizeSearchParams,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.Boolean)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.Text.TextFittingUtils.FitRichTextLine(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Canvas.Text.RichString,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.FontSizeSearchParams,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.Text.TextFittingUtils.FitRichTextLine(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Canvas.Text.RichString,SharpSheets.Canvas.Text.FontSizeSearchParams,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.Text.TextFittingUtils.FitText(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.String,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.FontSizeSearchParams,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.Boolean)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.Text.TextFittingUtils.FitTextLine(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.String,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.FontSizeSearchParams,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Canvas.Text.TextFittingUtils.FitTextLine(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.String,SharpSheets.Canvas.Text.FontSizeSearchParams,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SharpSheets.Canvas.Text.TextFormat">
            <summary>
            Indicates a font format, which can be used to select a particular font
            from a given font selection. Note that the current font selection may
            not have appropriate fonts in each of the possible categories (i.e. the 
            "bold" font may in fact be a different standard/roman typeface). These
            names are simply for ease of use, and to correspond with the Markdown-style
            text formatting options.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.TextFormat.REGULAR">
            <summary>
            A regular or standard typeface.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.TextFormat.BOLD">
            <summary>
            A bold or emphasised typeface.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.TextFormat.ITALIC">
            <summary>
            An italic or oblique typeface.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.TextFormat.BOLDITALIC">
            <summary>
            A typeface which is both emboldened and italicised or oblique.
            </summary>
        </member>
        <member name="T:SharpSheets.Canvas.Text.TextHeightStrategy">
            <summary>
            Strategy to use for calculating the height of a block of text, given a specific font.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.TextHeightStrategy.LineHeightBaseline">
            <summary>
            Indicates that the height of the text should be calculated from the baseline of the
            bottom line to a distance equal to the current line-height above the baseline of the
            top line.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.TextHeightStrategy.FontsizeBaseline">
            <summary>
            Indicates that the height of the text should be calculated from the baseline of the
            bottom line to a distance equal to the current fontsize above the baseline of the
            top line.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.TextHeightStrategy.AscentBaseline">
            <summary>
            Indicates that the height of the text should be calculated from the baseline of the
            bottom line to a distance equal to the maximum ascent of the top line above the baseline
            of the top line.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.TextHeightStrategy.LineHeightDescent">
            <summary>
            Indicates that the height of the text should be calculated from the maximum descent of
            the bottom line below the bottom baseline, to a distance equal to the current line-height
            above the baseline of the top line.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.TextHeightStrategy.FontsizeDescent">
            <summary>
            Indicates that the height of the text should be calculated from the maximum descent of
            the bottom line below the bottom baseline, to a distance equal to the current fontsize
            above the baseline of the top line.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.TextHeightStrategy.AscentDescent">
            <summary>
            Indicates that the height of the text should be calculated from the maximum descent of
            the bottom line below the bottom baseline, to a distance equal to the maximum ascent of
            the top line above the baseline of the top line.
            </summary>
        </member>
        <member name="M:SharpSheets.Canvas.Text.TextHeightUtils.GetYOffset(SharpSheets.Canvas.ISharpGraphicsData,System.String,SharpSheets.Canvas.Text.TextFormat,System.Single,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>
            Returns the Y offset of the basline from the top of the text area. This will be a negative number.
            </summary>
            <param name="graphics"></param>
            <param name="line"></param>
            <param name="format"></param>
            <param name="fontSize"></param>
            <param name="lineHeight"></param>
            <param name="heightStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Canvas.Text.TextHeightUtils.GetYOffset(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString,System.Single,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>
            Returns the Y offset of the basline from the top of the text area. This will be a negative number.
            </summary>
            <param name="graphics"></param>
            <param name="line"></param>
            <param name="fontSize"></param>
            <param name="lineHeight"></param>
            <param name="heightStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Canvas.Text.TextHeightUtils.GetBaselineOffset(SharpSheets.Canvas.ISharpGraphicsData,System.String,SharpSheets.Canvas.Text.TextFormat,System.Single,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>
            Returns the Y offset of the baseline from the bottom of the text area. This number could be positive (if the text has descenders), negative (if all glyphs begin above the line), or zero (if the text is to simply be drawn from the baseline), depending on settings. 
            </summary>
            <param name="graphics"></param>
            <param name="line"></param>
            <param name="format"></param>
            <param name="fontSize"></param>
            <param name="lineHeight"></param>
            <param name="heightStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Canvas.Text.TextHeightUtils.GetBaselineOffset(SharpSheets.Canvas.ISharpGraphicsData,SharpSheets.Canvas.Text.RichString,System.Single,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>
            Returns the Y offset of the baseline from the bottom of the text area. This number could be positive (if the text has descenders), negative (if all glyphs begin above the line), or zero (if the text is to simply be drawn from the baseline), depending on settings. 
            </summary>
            <param name="graphics"></param>
            <param name="line"></param>
            <param name="fontSize"></param>
            <param name="lineHeight"></param>
            <param name="heightStrategy"></param>
            <returns></returns>
        </member>
        <member name="T:SharpSheets.Canvas.Text.Justification">
            <summary>
            Indicates the horizontal justification of text, as either Left, Centre, or Right.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.Justification.LEFT">
            <summary>
            Indicates that the text should be left justified, with its leftmost character aligned with the left edge of text area.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.Justification.CENTRE">
            <summary>
            Indicates that the text should be centre justified, with its centre (determined by total character widths) aligned with the centre of the text area.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.Justification.RIGHT">
            <summary>
            Indicates that the text should be right justified, with its rightmost character aligned with the right edge of text area.
            </summary>
        </member>
        <member name="T:SharpSheets.Canvas.Text.Alignment">
            <summary>
            Indicated the vertical alignment of text, as either Bottom, Centre, or Top.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.Alignment.BOTTOM">
            <summary>
            Indicates that the text should be bottom aligned, with the baseline of the text aligned with the bottom edge of the text area.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.Alignment.CENTRE">
            <summary>
            Indicates that the text should be centre aligned, with the centre of the text (determined by greatest character ascension) aligned with the centre of the text area.
            </summary>
        </member>
        <member name="F:SharpSheets.Canvas.Text.Alignment.TOP">
            <summary>
            Indicates that the text should be top aligned, with the highest ascender of the text aligned with the top edge of the text area.
            </summary>
        </member>
        <member name="M:SharpSheets.Canvas.Transform.Invert">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.IVariableDefinitionBox.GetDefinition(SharpSheets.Evaluations.EvaluationName)">
            <summary>
            Return the <see cref="T:SharpSheets.Cards.Definitions.Definition"/> specified by the provided alias. Return <see langword="null"/> if no such <see cref="T:SharpSheets.Cards.Definitions.Definition"/> exists.
            </summary>
            <param name="key">Alias of the definition to find.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.CardSetConfig.#ctor(System.String,SharpSheets.Utilities.FilePath,SharpSheets.Utilities.DirectoryPath,SharpSheets.Cards.CardConfigs.LayoutStrategy,SharpSheets.Layouts.PageSize,System.Nullable{SharpSheets.Layouts.Margins},System.Single,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name" exclude="true"></param>
            <param name="origin" exclude="true"></param>
            <param name="source" exclude="true"></param>
            <param name="_layoutStrategy"></param>
            <param name="_paper"></param>
            <param name="_pageMargins" default="(20,20,20,20)"></param>
            <param name="_cardGutter"></param>
            <param name="_rows"></param>
            <param name="_columns"></param>
            <param name="_allowFeatureFollowOn"></param>
            <param name="_requireFormalSetupEnd"></param>
            <param name="_allowSingleLineFeatures"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.CardConfig.#ctor(SharpSheets.Cards.CardConfigs.CardSetConfig,SharpSheets.Fonts.FontPathGrouping,System.Single,System.Single,System.Single,System.Single,System.Single,System.Nullable{System.Int32},System.Boolean,System.Single,SharpSheets.Shapes.IDetail,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            /// <param name="cardSetConfig" exclude="true"></param>
            <param name="font"></param>
            <param name="minFontSize"></param>
            <param name="maxFontSize"></param>
            <param name="fontEpsilon"></param>
            <param name="lineSpacing"></param>
            <param name="paragraphSpacing"></param>
            <param name="maxCards"></param>
            <param name="singles"></param>
            <param name="gutter"></param>
            <param name="gutter_"></param>
            <param name="cropOnFinalCard"></param>
            <param name="joinSplitCards"></param>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.AbstractCardSectionConfig.#ctor(SharpSheets.Cards.CardConfigs.ICardSectionParent,System.Boolean,System.Boolean,System.Int32[],SharpSheets.Cards.CardConfigs.RegexFormats)">
            <summary>
            
            </summary>
            <param name="parent" exclude="true"></param>
            <param name="_splittable"></param>
            <param name="_acceptRemaining"></param>
            <param name="_atPosition"></param>
            <param name="format"></param>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.DynamicCardSectionConfig.#ctor(SharpSheets.Cards.CardConfigs.ICardSectionParent,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Boolean,System.Int32[],SharpSheets.Cards.CardConfigs.RegexFormats)">
            <summary>
            
            </summary>
            <param name="parent" exclude="true"></param>
            <param name="_splittable"></param>
            <param name="_acceptRemaining"></param>
            <param name="_equalSizeFeatures"></param>
            <param name="_spaceFeatures"></param>
            <param name="gutter"></param>
            <param name="_alwaysInclude"></param>
            <param name="_atPosition"></param>
            <param name="format"></param>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.TextCardSectionConfig.#ctor(SharpSheets.Cards.CardConfigs.ICardSectionParent,SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IExpression{System.String},System.Boolean,System.Boolean,SharpSheets.Parsing.ParagraphIndentArg,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.Int32[],SharpSheets.Cards.CardConfigs.RegexFormats)">
            <summary>
            
            </summary>
            <param name="parent" exclude="true"></param>
            <param name="_content" default="default"></param>
            <param name="_delimiter" default="\n"></param>
            <param name="_prefix" default="null"></param>
            <param name="_tail" default="null"></param>
            <param name="_splittable"></param>
            <param name="_acceptRemaining"></param>
            <param name="paragraph"></param>
            <param name="justification"></param>
            <param name="alignment"></param>
            <param name="heightStrategy"></param>
            <param name="_atPosition"></param>
            <param name="format"></param>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.ParagraphCardSectionConfig.#ctor(SharpSheets.Cards.CardConfigs.ICardSectionParent,SharpSheets.Evaluations.IExpression{System.String},System.Boolean,System.Boolean,SharpSheets.Parsing.ParagraphIndentArg,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,SharpSheets.Parsing.ParagraphIndentArg,SharpSheets.Fonts.FontPath,System.String,System.ValueTuple{System.Single,System.Single},System.Int32[],SharpSheets.Cards.CardConfigs.RegexFormats)">
            <summary>
            
            </summary>
            <param name="parent" exclude="true"></param>
            <param name="_content" default="default"></param>
            <param name="_splittable"></param>
            <param name="_acceptRemaining"></param>
            <param name="paragraph"></param>
            <param name="justification"></param>
            <param name="alignment"></param>
            <param name="heightStrategy"></param>
            <param name="list"></param>
            <param name="dingbats"></param>
            <param name="bullet"></param>
            <param name="bulletOffset"></param>
            <param name="_atPosition"></param>
            <param name="format"></param>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.TableCardSectionConfig.#ctor(SharpSheets.Cards.CardConfigs.ICardSectionParent,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.ValueTuple{System.Single,System.Single},System.Single,SharpSheets.Colors.Color[],System.Int32[],SharpSheets.Cards.CardConfigs.RegexFormats)">
            <summary>
            
            </summary>
            <param name="parent" exclude="true"></param>
            <param name="_splittable"></param>
            <param name="_acceptRemaining"></param>
            <param name="_equalSizeFeatures"></param>
            <param name="_spaceFeatures"></param>
            <param name="tableSpacing"></param>
            <param name="edgeOffset"></param>
            <param name="tableColors"></param>
            <param name="_atPosition"></param>
            <param name="format"></param>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.CardFeatureConfig.#ctor(SharpSheets.Cards.CardConfigs.AbstractCardSectionConfig,SharpSheets.Parsing.IContext,SharpSheets.Cards.CardConfigs.RegexFormats)">
            <summary>
            
            </summary>
            <param name="cardSection" exclude="true"></param>
            <param name="layout" exclude="true"></param>
            <param name="format"></param>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.CardSetConfigFactory.#cctor">
            <summary></summary>
            <exception cref="T:System.TypeInitializationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.CardSetConfigFactory.MakeSetConfig(System.String,SharpSheets.Parsing.IContext,System.Collections.Generic.IEnumerable{SharpSheets.Parsing.ContextValue{System.String}},SharpSheets.Utilities.FilePath,SharpSheets.Utilities.DirectoryPath,System.Collections.Generic.Dictionary{System.Object,SharpSheets.Parsing.IDocumentEntity}@,System.Collections.Generic.List{SharpSheets.Exceptions.SharpParsingException}@)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.CardSetConfigFactory.MakeConfig(SharpSheets.Parsing.IContext,SharpSheets.Cards.CardConfigs.CardSetConfig,System.Collections.Generic.Dictionary{System.Object,SharpSheets.Parsing.IDocumentEntity},System.Collections.Generic.List{SharpSheets.Exceptions.SharpParsingException})">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.CardSetConfigFactory.MakeSection(SharpSheets.Parsing.IContext,SharpSheets.Cards.CardConfigs.ICardSectionParent,System.Collections.Generic.Dictionary{System.Object,SharpSheets.Parsing.IDocumentEntity},System.Collections.Generic.List{SharpSheets.Exceptions.SharpParsingException})">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.CardSetConfigParser.CardSetConfigEntryStack.GenerateConfig(SharpSheets.Widgets.WidgetFactory,SharpSheets.Shapes.ShapeFactory,System.Collections.Generic.Dictionary{System.Object,SharpSheets.Parsing.IDocumentEntity}@,System.Collections.Generic.List{SharpSheets.Exceptions.SharpParsingException}@)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.CardSetConfigParser.ParseConfig(SharpSheets.Utilities.FilePath,SharpSheets.Utilities.DirectoryPath,System.String)">
            <summary></summary>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.Conditional`1.Evaluate(SharpSheets.Evaluations.IEnvironment)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.ConditionalCollection`1.GetValue(SharpSheets.Evaluations.IEnvironment)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardConfigs.ConditionalCollection`1.GetValue(SharpSheets.Evaluations.IEnvironment,System.Func{`0,System.Boolean})">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardSubjects.CardSubject.#ctor(SharpSheets.Cards.CardSubjects.CardSubjectSet,SharpSheets.Parsing.ContextValue{System.String},SharpSheets.Cards.CardConfigs.CardConfig,SharpSheets.Cards.Definitions.DefinitionEnvironment)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardSubjects.CardSubjectBuilder.#ctor(SharpSheets.Parsing.ContextValue{System.String},SharpSheets.Cards.CardConfigs.CardSetConfig)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardSubjects.DryRunConstants.Get(SharpSheets.Evaluations.EvaluationType)">
            <summary></summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.CardSubjects.DryRunEnvironment.GetValue(SharpSheets.Evaluations.EvaluationName)">
            <summary></summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.AbstractCard.DrawHeader(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.Int32,System.Int32)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpDrawingException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.AbstractCard.DrawOutline(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle[],System.Collections.Generic.IEnumerable{SharpSheets.Layouts.Rectangle}@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpDrawingException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.AbstractCard.DrawGutter(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.AbstractCard.RemainingRect(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle,System.Int32,System.Int32)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.DynamicCardFactory.CreateTextRect(SharpSheets.Cards.CardSubjects.CardSection,SharpSheets.Cards.CardConfigs.TextCardSectionConfig,SharpSheets.Cards.CardConfigs.CardConfig,System.Collections.Generic.List{SharpSheets.Exceptions.SharpParsingException},System.Collections.Generic.Dictionary{System.Object,SharpSheets.Parsing.IDocumentEntity},SharpSheets.Widgets.WidgetFactory)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.DynamicCardFactory.CreateParagraphRect(SharpSheets.Cards.CardSubjects.CardSection,SharpSheets.Cards.CardConfigs.ParagraphCardSectionConfig,SharpSheets.Cards.CardConfigs.CardConfig,System.Collections.Generic.List{SharpSheets.Exceptions.SharpParsingException},System.Collections.Generic.Dictionary{System.Object,SharpSheets.Parsing.IDocumentEntity},SharpSheets.Widgets.WidgetFactory)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.DynamicCardFactory.CreateTableRect(SharpSheets.Cards.CardSubjects.CardSection,SharpSheets.Cards.CardConfigs.TableCardSectionConfig,SharpSheets.Cards.CardConfigs.CardConfig,System.Collections.Generic.List{SharpSheets.Exceptions.SharpParsingException},System.Collections.Generic.Dictionary{System.Object,SharpSheets.Parsing.IDocumentEntity},SharpSheets.Widgets.WidgetFactory)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.DynamicCardFactory.CreateDefaultRect(SharpSheets.Cards.CardConfigs.DynamicCardSectionConfig,SharpSheets.Cards.CardConfigs.CardConfig,SharpSheets.Cards.CardSubjects.CardSubject,System.Collections.Generic.List{SharpSheets.Exceptions.SharpParsingException},System.Collections.Generic.Dictionary{System.Object,SharpSheets.Parsing.IDocumentEntity},SharpSheets.Widgets.WidgetFactory)">
            <summary>
            Produces a section based on an "always at" <see cref="T:SharpSheets.Cards.CardConfigs.DynamicCardSectionConfig"/>.
            </summary>
            <param name="sectionConfig"></param>
            <param name="cardConfig"></param>
            <param name="subject"></param>
            <param name="errors"></param>
            <param name="origins"></param>
            <param name="widgetFactory"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Cards.Card.DynamicCardFactory.GetCardFeatureText(SharpSheets.Cards.CardConfigs.ParagraphCardSectionConfig,SharpSheets.Cards.CardSubjects.CardFeature)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.DynamicCardFactory.EvaluateText(SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IEnvironment,SharpSheets.Parsing.DocumentSpan,SharpSheets.Cards.CardConfigs.RegexFormats)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.InterpolateContext.#ctor(SharpSheets.Parsing.IContext,SharpSheets.Evaluations.IEnvironment,System.Boolean)">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.InterpolateContext.Replace(System.String,System.Nullable{SharpSheets.Parsing.DocumentSpan})">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.InterpolateContext.EvaluateCondition(SharpSheets.Parsing.IContext)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.SectionRects.IFixedCardSectionRect.CalculateMinimumHeight(SharpSheets.Canvas.ISharpGraphicsState,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,System.Single,SharpSheets.Cards.Card.SectionRects.CardQueryCache)">
            <summary>
            
            </summary>
            <param name="graphicsState"></param>
            <param name="fontSize"></param>
            <param name="paragraphSpec"></param>
            <param name="width"></param>
            <param name="cache"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Cards.Layouts.CardLayoutException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.SectionRects.IFixedCardSectionRect.Split(System.Int32)">
            <summary></summary>
            <param name="parts"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.SectionRects.IFixedCardSectionRect.Draw(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification)">
            <summary>
            
            </summary>
            <param name="canvas"></param>
            <param name="rect"></param>
            <param name="fontSize"></param>
            <param name="paragraphSpec"></param>
            <exception cref="T:SharpSheets.Exceptions.SharpDrawingException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.SectionRects.IPartialCardSectionRects.FromAvailableHeight(SharpSheets.Canvas.ISharpGraphicsState,System.Single,System.Single,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Cards.Card.SectionRects.CardQueryCache,System.Single@)">
            <summary>
            
            </summary>
            <param name="graphicsState"></param>
            <param name="availableHeight"></param>
            <param name="width"></param>
            <param name="fontSize"></param>
            <param name="paragraphSpec"></param>
            <param name="cache"></param>
            <param name="resultingHeight"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Cards.Layouts.CardLayoutException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.SectionRects.CardQueryCache.GetMinimumHeight(SharpSheets.Cards.Card.SectionRects.IFixedCardSectionRect,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,System.Single)">
            <summary></summary>
            <exception cref="T:SharpSheets.Cards.Layouts.CardLayoutException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.SectionRects.CardTableSectionRect.GetHeaderRect(SharpSheets.Layouts.Rectangle,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Layouts.Rectangle@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.SectionRects.CardTableSectionRect.DrawHeader(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification)">
            <summary>
            
            </summary>
            <param name="canvas"></param>
            <param name="headerRect"></param>
            <param name="fontSize"></param>
            <param name="paragraphSpec"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.SectionRects.CardTableSectionRect.GetRowRects(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.SectionRects.CardTableSectionRect.DrawRow(System.Int32,SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Layouts.Dimension[])">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="canvas"></param>
            <param name="rect"></param>
            <param name="fontSize"></param>
            <param name="paragraphSpec"></param>
            <param name="columnDimensions"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Card.SectionRects.SimpleCardTableSectionRect.GetColumnRects(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension[],System.Single)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.DefinitionGroup.#ctor(System.Collections.Generic.IEnumerable{SharpSheets.Cards.Definitions.Definition})">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException">Duplicate name or alias encountered in <paramref name="definitions"/>.</exception>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.DefinitionGroup.Add(SharpSheets.Cards.Definitions.Definition)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException">A <see cref="T:SharpSheets.Cards.Definitions.Definition"/> with a matching name or alias already exists in the collection.</exception>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.DefinitionGroup.GetDefinition(SharpSheets.Evaluations.EvaluationName)">
            <summary>
            Return the <see cref="T:SharpSheets.Cards.Definitions.Definition"/> specified by the provided alias. Return <see langword="null"/> if no such <see cref="T:SharpSheets.Cards.Definitions.Definition"/> exists.
            </summary>
            <param name="key">Alias of the definition to find.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.DefinitionGroupImmutable.#ctor(System.Collections.Generic.IEnumerable{SharpSheets.Cards.Definitions.Definition})">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.DefinitionGroupImmutable.Add(SharpSheets.Cards.Definitions.Definition)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.DefinitionGroupBuilder.#ctor(System.Collections.Generic.IEnumerable{SharpSheets.Cards.Definitions.Definition})">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.DefinitionGroupBuilder.Add(SharpSheets.Cards.Definitions.Definition)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.SimpleTypeDefinition.#ctor(SharpSheets.Evaluations.EvaluationType)">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.RegexType.#ctor(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.CategoricalType.#ctor(System.String[])">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Definitions.MulticategoryType.#ctor(System.String[])">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpSheets.Cards.Layouts.CardLayoutStrategy.GetLayouts(SharpSheets.Cards.Card.AbstractCard,SharpSheets.Canvas.ISharpGraphicsState,System.Int32,SharpSheets.Layouts.Rectangle,SharpSheets.Canvas.Text.ParagraphSpecification,SharpSheets.Canvas.Text.FontSizeSearchParams,System.Threading.CancellationToken)">
            <summary>Find layouts for subject cards, given a maximum possible number of cards and assuming cards of a fixed size based on the sample provided.</summary>
        </member>
        <member name="M:SharpSheets.Cards.Layouts.CardLayoutStrategy.GetParameters(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Cards.Card.SectionRects.CardQueryCache,SharpSheets.Layouts.Rectangle[],SharpSheets.Cards.Card.SectionRects.ICardSectionRect[][],System.Single,System.Single,SharpSheets.Canvas.Text.ParagraphSpecification)">
            <summary>
            This method takes an arrangement and a fontsize, and
            calculates how large all the boxes must be at that fontsize,
            along with fixing the contents of partially filled boxes.
            </summary>
            <param name="graphicsState"></param>
            <param name="cache"></param>
            <param name="featureRects"></param>
            <param name="arrangement"></param>
            <param name="cardGutter"></param>
            <param name="fontSize"></param>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Cards.Layouts.AbstractLayoutStrategy.Draw(SharpSheets.Canvas.ISharpDocument,SharpSheets.Cards.CardConfigs.CardSetConfig,SharpSheets.Cards.Card.DynamicCard[],System.Collections.Generic.List{SharpSheets.Exceptions.SharpDrawingException}@,System.Collections.Generic.List{SharpSheets.Cards.Card.DynamicCard}@,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="document"></param>
            <param name="configuration"></param>
            <param name="cards"></param>
            <param name="errors"></param>
            <param name="errorCards"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:SharpSheets.Documentation.DocumentationGenerator.GetConstructorDetails(System.Type,System.Reflection.ConstructorInfo,System.String)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Documentation.SharpDocumentation.LoadEmbeddedDocumentation(System.Reflection.Assembly)">
            <summary></summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:SharpSheets.Evaluations.EvaluationException">
            <summary>
            Indicates that an error has been encountered relating to evaluations (parsing and calculating).
            </summary>
        </member>
        <member name="T:SharpSheets.Evaluations.EvaluationProcessingException">
            <summary>
            Indicates an error has occured whilst processing an evaluation during parsing.
            </summary>
        </member>
        <member name="T:SharpSheets.Evaluations.EvaluationSyntaxException">
            <summary>
            Indicates that a syntax error has been encountered in an evaluation string during parsing.
            </summary>
        </member>
        <member name="T:SharpSheets.Evaluations.EvaluationCalculationException">
            <summary>
            Indicates that an error has occured while calculating the result of an evaluation.
            </summary>
        </member>
        <member name="T:SharpSheets.Evaluations.EvaluationTypeException">
            <summary>
            Indicates that an invalid or unexpected evaluation type has been encountered, either during parsing or calculation.
            </summary>
        </member>
        <member name="T:SharpSheets.Evaluations.UndefinedException">
            <summary>
            Indicates that there is an undefined expression in an evaluation.
            </summary>
        </member>
        <member name="T:SharpSheets.Evaluations.UndefinedVariableException">
            <summary>
            Indicates than an undefined variable has been encountered in an evaluation.
            </summary>
        </member>
        <member name="T:SharpSheets.Evaluations.UndefinedFunctionException">
            <summary>
            Indicates than an undefined function has been encountered in an evaluation.
            </summary>
        </member>
        <member name="M:SharpSheets.Evaluations.Evaluation.GetOperator(System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Evaluation.GetFunction(SharpSheets.Evaluations.EvaluationName,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.UndefinedFunctionException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Evaluation.ParseFloat(System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Evaluation.ParseInt(System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Evaluation.ParseBool(System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Evaluation.ParseString(System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Evaluation.Parse(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.UndefinedVariableException"></exception>
            <exception cref="T:SharpSheets.Evaluations.UndefinedFunctionException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.IExpression`1.Evaluate(SharpSheets.Evaluations.IEnvironment)">
            <summary>
            
            </summary>
            <param name="environment"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.FloatExpression.#ctor(SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.FloatExpression.Parse(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.IntExpression.#ctor(SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.IntExpression.Parse(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.StringExpression.#ctor(SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.StringExpression.Parse(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.BoolExpression.#ctor(SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.BoolExpression.Parse(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.BoolExpression.IsNonZero(SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.ColorExpression.#ctor(SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.ColorExpression.Parse(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.ColorExpression.WithOpacity(SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.ColorExpression.ParseColor(System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.EnumExpression`1.#ctor(SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.EnumExpression`1.Parse(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.EnumExpression`1.ParseEnum(System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="T:SharpSheets.Evaluations.IEnvironment">
            <summary>
            IEnvironment objects should be immutable once created.
            This object promises that all keys in GetVariables() are available as nodes or values.
            </summary>
        </member>
        <member name="M:SharpSheets.Evaluations.IEnvironment.GetFunction(SharpSheets.Evaluations.EvaluationName)">
            <summary></summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Evaluations.UndefinedFunctionException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Environments.GetVariable(SharpSheets.Evaluations.IEnvironment,SharpSheets.Evaluations.EvaluationName)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.UndefinedVariableException"></exception>
        </member>
        <member name="T:SharpSheets.Evaluations.FallbackEnvironment">
            <summary>
            To be used only as a temporary environment. Creation of this object involves no
            additional processing of component IEnvironment contents, and so is faster to construct,
            but the access methods will likely be slower, as they may call methods on both components.
            If the environment is expected to be long-lived and frequently accessed, use
            <see cref="M:SharpSheets.Evaluations.Environments.AppendEnvironment(SharpSheets.Evaluations.IEnvironment,SharpSheets.Evaluations.IEnvironment)"/> method.
            </summary>
        </member>
        <member name="M:SharpSheets.Evaluations.Interpolation.Parse(System.String,SharpSheets.Evaluations.IVariableBox,System.Boolean)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.UndefinedVariableException"></exception>
            <exception cref="T:SharpSheets.Evaluations.UndefinedFunctionException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Interpolation.ProcessExpression(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.UndefinedVariableException"></exception>
            <exception cref="T:SharpSheets.Evaluations.UndefinedFunctionException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Interpolation.ProcessKey(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.UndefinedVariableException"></exception>
            <exception cref="T:SharpSheets.Evaluations.UndefinedFunctionException"></exception>
        </member>
        <member name="P:SharpSheets.Evaluations.InterpolatedStringExpression.Evaluation">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="T:SharpSheets.Evaluations.IVariableBox">
            <summary>
            IVariableBox objects should be immutable once created.
            This object makes no promises that the keys in GetVariables() are all available as nodes.
            But all variables and functions must have return types and function information available.
            </summary>
        </member>
        <member name="M:SharpSheets.Evaluations.IVariableBox.GetReturnType(SharpSheets.Evaluations.EvaluationName)">
            <summary></summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Evaluations.UndefinedVariableException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.IVariableBox.GetFunctionInfo(SharpSheets.Evaluations.EvaluationName)">
            <summary></summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Evaluations.UndefinedFunctionException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.VariableBoxes.GetNode(SharpSheets.Evaluations.IVariableBox,SharpSheets.Evaluations.EvaluationName)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.UndefinedVariableException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.ArithmeticOperatorNode.Calculate(System.String,System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.ArrayCreateNode.MakeArrayCreateNode(SharpSheets.Evaluations.Nodes.EvaluationNode[])">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.FloatCastNode.Parse(System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.AbstractEqualityNode.ArgumentsEqual(SharpSheets.Evaluations.IEnvironment)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.IVariableProvider.ProvidedVariables">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="P:SharpSheets.Evaluations.Nodes.EvaluationNode.ReturnType">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.EvaluationNode.Evaluate(SharpSheets.Evaluations.IEnvironment)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.EvaluationNode.Simplify">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            /// <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.EvaluationNode.Clone">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.EvaluationNode.Validate(SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="P:SharpSheets.Evaluations.Nodes.FunctionNode.Arguments">
            <summary>
            
            </summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.FunctionNode.Empty">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.VariableArgsFunctionNode.SetArgumentCount(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationSyntaxException"></exception>
        </member>
        <member name="M:SharpSheets.Evaluations.Nodes.StringFormatNode.ReplaceFormatChars(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="P:SharpSheets.Evaluations.Nodes.PlusOperator.ReturnType">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Fonts.FontPathParsing.Parse(System.String,System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Fonts.FontPathParsing.ParseGrouping(System.String[],System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Fonts.FontPathParsing.MakeFrom(System.String[],System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Fonts.FontPathParsing.FromArray(SharpSheets.Fonts.FontPath[])">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="P:SharpSheets.Fonts.FontPath.Path">
            <summary>
            The system path for this font.
            </summary>
        </member>
        <member name="P:SharpSheets.Fonts.FontPath.FontIndex">
            <summary>
            If the font file contains multiple fonts (TrueType or OpenType Collection), then this
            will be the zero-based index of that font in the file, otherwise -1.
            </summary>
        </member>
        <member name="P:SharpSheets.Layouts.Dimension.Percent">
            <summary>
            Percentage length, as a fraction (0.0-1.0).
            </summary>
        </member>
        <member name="M:SharpSheets.Layouts.Dimension.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Dimension.Parse(System.String,System.IFormatProvider)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Dimension.ParseAbsoluteOrPercent(System.String,System.IFormatProvider)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Dimension.ParseAbsolute(System.String,System.IFormatProvider)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.DimensionUtils.Sum(System.Collections.Generic.IEnumerable{SharpSheets.Layouts.Dimension})">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SharpSheets.Layouts.DivisionStrategy">
            <summary>
            Indicates the strategy to use when dividing a rectangle into segments based on
            a <see cref="T:SharpSheets.Layouts.Dimension"/> list.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.DivisionStrategy.RELATIVE_DIVISIONS">
            <summary>
            Relative dimensions are interpreted to mean the distances between the centre of the gutters.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.DivisionStrategy.RELATIVE_RECTANGLES">
            <summary>
            Relative dimensions are interpreted as the sizes of the rectangles themselves.
            </summary>
        </member>
        <member name="T:SharpSheets.Layouts.Arrangement">
            <summary>
            Indicates the arrangement of sub-rectangles within a rectangular area, and how
            those sub-rectangles should be positioned as a group within the larger area.
            This does not affect the ordering of those rectangles within the space.
            The exact meaning of this arrangement is dependent on whether the layout is to
            be arranged vertically or horizontally.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Arrangement.FRONT">
            <summary>
            Indicates that the layout should be left or top aligned, with any remaining space
            to the right or bottom.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Arrangement.CENTRAL">
            <summary>
            Indicates that the layout should be aligned centrally in the available space, with
            and remaining space equally distributed to the left and right, or top and bottom,
            as appropriate.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Arrangement.BACK">
            <summary>
            Indicates that the layout should be right or bottom aligned, with any remaining space
            to the left or top.
            </summary>
        </member>
        <member name="T:SharpSheets.Layouts.LayoutOrder">
            <summary>
            Indicates the order for a series of sub-areas within a larger area.
            The exact meaning of this ordering is dependent on whether the layout it so
            be arranged vertically or horizontally.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.LayoutOrder.FORWARD">
            <summary>
            Indicates that the layout should be ordered left-to-right or top-to-bottom.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.LayoutOrder.BACKWARD">
            <summary>
            Indicates that the layout should be ordered right-to-left or bottom-to-top.
            </summary>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Rows(SharpSheets.Layouts.Rectangle,System.Int32,System.Single)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Rows(SharpSheets.Layouts.Rectangle,System.Int32,System.Single,SharpSheets.Layouts.Rectangle[]@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Rows(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension[],System.Single,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,SharpSheets.Layouts.DivisionStrategy)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Rows(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension[],System.Single,SharpSheets.Layouts.Rectangle[]@,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,SharpSheets.Layouts.DivisionStrategy)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Rows(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension[],System.Single,System.Single,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle[]@,SharpSheets.Layouts.Rectangle@,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,SharpSheets.Layouts.DivisionStrategy)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Rows(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension,System.Int32,System.Single,System.Single,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle[]@,SharpSheets.Layouts.Rectangle@,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,SharpSheets.Layouts.DivisionStrategy)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Rows(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension,System.Int32,System.Single,SharpSheets.Layouts.Rectangle[]@,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,SharpSheets.Layouts.DivisionStrategy)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Row(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension,System.Single,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle@,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Columns(SharpSheets.Layouts.Rectangle,System.Int32,System.Single)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Columns(SharpSheets.Layouts.Rectangle,System.Int32,System.Single,SharpSheets.Layouts.Rectangle[]@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Columns(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension[],System.Single,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,SharpSheets.Layouts.DivisionStrategy)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Columns(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension[],System.Single,SharpSheets.Layouts.Rectangle[]@,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,SharpSheets.Layouts.DivisionStrategy)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Columns(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension[],System.Single,System.Single,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle[]@,SharpSheets.Layouts.Rectangle@,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,SharpSheets.Layouts.DivisionStrategy)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Columns(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension,System.Int32,System.Single,System.Single,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle[]@,SharpSheets.Layouts.Rectangle@,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,SharpSheets.Layouts.DivisionStrategy)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Columns(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension,System.Int32,System.Single,SharpSheets.Layouts.Rectangle[]@,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,SharpSheets.Layouts.DivisionStrategy)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.Column(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension,System.Single,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle@,System.Boolean,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.FillRows(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension,System.Single,SharpSheets.Layouts.Rectangle[]@,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.FillColumns(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Dimension,System.Single,SharpSheets.Layouts.Rectangle[]@,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.CheckRectAray(SharpSheets.Layouts.Rectangle[],System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Divisions.ValidateRect(SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.IDrawableGridElement.Draw(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.Threading.CancellationToken)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpDrawingException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.IDrawableGridElement.DiagnosticRects(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.DrawableElementUtils.DrawDiagnostics(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.IDrawableGridElement,System.String,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.IGridElement.ContainerArea(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <param name="graphicsState"></param>
            <param name="fullArea"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.IGridElement.MinimumContentSize(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Size)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="T:SharpSheets.Layouts.Layout">
            <summary>
            An enum to indicate the direction of arrangement for element contents, either vertically (rows) or horizontally (columns).
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Layout.ROWS">
            <summary>Indicates that the contents will be arranged vertically, in rows.</summary>
        </member>
        <member name="F:SharpSheets.Layouts.Layout.COLUMNS">
            <summary>Indicates that the contents will be arrange horizontally, in columns.</summary>
        </member>
        <member name="M:SharpSheets.Layouts.GridElementUtils.MinimumSize(SharpSheets.Layouts.IGridElement,SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Layout,SharpSheets.Layouts.Size)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.GridElementUtils.FinalSizeFromArrangement(SharpSheets.Layouts.IGridElement,SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Layout,SharpSheets.Layouts.Size)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.GridElementUtils.GetElementRects(SharpSheets.Layouts.IGridElement,SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle[]@,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.GridElementUtils.GetElementRects(SharpSheets.Layouts.IGridElement,SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.GridElementUtils.RemainingRect(SharpSheets.Layouts.IGridElement,SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.GridElements.OverallMinimumSize(System.Collections.Generic.IReadOnlyList{SharpSheets.Layouts.IGridElement},SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Size,SharpSheets.Layouts.Layout,System.Single)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.GridElements.GetElementRects(SharpSheets.Layouts.IGridElement,System.Collections.Generic.IReadOnlyList{SharpSheets.Layouts.IGridElement},SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle[]@,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle@)">
            <summary>
            
            </summary>
            <param name="parentElement"></param>
            <param name="children"></param>
            <param name="graphicsState"></param>
            <param name="rect"></param>
            <param name="elementRect"></param>
            <param name="containerRect"></param>
            <param name="gutters"></param>
            <param name="remainingRect"></param>
            <param name="remainingGutter"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Margins.Parse(System.String,System.Single,System.IFormatProvider)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:SharpSheets.Layouts.Anchor">
            <summary>
            Indicates a relative position within a rectangular area to use as an origin point for an offset.
            This will affect both the origin point, and the directions which are considered "increasing" when
            adding offsets to this origin point.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Anchor.CENTRE">
            <summary>
            Indicates that the origin point should be the centre of the area, with the increasing directions
            being rightwards and upwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Anchor.TOP">
            <summary>
            Indicates that the origin point should be at the top of the area and horizontally centred, with the
            increasing directions being rightwards and downwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Anchor.TOPRIGHT">
            <summary>
            Indicates that the origin point should be at the top-right corner of the area, with the increasing
            directions being leftwards and downwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Anchor.RIGHT">
            <summary>
            Indicates that the origin point should be at the right of the area and vertically centred, with the
            increasing directions leftwards and upwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Anchor.BOTTOMRIGHT">
            <summary>
            Indicates that the origin point should be at the bottom-right corner of the area, with the increasing
            directions being leftwards and upwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Anchor.BOTTOM">
            <summary>
            Indicates that the origin point should be at the bottom of the area and horizontally centred, with the
            increasing directions being rightwards and upwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Anchor.BOTTOMLEFT">
            <summary>
            Indicates that the origin point should be at the bottom-left corner of the area, with the increasing
            directions being rightwards and upwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Anchor.LEFT">
            <summary>
            Indicates that the origin point should be at the left of the area and vertically centred, with the
            increasing directions being rightwards and upwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Layouts.Anchor.TOPLEFT">
            <summary>
            Indicates that the origin point should be at the top-left corner of the area, with the increasing
            directions being rightwards and upwards.
            </summary>
        </member>
        <member name="M:SharpSheets.Layouts.Position.Parse(System.String,System.IFormatProvider)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Layouts.Rectangle.GetCommonRectangle(System.Collections.Generic.IEnumerable{SharpSheets.Layouts.Rectangle})">
            <summary>Calculates the common rectangle which includes all the input rectangles.</summary>
            <param name="rectangles">Input rectangles.</param>
            <returns>Common rectangle.</returns>
        </member>
        <member name="M:SharpSheets.Layouts.PageSize.ParsePageSize(System.String,System.IFormatProvider)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Canvas.TextAnchor">
            <summary>
            Indicates how a text chunk should be aligned, relative to the current start point
            of the text layout.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Canvas.TextAnchor.Start">
            <summary>
            Indicates that the start of the text should align with the start of the text layout.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Canvas.TextAnchor.Middle">
            <summary>
            Indicates that the middle of the text should align with the start of the text layout.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Canvas.TextAnchor.End">
            <summary>
            Indicates that the end of the text should align with the start of the text layout.
            </summary>
        </member>
        <member name="T:SharpSheets.Markup.Canvas.AreaRule">
            <summary>
            Indicates the area rule that should be used when converting a path into a 2D shape.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Canvas.AreaRule.NonZero">
            <summary>
            Indicates that the non-zero winding rule should be used to determine the area inside
            the shape.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Canvas.AreaRule.EvenOdd">
            <summary>
            Indicates that the even-odd winding rule should be used to determine the area inside
            the shape.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.PreserveAspectRatio.Parse(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="P:SharpSheets.Markup.Canvas.MarkupGeometry.State">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupGeometry.CreateGeometry(SharpSheets.Canvas.SharpCanvasGraphicsSnapshot,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Size,SharpSheets.Markup.Canvas.NSliceValuesExpression,SharpSheets.Evaluations.IEnvironment)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupGeometry.TransformPoint(SharpSheets.Markup.Canvas.DrawPointExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupGeometry.TransformPoint(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupGeometry.TransformLength(SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupGeometry.TransformVector(SharpSheets.Markup.Canvas.VectorExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupGeometry.TransformVector(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupGeometry.TransformRectangle(SharpSheets.Markup.Canvas.RectangleExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupGeometry.GetOriginalSpaceRectangle(SharpSheets.Markup.Canvas.RectangleExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetupCanvas(SharpSheets.Markup.Canvas.MarkupCanvas,SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Size,SharpSheets.Markup.Canvas.NSliceValuesExpression,SharpSheets.Evaluations.IEnvironment,System.Boolean)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.Open(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Size,SharpSheets.Markup.Canvas.NSliceValuesExpression,SharpSheets.Evaluations.IEnvironment,System.Boolean)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.CreateChild(SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Markup.Canvas.SizeExpression,SharpSheets.Markup.Canvas.NSliceValuesExpression,SharpSheets.Evaluations.IEnvironment)">
            <summary></summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.Close(SharpSheets.Exceptions.SharpDrawingException[]@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.Evaluate``1(SharpSheets.Evaluations.IExpression{``0})">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.Evaluate``1(SharpSheets.Evaluations.IExpression{``0},``0)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.TransformPoint(SharpSheets.Markup.Canvas.DrawPointExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.TransformPoint(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.TransformLength(SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.TransformVector(SharpSheets.Markup.Canvas.VectorExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.TransformVector(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.TransformRectangle(SharpSheets.Markup.Canvas.RectangleExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.GetOriginalSpaceRectangle(SharpSheets.Markup.Canvas.RectangleExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SaveState">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.RestoreState">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetDrawingCoords(SharpSheets.Evaluations.EnumExpression{SharpSheets.Markup.Canvas.DrawingCoords})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.ApplyTransform(SharpSheets.Markup.Canvas.TransformExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.RegisterArea(System.Object,SharpSheets.Markup.Canvas.RectangleExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.RegisterArea(System.Object,SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Markup.Canvas.MarginsExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.RegisterArea(System.Object,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle[])">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.CircleAt(SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.Ellipse(SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.MoveTo(SharpSheets.Markup.Canvas.DrawPointExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.LineTo(SharpSheets.Markup.Canvas.DrawPointExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.CurveTo(SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Markup.Canvas.DrawPointExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.CurveTo(SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Markup.Canvas.DrawPointExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.EllipseArc(SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.BoolExpression,SharpSheets.Evaluations.BoolExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.ClosePath">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.EndPath">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.Rectangle(SharpSheets.Markup.Canvas.RectangleExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.RoundRectangle(SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.Stroke">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.Fill">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.EoFill">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.FillUsing(SharpSheets.Evaluations.EnumExpression{SharpSheets.Markup.Canvas.AreaRule},SharpSheets.Markup.Canvas.AreaRule)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.FillStroke">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.EoFillStroke">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.FillStrokeUsing(SharpSheets.Evaluations.EnumExpression{SharpSheets.Markup.Canvas.AreaRule},SharpSheets.Markup.Canvas.AreaRule)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.Clip">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.EoClip">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.ClipUsing(SharpSheets.Evaluations.EnumExpression{SharpSheets.Markup.Canvas.AreaRule},SharpSheets.Markup.Canvas.AreaRule)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.ApplyViewBox(SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Markup.Canvas.PreserveAspectRatioExpression,SharpSheets.Markup.Canvas.RectangleExpression@)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetLineWidth(SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetLineCapStyle(SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.LineCapStyle})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetLineJoinStyle(SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.LineJoinStyle})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetMiterLimit(SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetStrokeColor(SharpSheets.Evaluations.ColorExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetFillColor(SharpSheets.Evaluations.ColorExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetStrokeLinearGradient(SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Markup.Canvas.DrawPointExpression,System.Collections.Generic.IList{SharpSheets.Markup.Canvas.ColorStopExpression})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetFillLinearGradient(SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Markup.Canvas.DrawPointExpression,System.Collections.Generic.IList{SharpSheets.Markup.Canvas.ColorStopExpression})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetStrokeRadialGradient(SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Evaluations.FloatExpression,System.Collections.Generic.IList{SharpSheets.Markup.Canvas.ColorStopExpression})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetFillRadialGradient(SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Markup.Canvas.DrawPointExpression,SharpSheets.Evaluations.FloatExpression,System.Collections.Generic.IList{SharpSheets.Markup.Canvas.ColorStopExpression})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.GetForegroundColor">
            <summary></summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.GetBackgroundColor">
            <summary></summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.GetMidtoneColor">
            <summary></summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.GetTextColor">
            <summary></summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.AddImage(SharpSheets.Canvas.CanvasImageData,SharpSheets.Markup.Canvas.RectangleExpression,System.Nullable{System.Single})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetTextColor(SharpSheets.Evaluations.ColorExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetTextFormatAndSize(SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextFormat},SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.GetTextFormat">
            <summary></summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.GetTextSize">
            <summary></summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.SetTextRenderingMode(SharpSheets.Canvas.TextRenderingMode)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.GetWidth(SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextFormat},SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.GetAscent(SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextFormat},SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.GetDescent(SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextFormat},SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <returns></returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.DrawText(SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Markup.Canvas.DrawPointExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.DrawTextExact(System.String,System.Single,System.Single)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.DrawRichText(SharpSheets.Evaluations.IExpression{SharpSheets.Canvas.Text.RichString},SharpSheets.Markup.Canvas.DrawPointExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.DrawRichText(SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Evaluations.IExpression{SharpSheets.Canvas.Text.RichString},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Justification},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Alignment},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextHeightStrategy})">
            <summary>Draws a single line of <see cref="T:SharpSheets.Canvas.Text.RichString"/> to the canvas inside <paramref name="rect"/> at the current font size.</summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.DrawRichText(SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Evaluations.IExpression{SharpSheets.Canvas.Text.RichString},SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Justification},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Alignment},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextHeightStrategy})">
            <summary>Draws <see cref="T:SharpSheets.Canvas.Text.RichString"/> to the canvas inside <paramref name="rect"/> at the current font size, splitting the text as necessary (into lines and paragraphs).</summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.FitRichTextLine(SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Evaluations.IExpression{SharpSheets.Canvas.Text.RichString},SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Justification},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Alignment},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextHeightStrategy})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.FitRichText(SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Evaluations.IExpression{SharpSheets.Canvas.Text.RichString},SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Justification},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Alignment},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextHeightStrategy})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.TextField(SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.TextFieldType},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextFormat},SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.ColorExpression,SharpSheets.Evaluations.BoolExpression,SharpSheets.Evaluations.BoolExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Justification},SharpSheets.Evaluations.IntExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.CheckField(SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.CheckType},SharpSheets.Evaluations.ColorExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.ImageField(SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IExpression{System.String})">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.MarkupCanvas.DrawShape(SharpSheets.Shapes.IAreaShape,SharpSheets.Markup.Canvas.RectangleExpression)">
            <summary></summary>
            <returns> This MarkupCanvas instance. </returns>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"> If the canvas has an unclosed child canvas. </exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="P:SharpSheets.Markup.Canvas.MarkupEnvironments.GraphicsStateVariables">
            <summary>
            Variable state for when only the graphics state is known (linewidth, colours, etc.), including functions for calculating text sizes, dimensions, and colors.
            </summary>
        </member>
        <member name="P:SharpSheets.Markup.Canvas.MarkupEnvironments.InferenceDrawingStateVariables">
            <summary>
            Variable state for when the exact drawing dimensions are unknown ("drawwidth"/"drawheight"/etc.).
            Includes graphics state variables and markup canvas area values ("width"/"height"/etc.).
            </summary>
        </member>
        <member name="P:SharpSheets.Markup.Canvas.MarkupEnvironments.DrawingStateVariables">
            <summary>
            Variable state for when the full drawing information is available, including the exact dimensions of the drawing area.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.DrawPointExpression.#ctor(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.SizeExpression.#ctor(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.SizeExpression.EvaluateSize(SharpSheets.Evaluations.IEnvironment,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.RectangleExpression.#ctor(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary>
            
            </summary>
            <param name="_x" default="0"></param>
            <param name="_y" default="0"></param>
            <param name="_width" default="$width"></param>
            <param name="_height" default="$height"></param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.RectangleExpression.EvaluateRect(SharpSheets.Evaluations.IEnvironment,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.ViewBoxExpression.#ctor(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary>
            
            </summary>
            <param name="_x" default="0"></param>
            <param name="_y" default="0"></param>
            <param name="_width" default="$width"></param>
            <param name="_height" default="$height"></param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.TransformExpression.Rotate(SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.TransformExpression.Rotate(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.TransformExpression.Skew(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.TransformExpression.SkewX(SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.TransformExpression.SkewY(SharpSheets.Evaluations.FloatExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.PreserveAspectRatioExpression.#ctor(SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.PreserveAspectRatioExpression.Parse(SharpSheets.Evaluations.Nodes.EvaluationNode,SharpSheets.Evaluations.IEnvironment)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.DimensionExpression.#ctor(SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.PositionExpression.#ctor(SharpSheets.Evaluations.EnumExpression{SharpSheets.Layouts.Anchor},SharpSheets.Markup.Canvas.DimensionExpression,SharpSheets.Markup.Canvas.DimensionExpression,SharpSheets.Markup.Canvas.DimensionExpression,SharpSheets.Markup.Canvas.DimensionExpression)">
            <summary>
            
            </summary>
            <param name="_anchor" default="null">The anchor point for the position, which
            will determine the origin of the coordinates when determining the extend of
            the area.</param>
            <param name="_x" default="null">The x-coordinate of the position.</param>
            <param name="_y" default="null">The y-coordinate of the position.</param>
            <param name="_width" default="null">The width for the position area.</param>
            <param name="_height" default="null">The height for the position area.</param>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.FilePathExpression.#ctor(SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Canvas.FilePathExpression.EvaluatePath(SharpSheets.Evaluations.Nodes.EvaluationNode,SharpSheets.Evaluations.IEnvironment)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.IDrawableElement.Draw(SharpSheets.Markup.Canvas.MarkupCanvas)">
            <summary></summary>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.IShapeElement.AssignGeometry(SharpSheets.Markup.Canvas.MarkupCanvas)">
            <summary></summary>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.IShapeElement.GetPath(SharpSheets.Markup.Canvas.MarkupCanvas)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ICanvasPaint.Apply(SharpSheets.Markup.Canvas.MarkupCanvas,SharpSheets.Markup.Elements.PaintApplication)">
            <summary></summary>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ShapeElement.DoAssignGeometry(SharpSheets.Markup.Canvas.MarkupCanvas)">
            <summary></summary>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ShapeElement.AssignGraphicsParameters(SharpSheets.Markup.Canvas.MarkupCanvas,System.Boolean@,System.Boolean@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ShapeElement.RenderFinalGeometry(SharpSheets.Markup.Canvas.MarkupCanvas,System.Boolean,System.Boolean)">
            <summary></summary>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.ChildDivElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ChildDivElement.#ctor(System.String,SharpSheets.Markup.Elements.DivSetup,SharpSheets.Evaluations.IExpression{SharpSheets.Widgets.IWidget},SharpSheets.Evaluations.IVariableBox,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.MarkupVariable})">
            <summary>
            Constructor for ChildDivElement.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="setup">The DivSetup values for this element.</param>
            <param name="_href" default="null">The widget to use as the content for this element.</param>
            <param name="outerContext">The variables inherited from this Divs parents (not including canvas variables).</param>
            <param name="variables">The variables declared with this Div.</param>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DivSetup.#ctor(SharpSheets.Utilities.FilePath,SharpSheets.Evaluations.FloatExpression,SharpSheets.Markup.Canvas.DimensionExpression,SharpSheets.Markup.Canvas.PositionExpression,SharpSheets.Markup.Canvas.MarginsExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Layouts.Layout},SharpSheets.Evaluations.EnumExpression{SharpSheets.Layouts.Arrangement},SharpSheets.Evaluations.EnumExpression{SharpSheets.Layouts.LayoutOrder},SharpSheets.Evaluations.BoolExpression,SharpSheets.Layouts.Size,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.BoolExpression,SharpSheets.Evaluations.IntExpression,SharpSheets.Markup.Elements.ForEachExpression)">
            <summary>
            Constructor for DivSetup.
            </summary>
            <param name="source">The source file for this Div element.</param>
            <param name="gutter" default="0">The spacing between the child div elements,
            measured in points.</param>
            <param name="_size" default="1">Size of the div, either as a absolute dimension (e.g. pt, cm, in),
            a relative size (in percent or arbitrary units), or auto-sized (with "auto"). Note that if
            specific positioning is provided, <paramref name="_size"/> will be ignored.</param>
            <param name="_position">The position for the <see cref="T:SharpSheets.Markup.Elements.DivElement"/>. Note that if
            <paramref name="_position"/> is provided, then <paramref name="_size"/> will be
            ignored.</param>
            <param name="_margins" default="0,0,0,0">The margins for the div area, which will
            be applied after the element has been positioned using the grid layout. These margins
            will be factored into the minimum size of the element if autosizing is used.</param>
            <param name="layout" default="rows">Specifies the arrangement of child elements within
            the div area, either as rows or columns.</param>
            <param name="arrangement" default="FRONT">Specifies the arrangement of the elements
            children in the available space, indicating whether the children should be arranged
            centrally, or to one end of, the available space.</param>
            <param name="order" default="FORWARD">Specifies the order that the elements children
            should be drawn in across the available space, allowing children to be drawn in reverse
            document order.</param>
            <param name="_provide_remaining" default="false">Indicates that this element provides some
            remaining area for use with the grid layout system.</param>
            <param name="_canvas">[EXPERIMENTAL] Specifies a size for a canvas that will represent the element area.</param>
            <param name="_aspect_ratio" default="-1">Specifies an aspect ratio for the element area.
            This aspect ratio will be applied after the element area has been determined using the
            grid layout system.</param>
            <param name="_enabled" default="true">A flag to indicate whether this element and its children
            should be rendered in the pattern.</param>
            <param name="_repeat">Indicates the number of times this element should be repeated in
            the pattern. Note that such repetitions will each individually repeat any <paramref name="_for_each"/>
            attributes which may be specified.</param>
            <param name="_for_each">Specifies that the element should be repeated a number of times
            based on some collection of elements, which one repetition for each element in that collection.
            Note that if a value is specified for <paramref name="_repeat"/>, then this for-each statement
            will be repeated as a whole <paramref name="_repeat"/> times.</param>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DivSetup.ForEachEnvironments(SharpSheets.Evaluations.IEnvironment,System.Boolean)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ForEachExpression.#ctor(SharpSheets.Evaluations.EvaluationName,SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ForEachExpression.Evaluate(SharpSheets.Evaluations.IEnvironment)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ForEachExpression.EvaluateEnvironments(SharpSheets.Evaluations.IEnvironment,System.Boolean)">
            <summary>
            Evaluate the environments produced by this for-each expression, optionally concatenating each result to the original environment.
            </summary>
            <param name="environment"> The original environment, using which the for-each expression will be evaluated. </param>
            <param name="includeOriginal"> Flag indicating if the original environment should be concatenated onto the returned environments.
            Concatenating each result to the original environment if true, otherwise returning each resulting item as a IEnvironment with a single value. </param>
            <returns></returns>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ForEachExpression.Parse(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.DivElement">
            <summary>
            This element represents a division of the pattern space, according to the
            grid layout system. Each division may be positioned within the available
            space exactly, or allowed to follow the grid layout system. Each division
            may also be repeated, either a stated number of times, or based on some
            collection of data. Divisions may contain other graphical elements, which
            will be drawn in the area assigned to the division.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Elements.DivElement.outerContext">
            <summary>
            These are the variables inherited from the Div parents (this does not include canvas variables)
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Elements.DivElement.markupVariables">
            <summary>
            These are the declared variables belonging to this Div (not including any belonging to parents or children, or those derived from for-each attributes).
            </summary>
        </member>
        <member name="P:SharpSheets.Markup.Elements.DivElement.Variables">
            <summary>
            These are all variables available to this Div: variables declared for this div, variables from for-each statements, and variables from its parent (this does not include canvas variables).
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DivElement.#ctor(System.String,SharpSheets.Markup.Elements.DivSetup,SharpSheets.Evaluations.IVariableBox,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.MarkupVariable})">
            <summary>
            Constructor for DivElement.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="setup"> The DivSetup values for this element. </param>
            <param name="outerContext"> The variables inherited from this Divs parents (not including canvas variables). </param>
            <param name="variables"> The variables declared with this Div. </param>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DivElement.EvaluateAllDrawables(SharpSheets.Markup.Canvas.MarkupCanvasGraphicsData,SharpSheets.Evaluations.IEnvironment,SharpSheets.Shapes.ShapeFactory,System.Boolean)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DivElement.GetDrawable(SharpSheets.Markup.Canvas.MarkupCanvasGraphicsData,SharpSheets.Evaluations.IEnvironment,SharpSheets.Shapes.ShapeFactory,System.Boolean)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="F:SharpSheets.Markup.Elements.DrawableDivElement.environment">
            <summary>
            This environment represents the values belonging to the Div from the hierarchy (itself and its parents), but not those belonging to the canvas.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DrawableDivElement.#ctor(SharpSheets.Markup.Elements.DivElement,SharpSheets.Evaluations.IEnvironment,System.Nullable{SharpSheets.Layouts.Dimension},System.Nullable{SharpSheets.Layouts.Position},SharpSheets.Layouts.Margins,SharpSheets.Layouts.Layout,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,System.Single,System.Single,SharpSheets.Markup.Canvas.NSliceValuesExpression,System.Boolean,System.Boolean)">
            <summary>
            Constructor for DrawableDivElement.
            </summary>
            <param name="pattern"> The pattern that this drawable element is derived from. </param>
            <param name="environment"> An environment containing the values belonging to the originating Div from the hierarchy (itself and its parents), not including canvas values. </param>
            <param name="size"> The size of this Div in the grid layout. </param>
            <param name="position"> The position of this Div in the layout. </param>
            <param name="margins"> The margins of this Div in the layout. </param>
            <param name="layout"> The layout for this Divs children in the grid layout. </param>
            <param name="arrangement"> The arrangement for this Divs children in the grid layout. </param>
            <param name="order"> The ordering for this Divs children in the grid layout. </param>
            <param name="gutter"> The gutter spacing for this Divs children in the grid layout. </param>
            <param name="aspectRatio"> The aspect ratio for this Div in the layout. </param>
            <param name="slicingValues"> The slicing values expression for this Div for laying out shapes in the Markup engine. </param>
            <param name="provideRemaining"> A flag to indicate if this Div should provide remaining area in the grid layout. </param>
            <param name="diagnostic"> A flag to indicate that this Div should draw and record diagnostic information when drawn to the canvas. </param>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DrawableDivElement.GetNamedArea(System.String,SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DrawableDivElement.GetFullFromNamedArea(System.String,SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DrawableDivElement.GetSlicing(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DrawableDivElement.GetRect(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle,SharpSheets.Markup.Canvas.AreaRectExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DrawableDivElement.InvertGetRect(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle,SharpSheets.Markup.Canvas.AreaRectExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.AreaElement">
            <summary>
            This element indicates a named area within a pattern that may be used by
            other document elements -- for example, the remaining area inside an outline.
            Each area, therefore, defines a region of the pattern, and a name. The available
            names depend on the pattern type the area belongs to, and not all patterns use
            all possible names.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.AreaElement.#ctor(System.String,System.String,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Markup.Canvas.MarginsExpression,SharpSheets.Evaluations.BoolExpression)">
            <summary>
            Constructor for AreaElement.
            </summary>
            <param name="id" default="null">A unique name for this element.</param>
            <param name="name" default="null">The name for this area, identifying its
            function in the pattern. The available names depend on the pattern type.</param>
            <param name="_x" default="0">The x-coordinate of this area.</param>
            <param name="_y" default="0">The y-coordinate of this area.</param>
            <param name="_width" default="$width">The width of this area.</param>
            <param name="_height" default="$height">The height of this area.</param>
            <param name="margin" default="0,0,0,0">A margin to be applied to this area,
            after the initial layout using <paramref name="_x"/>, <paramref name="_y"/>,
            <paramref name="_width"/>, and <paramref name="_height"/>. This will likely
            mean that the final width and height are not equal to <paramref name="_width"/>
            and <paramref name="_height"/>.</param>
            <param name="enabled" default="true">A flag to indicate whether this area should
            be available in the pattern.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.DiagnosticElement">
            <summary>
            This element indicates an area in the pattern which is of use or interest to designers
            utilising the pattern. It will not be rendered when the pattern is used, but may be
            displayed in the designer while a document is being edited.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DiagnosticElement.#ctor(System.String,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.BoolExpression)">
            <summary>
            Constructor for DiagnosticElement.
            </summary>
            <param name="id" default="null">A unique name for this element.</param>
            <param name="_x" default="0">The x-coordinate of this area.</param>
            <param name="_y" default="0">The y-coordinate of this area.</param>
            <param name="_width" default="$width">The width of this area.</param>
            <param name="_height" default="$height">The height of this area.</param>
            <param name="enabled" default="true">A flag to indicate whether this area should
            be shown with the pattern.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.TextField">
            <summary>
            This element creates a text field in the document at the specified location.
            The properties of the text field may be set using the standard graphics
            style parameters.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.TextField.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.TextFieldType},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.BoolExpression,SharpSheets.Evaluations.BoolExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Justification},SharpSheets.Evaluations.IntExpression)">
            <summary>
            Constructor for TextField.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_x" default="0">The x-coordinate for the lower-left corner of the text field.</param>
            <param name="_y" default="0">The y-coordinate for the lower-left corner of the text field.</param>
            <param name="_width" default="$width">The width for the text field.</param>
            <param name="_height" default="$height">The height for the text field.</param>
            <param name="_name" default="NAME">The name to use for the field in the document.</param>
            <param name="_tooltip" default="null">The tooltip to use for the field in the document.</param>
            <param name="_field_type" default="STRING">The field type, which constrains the format of strings
            which may be entered into the text field.</param>
            <param name="_value" default="null">The default string value for the text field when first
            displayed in the document..</param>
            <param name="_multiline" default="false">A flag to indicate that the field should allow
            multiple lines of text. If true, the text will be top-aligned, and will allow multiple lines.
            If false, all text will be on a single, vertically-centered line.</param>
            <param name="_rich" default="false">A flag to indicate that the field should use rich text features.</param>
            <param name="_justification" default="LEFT">The justification for the text field.</param>
            <param name="_max_len" default="-1">The maximum allowed length for the text field contents, in characters.</param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.CheckField">
            <summary>
            This element creates a check field in the document at the specified location.
            The properties of the check field may be set using the standard graphics
            style parameters.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.CheckField.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.CheckType})">
            <summary>
            Constructor for CheckField.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_x" default="0">The x-coordinate for the lower-left corner of the check field.</param>
            <param name="_y" default="0">The y-coordinate for the lower-left corner of the check field.</param>
            <param name="_width" default="$width">The width for the check field.</param>
            <param name="_height" default="$height">The height for the check field.</param>
            <param name="_name" default="null">The name to use for the field in the document.</param>
            <param name="_tooltip" default="null">The tooltip to use for the field in the document.</param>
            <param name="_check_type" default="CROSS">The check type to use for the check field, which will
            determine the symbol displayed when the field is in the "On" state.</param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.ImageField">
            <summary>
            This element creates an image field in the document at the specified location.
            The image can be determined later, by the document user.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ImageField.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IExpression{System.String})">
            <summary>
            Constructor for ImageField.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_x" default="0">The x-coordinate for the lower-left corner of the image field.</param>
            <param name="_y" default="0">The y-coordinate for the lower-left corner of the image field.</param>
            <param name="_width" default="$width">The width for the image field.</param>
            <param name="_height" default="$height">The height for the image field.</param>
            <param name="_name" default="NAME">The name to use for the field in the document.</param>
            <param name="_tooltip" default="null">The tooltip to use for the field in the document.</param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Grouping">
            <summary>
            A container used to group other elements together. Any transformation applied
            to this element will apply to all descendents.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Grouping.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.IDrawableElement})">
            <summary>
            Constructor for Grouping.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="elements">Child graphical elements of this grouping.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.ClipPath">
            <summary>
            A clipping path, defined by a series of child shape elements, that another
            element can use to limit the area to which content can be drawn.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ClipPath.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.IShapeElement})">
            <summary>
            Constructor for ClipPath.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="elements">Child shape elements which make up this clipping path.</param>
        </member>
        <member name="M:SharpSheets.Markup.Elements.ClipPath.Apply(SharpSheets.Markup.Canvas.MarkupCanvas)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Symbol">
            <summary>
            A graphical template that can be instantiated with a &lt;use&gt; element.
            This allows the same graphical elements to be easily repeated in a Markup
            document. This element may have other graphical elements as children.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Symbol.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.RectangleExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.PreserveAspectRatioExpression,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.IDrawableElement})">
            <summary>
            Constructor for Symbol.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_viewBox" default="null">The view box for this symbol, which determines the
            available canvas on which child graphical elements can be drawn.</param>
            <param name="_x" default="0">The x coordinate of the symbol. Note that this may be
            overriden by a &lt;use&gt; element.</param>
            <param name="_y" default="0">The y coordinate of the symbol. Note that this may be
            overriden by a &lt;use&gt; element.</param>
            <param name="_width" default="0">The width of the symbol. Note that this may be
            overriden by a &lt;use&gt; element. The view box will be scaled to this size.</param>
            <param name="_height" default="0">The height of the symbol. Note that this may be
            overriden by a &lt;use&gt; element. The view box will be scaled to this size.</param>
            <param name="_preserveAspectRatio" default="null">Determines how the viewbox will
            be deformed if it is used in a container with a different aspect ratio.</param>
            <param name="elements">Child graphical elements of this symbol.</param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Image">
            <summary>
            This element draws an image to the page, at the specified coordinates, with
            the specified size. If the image aspect ratio does not match the specified area,
            then the preserveAspectRatio attribute will determine how the image is scaled/sliced
            to fit.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Image.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.FilePathExpression,SharpSheets.Markup.Canvas.PreserveAspectRatioExpression)">
            <summary>
            Constructor for Image.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_x" default="0">The x coordinate for the image.</param>
            <param name="_y" default="0">The y coordinate for the image.</param>
            <param name="_width" default="$width">The width for the image.</param>
            <param name="_height" default="$height">The height for the image.</param>
            <param name="_file">The filepath for the image to draw.</param>
            <param name="_preserveAspectRatio" default="null">Determines how the image will
            be deformed/cropped if it is used in an area with a different aspect ratio.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.SlicingValuesElement">
            <summary>
            This element can be used to change the way in which the canvas of a <see cref="T:SharpSheets.Markup.Elements.DivElement"/>
            is rescaled, to avoid distorting certain parts of the area. If x and y values are provided,
            these will override the border values.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.SlicingValuesElement.#ctor(System.String,SharpSheets.Evaluations.FloatExpression[],SharpSheets.Evaluations.FloatExpression[],SharpSheets.Markup.Canvas.MarginsExpression,SharpSheets.Evaluations.BoolExpression)">
            <summary>
            Constructor for SlicingValuesElement.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="_xs" default="null">A series of x-coordinates for the dividing lines
            for the slices. These will override the x-coordinates of any margins given for
            <paramref name="_border"/>.</param>
            <param name="_ys" default="null">A series of y-coordinates for the dividing lines
            for the slices. These will override the y-coordinates of any margins given for
            <paramref name="_border"/>.</param>
            <param name="_border" default="null">These values will produce a 9-sliced
            canvas based on the margins provided. These values will be overriden by any
            values provided for <paramref name="_xs"/> and <paramref name="_ys"/>.</param>
            <param name="_enabled" default="true">A flag to indicate whether this element should be
            enabled and included in layout calculations.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.MarkupVariable">
            <summary>
            This element represents a Markup variable.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.MarkupVariable.#ctor(SharpSheets.Evaluations.EvaluationName,SharpSheets.Evaluations.Nodes.EvaluationNode)">
            <summary>
            Constructor for MarkupVariable.
            </summary>
            <param name="name">The name for this variable, which will be used as its variable
            handle in the Markup.</param>
            <param name="value">An expression for the value of this variable. The type of the
            variable will be inferred from the type of this expression.</param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException">Thrown when <paramref name="value"/> does not have a valid <see cref="P:SharpSheets.Evaluations.Nodes.EvaluationNode.ReturnType"/></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.SolidPaint">
            <summary>
            A solid paint element, which can be used to represent a brush which
            draws a single, consistent color, with no spatial variability.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.SolidPaint.#ctor(System.String,SharpSheets.Evaluations.ColorExpression)">
            <summary>
            Constructor for SolidPaint.
            </summary>
            <param name="_id">A unique name for this element.</param>
            <param name="_color">The color for this paint.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.LinearGradient">
            <summary>
            A linear gradient paint element, which is used to represent a gradient
            that changes linearly between two specified points.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.LinearGradient.#ctor(System.String,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Canvas.ColorStopExpression})">
            <summary>
            Constructor for LinearGradient.
            </summary>
            <param name="_id">A unique name for this element.</param>
            <param name="_x1" default="0">The x coordinate of the start point.</param>
            <param name="_y1" default="0">The y coordinate of the start point.</param>
            <param name="_x2" default="$width">The x coordinate of the end point.</param>
            <param name="_y2" default="0">The y coordinate of the end point.</param>
            <param name="stops">The color stops for this gradient.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.RadialGradient">
            <summary>
            A radial gradient paint element, which is used to represent a gradient
            that changes radially between two specified circles.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.RadialGradient.#ctor(System.String,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.BoundingBoxLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.BoundingBoxLengthExpression,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Canvas.ColorStopExpression})">
            <summary>
            Constructor for RadialGradient.
            </summary>
            <param name="_id">A unique name for this element.</param>
            <param name="_cx" default="$width / 2">The x coordinate of the end circle.</param>
            <param name="_cy" default="$height / 2">The y coordinate of the end circle.</param>
            <param name="_r" default="min($width, $height) / 2">The radius of the end circle.</param>
            <param name="_fx" default="$width / 2">The x coordinate of the start circle.</param>
            <param name="_fy" default="$height / 2">The y coordinate of the start circle.</param>
            <param name="_fr" default="0">The radius of the start circle.</param>
            <param name="stops">The color stops for this gradient.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Path">
            <summary>
            A path element draws a shape by combining multiple straight or curved lines in
            a series of drawing operations, that may then filled and/or stroked to create
            complex shapes. The path data is provided as a series of drawing instructions
            (represented by an upper- or lower-case letter) with zero or more associated
            argument values.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Path.#ctor(SharpSheets.Markup.Elements.StyleSheet,System.String,SharpSheets.Markup.Elements.Path.DrawOperation[])">
            <summary>
            Constructor for Path.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_d" default="null">The path data, as a series of drawing instructions
            and arguments.</param>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Path.ParseValue(System.Text.RegularExpressions.Match,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Path.GetDrawPoints(SharpSheets.Evaluations.FloatExpression[])">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Circle">
            <summary>
            This element draws a circle at a specified location with a specific radius.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Circle.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary>
            Constructor for Circle.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_cx" default="0">The x coordinate of the circle centre.</param>
            <param name="_cy" default="0">The y coordinate of the circle centre.</param>
            <param name="_r" default="0">The radius of the circle.</param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Ellipse">
            <summary>
            This element draws an ellipse at a specified location with specific x and y radii.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Ellipse.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary>
            Constructor for Ellipse.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_cx" default="0">The x coordinate of the ellipse centre.</param>
            <param name="_cy" default="0">The y coordinate of the ellipse centre.</param>
            <param name="_rx" default="0">The radius of the ellipse on the x axis.</param>
            <param name="_ry" default="0">The radius of the ellipse on the y axis</param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Line">
            <summary>
            This element draws a straight line between two points.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Line.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression)">
            <summary>
            Constructor for Line.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_x1" default="0">The x coordinate of the start point.</param>
            <param name="_y1" default="0">The y coordinate of the start point.</param>
            <param name="_x2" default="0">The x coordinate of the end point.</param>
            <param name="_y2" default="0">The y coordinate of the end point.</param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Polygon">
            <summary>
            This element draws a closed shape, made of a series of straight line segments.
            The last point will be connected to the first point.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Polygon.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.DrawPointExpression[])">
            <summary>
            Constructor for Polygon.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_points" default="null">A series of x,y coordinates for the
            points for the polygon shape. Each point will be connected to the previous
            and subsequent point by straight line segments, with the first and last
            point also having a straight line connecting them.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Polyline">
            <summary>
            This element draws a series of connected straight lines.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Polyline.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.DrawPointExpression[])">
            <summary>
            Constructor for Polyline.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_points" default="null">A series of x,y coordinates for the
            point for the line segments. Each point will be connected to the previous
            subsequent point by straight line segments (with no connection between
            the first and last point).</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Rect">
            <summary>
            This element draws a rectangle, defined by a position for the lower-left corner,
            a width, and a height. The rectangle may have rounded corners.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Rect.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression)">
            <summary>
            Constructor for Rect.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_x" default="0">The x-coordinate of the lower-left corner of the rectangle.</param>
            <param name="_y" default="0">The y-coordinate of the lower-left corner of the rectangle.</param>
            <param name="_width" default="0">The width of the rectangle.</param>
            <param name="_height" default="0">The height of the rectangle.</param>
            <param name="_rx" default="null">The horizontal corner radius for rounded corners.</param>
            <param name="_ry" default="null">The vertical corner radius for rounded corners.</param>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Elements.StyledDivElement`1.#ctor(System.String,SharpSheets.Markup.Elements.DivSetup,SharpSheets.Markup.Canvas.ContextExpression,SharpSheets.Evaluations.IExpression{`0},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IVariableBox,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.MarkupVariable})">
            <summary>
            Constructor for StyledDivElement.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="setup">The DivSetup values for this element.</param>
            <param name="_shapeContext">The shape context for this element.</param>
            <param name="_href" default="null">The shape to use as the style for this element.</param>
            <param name="_name" default="null">The name to use for this shape, if a name is accepted by the shape type.</param>
            <param name="outerContext">The variables inherited from this Divs parents (not including canvas variables).</param>
            <param name="variables">The variables declared with this Div.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.BoxStyledDivElement">
            <summary>
            This element draws a box style in its assigned area. The area is assigned
            in the same way as a &lt;div&gt; element, and this element obeys all the same
            rules for positioning and graphics state.
            <para/>
            The remaining area of the box may be painted using a &lt;remaining&gt; child
            element.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.BoxStyledDivElement.#ctor(System.String,SharpSheets.Markup.Elements.DivSetup,SharpSheets.Markup.Canvas.ContextExpression,SharpSheets.Evaluations.IExpression{SharpSheets.Shapes.IBox},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IVariableBox,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.MarkupVariable})">
            <summary>
            Constructor for BoxStyledDivElement.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="setup">The DivSetup values for this element.</param>
            <param name="_shapeContext">The shape context for this element.</param>
            <param name="_href" default="null">The shape to use as the style for this element.</param>
            <param name="_name" default="null">The name to use for this shape, if a name is accepted by the shape type.</param>
            <param name="outerContext">The variables inherited from this Divs parents (not including canvas variables).</param>
            <param name="variables">The variables declared with this Div.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.LabelledBoxStyledDivElement">
            <summary>
            This element draws a labelled box style in its assigned area. The area is assigned
            in the same way as a &lt;div&gt; element, and this element obeys all the same
            rules for positioning and graphics state.
            <para/>
            The remaining area of the box may be painted using a &lt;remaining&gt; child
            element, and the label using a &lt;label&gt; child element.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.LabelledBoxStyledDivElement.#ctor(System.String,SharpSheets.Markup.Elements.DivSetup,SharpSheets.Markup.Canvas.ContextExpression,SharpSheets.Evaluations.IExpression{SharpSheets.Shapes.ILabelledBox},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IVariableBox,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.MarkupVariable})">
            <summary>
            Constructor for LabelledBoxStyledDivElement.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="setup">The DivSetup values for this element.</param>
            <param name="_shapeContext">The shape context for this element.</param>
            <param name="_href" default="null">The shape to use as the style for this element.</param>
            <param name="_name" default="null">The name to use for this shape, if a name is accepted by the shape type.</param>
            <param name="outerContext">The variables inherited from this Divs parents (not including canvas variables).</param>
            <param name="variables">The variables declared with this Div.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.TitledBoxStyledDivElement">
            <summary>
            This element draws a titled box style in its assigned area. The area is assigned
            in the same way as a &lt;div&gt; element, and this element obeys all the same
            rules for positioning and graphics state.
            <para/>
            The remaining area of the box may be painted using a &lt;remaining&gt; child
            element.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.TitledBoxStyledDivElement.#ctor(System.String,SharpSheets.Markup.Elements.DivSetup,SharpSheets.Markup.Canvas.ContextExpression,SharpSheets.Evaluations.IExpression{SharpSheets.Shapes.ITitledBox},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IVariableBox,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.MarkupVariable})">
            <summary>
            Constructor for BoxStyledDivElement.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="setup">The DivSetup values for this element.</param>
            <param name="_shapeContext">The shape context for this element.</param>
            <param name="_href" default="null">The shape to use as the style for this element.</param>
            <param name="_name" default="null">The name to use for this shape, if a name is accepted by the shape type.</param>
            <param name="outerContext">The variables inherited from this Divs parents (not including canvas variables).</param>
            <param name="variables">The variables declared with this Div.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.BarStyledDivElement">
            <summary>
            This element draws a bar style in its assigned area. The area is assigned
            in the same way as a &lt;div&gt; element, and this element obeys all the same
            rules for positioning and graphics state.
            <para/>
            The remaining area of the bar may be painted using a &lt;remaining&gt; child
            element, and the label using a &lt;label&gt; child element.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.BarStyledDivElement.#ctor(System.String,SharpSheets.Markup.Elements.DivSetup,SharpSheets.Markup.Canvas.ContextExpression,SharpSheets.Evaluations.IExpression{SharpSheets.Shapes.IBar},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IVariableBox,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.MarkupVariable})">
            <summary>
            Constructor for BarStyledDivElement.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="setup">The DivSetup values for this element.</param>
            <param name="_shapeContext">The shape context for this element.</param>
            <param name="_href" default="null">The shape to use as the style for this element.</param>
            <param name="_name" default="null">The name to use for this shape, if a name is accepted by the shape type.</param>
            <param name="outerContext">The variables inherited from this Divs parents (not including canvas variables).</param>
            <param name="variables">The variables declared with this Div.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.LabelledUsageBarStyledDivElement">
            <summary>
            This element draws a usage bar style in its assigned area. The area is assigned
            in the same way as a &lt;div&gt; element, and this element obeys all the same
            rules for positioning and graphics state.
            <para/>
            The label area of the bar may be painted using a &lt;label&gt; child
            element, and the entry areas using &lt;entry1&gt; and &lt;entry2&gt;
            child elements.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.LabelledUsageBarStyledDivElement.#ctor(System.String,SharpSheets.Markup.Elements.DivSetup,SharpSheets.Markup.Canvas.ContextExpression,SharpSheets.Evaluations.IExpression{SharpSheets.Shapes.IUsageBar},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.StringExpression,SharpSheets.Evaluations.StringExpression,SharpSheets.Markup.Elements.LabelDetailsExpression,SharpSheets.Evaluations.TextExpression,SharpSheets.Markup.Elements.LabelDetailsExpression,SharpSheets.Evaluations.IVariableBox,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.MarkupVariable})">
            <summary>
            Constructor for LabelledUsageBarStyledDivElement.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="setup">The DivSetup values for this element.</param>
            <param name="_shapeContext">The shape context for this element.</param>
            <param name="_href" default="null">The shape to use as the style for this element.</param>
            <param name="_name" default="null">The name to use for this shape, if a name is accepted by the shape type.</param>
            <param name="_label1" default="null">A label to be drawn by the first entry area.</param>
            <param name="_label2" default="null">A label to be drawn by the second entry area.</param>
            <param name="labels_">Label layout details for this usage bar.</param>
            <param name="_note" default="null">A note to be drawn by the label area.</param>
            <param name="note_">Note layout details for this usage bar.</param>
            <param name="outerContext">The variables inherited from this Divs parents (not including canvas variables).</param>
            <param name="variables">The variables declared with this Div.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.DetailStyledDivElement">
            <summary>
            This element draws a detail style in its assigned area. The area is assigned
            in the same way as a &lt;div&gt; element, and this element obeys all the same
            rules for positioning and graphics state.
            <para/>
            This styled element has no named areas where content can be drawn.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.DetailStyledDivElement.#ctor(System.String,SharpSheets.Markup.Elements.DivSetup,SharpSheets.Markup.Canvas.ContextExpression,SharpSheets.Evaluations.IExpression{SharpSheets.Shapes.IDetail},SharpSheets.Evaluations.IExpression{System.String},SharpSheets.Evaluations.IVariableBox,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.MarkupVariable})">
            <summary>
            Constructor for BoxStyledDivElement.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="setup">The DivSetup values for this element.</param>
            <param name="_shapeContext">The shape context for this element.</param>
            <param name="_href" default="null">The shape to use as the style for this element.</param>
            <param name="_name" default="null">The name to use for this shape, if a name is accepted by the shape type.</param>
            <param name="outerContext">The variables inherited from this Divs parents (not including canvas variables).</param>
            <param name="variables">The variables declared with this Div.</param>
        </member>
        <member name="M:SharpSheets.Markup.Elements.LabelDetailsExpression.#ctor(SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextFormat},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Justification},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Alignment},SharpSheets.Evaluations.ColorExpression)">
            <summary>
            Constructor for LabelDetailsExpression.
            </summary>
            <param name="fontsize">The fontsize for the label text.</param>
            <param name="x_offset">The x-offset for the label from its initial position.</param>
            <param name="y_offset">The y-offset for the label from its initial position.</param>
            <param name="font_style">The font style for the label text.</param>
            <param name="justification">The horizontal justification for the label text.</param>
            <param name="alignment">The vertical alignment for the label text.</param>
            <param name="color">The color for the label text.</param>
        </member>
        <member name="M:SharpSheets.Markup.Elements.StyleSheet.#ctor(SharpSheets.Markup.Elements.ClipPath,SharpSheets.Evaluations.EnumExpression{SharpSheets.Markup.Canvas.AreaRule},SharpSheets.Markup.Elements.ICanvasPaint,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Markup.Canvas.AreaRule},SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextFormat},SharpSheets.Markup.Elements.ICanvasPaint,SharpSheets.Evaluations.FloatExpression[],SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.LineCapStyle},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.LineJoinStyle},SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Markup.Canvas.TextAnchor},SharpSheets.Evaluations.ColorExpression,SharpSheets.Markup.Canvas.TransformExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Markup.Canvas.DrawingCoords},SharpSheets.Evaluations.BoolExpression)">
            <summary>
            Constructor for StyleSheet.
            </summary>
            <param name="_clip_path">A reference to some clipping geometry that will be used to
            clip the current element.</param>
            <param name="clip_rule">The clipping rule to be used when a clipping path is specified.</param>
            <param name="fill" default="$background">A paint used to fill any shape geometries.
            This can either be a reference to a paint element, or a color value. If "none", a
            there will be no fill. The default is the current background colour.</param>
            <param name="fill_opacity">When the <paramref name="fill"/> is specified as a color value,
            this attribute may be used to modify the opacity of that solid color. This will
            override any A value provided with ARGB values.</param>
            <param name="fill_rule" default="NonZero">The fill rule to be used when filling shape
            geometries with the <paramref name="fill"/> paint.</param>
            <param name="font_size">The fontsize to use for any text.</param>
            <param name="font_style" default="REGULAR">Font format to use for any text. This will
            use the appropriate font format from the current font selection.</param>
            <param name="stroke">A paint used to stroke any shape geometry paths.
            This can either be a reference to a paint element, or a color value. If "none", a
            there will be no path stroking. The default is "none".</param>
            <param name="stroke_dasharray">An array of dash lengths with which to stroke any shape
            geometry paths. The resulting stroke will be a series of "on" and "off" lengths,
            corresponding to the dash array. These lengths are measured in points.</param>
            <param name="stroke_dashoffset">An offset for the start of the stroke dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="stroke_linecap">The shape to be used at the ends of open shape geometry paths
            (and dashes, if any) when they are stroked.</param>
            <param name="stroke_linejoin">The way in which the outer edges of two connected shape
            geometry paths segments should be joined.</param>
            <param name="stroke_miterlimit">The limit on the ratio of the miter length to the stroke
            width to use when stroke paths are joined with mitres. A bevel join will be used if
            the ratio is exceeded.</param>
            <param name="stroke_opacity">When the <paramref name="stroke"/> is specified as a color
            value, this attribute may be used to modify the opacity of that solid color. This will
            override any A value provided with ARGB values.</param>
            <param name="stroke_width">The line width to use when stroking any shape geometries.</param>
            <param name="text_anchor" default="START">When drawing text, this attribute will be used
            to determine how a text chunk should be aligned, relative to the current start point
            of the text layout.</param>
            <param name="text_color" default="$textcolor">The color to use when filling text glyphs.</param>
            <param name="_transform">The transform to apply to this element before rendering. This can be
            expressed as a series of affine transformations. If no value is provided, the transform
            is the Identity transformation.</param>
            <param name="drawing_coords">[Experimental Feature] Affects the drawing coordinates
            used for this element.</param>
            <param name="enabled" default="true">A flag to indicate whether this element should be
            rendered and included in layouts.</param>
        </member>
        <member name="M:SharpSheets.Markup.Elements.TextElementUtils.ApplyGraphicsParameters(SharpSheets.Markup.Elements.IStyledElement,SharpSheets.Markup.Canvas.MarkupCanvas)">
            <summary></summary>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Elements.Text">
            <summary>
            This element renders text, either directly, or from &lt;tspan&gt; and &lt;textPath&gt;
            children.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.Text.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.ITextPiece})">
            <summary>
            Constructor for Text.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_x" default="0">The x coordinate for the starting point of the text baseline.</param>
            <param name="_y" default="0">The y coordinate for the starting point of the text baseline.</param>
            <param name="_dx" default="null">An optional horizontal offset for the text start position.</param>
            <param name="_dy" default="null">An optional vertical offset for the text start position.</param>
            <param name="textContent">Child textual elements of this text element.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.TextRect">
            <summary>
            This element renders text inside a rectangular area, either directly, or from &lt;tspan&gt;
            children. The text can be dynamically resized to fit the available area, or drawn with
            a fixed font size. The justification and alignment of the text can also be specified.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.TextRect.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Evaluations.BoolExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Justification},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.Alignment},SharpSheets.Evaluations.EnumExpression{SharpSheets.Canvas.Text.TextHeightStrategy},SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.BoolExpression,System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.TSpan})">
            <summary>
            Constructor for TextRect.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_x" default="0">The x coordinate for the text area, corresponding
            to the left edge of the rectangle.</param>
            <param name="_y" default="0">The y coordinate for the text area, corresponding
            to the bottom edge of the rectangle.</param>
            <param name="_width" default="$width">The width of the text area rectangle.</param>
            <param name="_height" default="$height">The height of the text area rectangle.</param>
            <param name="_fit_text" default="false">A flag to indicate that the text should be
            dynamically resized to fit the available area, within the minimum and maximum
            font sizes specified.</param>
            <param name="min_font_size" default="null">The minimum font size to use if the
            text is to be dynamically resized.</param>
            <param name="max_font_size" default="null">The maximum font size to use if the
            text is to be dynamically resized.</param>
            <param name="justification" default="LEFT">The horizontal justification for the
            text within the text area rectangle.</param>
            <param name="alignment" default="BOTTOM">The vertical alignment for the
            text within the text area rectangle.</param>
            <param name="height_strategy" default="LineHeightBaseline">The height calculation
            strategy to use when arranging the text within the text area.</param>
            <param name="line_spacing" default="1.0">The line spacing, which is the distance
            between successive text baselines, measured in multiples of the current fontsize.</param>
            <param name="paragraph_spacing" default="0.0">The spacing to be used between paragraphs
            of text, measured in points. This spacing is in addition to any line spacing.</param>
            <param name="_single_line" default="false">A flag to indicate that the text should
            be drawn all on one line.</param>
            <param name="textContent">Child tspan elements of this text element.</param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.TSpan">
            <summary>
            A text span element, used to provide additional styling for a single text segment
            within another text element.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.TSpan.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Canvas.XLengthExpression,SharpSheets.Markup.Canvas.YLengthExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.FloatExpression,SharpSheets.Evaluations.TextExpression)">
            <summary>
            Constructor for TSpan.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            /// <param name="_x" default="null">The x coordinate for the starting point of the text baseline.</param>
            <param name="_y" default="null">The y coordinate for the starting point of the text baseline.</param>
            <param name="_dx" default="null">Shifts the text position horizontally from the previous text element.</param>
            <param name="_dy" default="null">Shifts the text position vertically from the previous text element.</param>
            <param name="text"></param>
        </member>
        <member name="T:SharpSheets.Markup.Elements.PathSide">
            <summary>
            Indicates a side of a path.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Elements.PathSide.LEFT">
            <summary>
            The left side of the path.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Elements.PathSide.RIGHT">
            <summary>
            The right side of the path.
            </summary>
        </member>
        <member name="T:SharpSheets.Markup.Elements.ContinueStyle">
            <summary>
            Indicates if and how a path should be continued once its end has
            been reached.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Elements.ContinueStyle.NONE">
            <summary>
            The path should not be continued, and any additional content
            should not be rendered.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Elements.ContinueStyle.CONTINUE">
            <summary>
            The path should be continued from its end position, using it's
            final direction, and any additional content should be rendered
            in this direction.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Elements.ContinueStyle.LOOP">
            <summary>
            The path should be looped, with any additional content after the
            end of the path has been reached being continued from the start
            of the path.
            </summary>
        </member>
        <member name="T:SharpSheets.Markup.Elements.TextPath">
            <summary>
            This element draws text along a specified path.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Elements.TextPath.#ctor(System.String,SharpSheets.Markup.Elements.StyleSheet,SharpSheets.Markup.Elements.IShapeElement,SharpSheets.Markup.Canvas.LengthExpression,SharpSheets.Evaluations.EnumExpression{SharpSheets.Markup.Elements.PathSide},SharpSheets.Evaluations.EnumExpression{SharpSheets.Markup.Elements.ContinueStyle},System.Collections.Generic.IEnumerable{SharpSheets.Markup.Elements.TSpan})">
            <summary>
            Constructor for TextPath.
            </summary>
            <param name="_id" default="null">A unique name for this element.</param>
            <param name="styleSheet">StyleSheet for this element.</param>
            <param name="_path">A path along which the text should be rendered.</param>
            <param name="_startOffset" default="0">An offset from the start of the path,
            at which the text contents should begin rendering. This may be expressed as
            either an absolute value, or as a percentage.</param>
            <param name="_side" default="LEFT">The side of the path on which the text
            should be rendered.</param>
            <param name="_continue" default="NONE">The strategy to use when the text length
            is greater than the path length. The text may be continued, such that it is
            all rendered.</param>
            <param name="spans">Child tspan elements of this text path element.</param>
        </member>
        <member name="M:SharpSheets.Markup.Elements.TextPath.Draw(SharpSheets.Markup.Canvas.MarkupCanvas,SharpSheets.Markup.Canvas.DrawPointExpression@,SharpSheets.Markup.Canvas.VectorExpression@,System.Boolean,System.Boolean)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationCalculationException"></exception>
            <exception cref="T:SharpSheets.Markup.Canvas.MarkupCanvasStateException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupDocumentation.#cctor">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.SystemException"></exception>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupDocumentation.GetArgumentDetails(System.Reflection.ConstructorInfo,SharpSheets.Documentation.ConstructorDoc,System.Boolean,System.String)">
            <summary></summary>
            <exception cref="T:System.SystemException"></exception>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupDocumentation.GetExampleValue(System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
            <exception cref="T:System.SystemException"></exception>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupDocumentation.MakeConstructorDetails(System.String,System.Reflection.ConstructorInfo,System.Type,SharpSheets.Documentation.ConstructorDoc,SharpSheets.Documentation.DocumentationString)">
            <summary></summary>
            <exception cref="T:System.SystemException"></exception>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupDocumentation.GetConstructorDetails(System.Type,System.String)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.SystemException"></exception>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupEvaluationTypes.ParseArgumentType(System.String,System.String,SharpSheets.Markup.Parsing.XMLElement[])">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupPatternParser.ParsedPatternDocument.GetCompilationResult">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupPatternParser.ParsedPatternDocument.LogUnused(SharpSheets.Markup.Parsing.XMLNode)">
            <summary>
            Returns true if the node in question, or one of it's descendants, has been marked as visited.
            Returns false and logs an error if it has not.
            </summary>
            <param name="node">Node to check.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupPatternParser.ParsedPatternDocument.XElementVariables.GetVariable(SharpSheets.Evaluations.EvaluationName,SharpSheets.Markup.Elements.MarkupVariable@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationProcessingException"></exception>
            <exception cref="T:SharpSheets.Evaluations.UndefinedVariableException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupPatternParser.ParsedPatternDocument.GetDrawPoint(SharpSheets.Markup.Parsing.XMLElement,System.String,System.String,SharpSheets.Evaluations.IVariableBox,SharpSheets.Markup.Canvas.DrawPointExpression)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupPatternParser.ParsedPatternDocument.GetRectangle(SharpSheets.Markup.Parsing.XMLElement,System.Boolean,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Parsing.MarkupPatternType">
            <summary>
            Indicates the type of a Markup pattern, describing how the pattern contents
            should be interpreted and made available to the user.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Parsing.MarkupPatternType.WIDGET">
            <summary>
            A widget pattern.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Parsing.MarkupPatternType.BOX">
            <summary>
            A box pattern.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Parsing.MarkupPatternType.LABELLEDBOX">
            <summary>
            A labelled box pattern.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Parsing.MarkupPatternType.TITLEDBOX">
            <summary>
            A titled box pattern.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Parsing.MarkupPatternType.BAR">
            <summary>
            A bar pattern.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Parsing.MarkupPatternType.USAGEBAR">
            <summary>
            A usage bar pattern.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Parsing.MarkupPatternType.DETAIL">
            <summary>
            A detail pattern.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseValue(System.Text.RegularExpressions.Match,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseSVGNumbers(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.GetPercentValue(System.Text.RegularExpressions.Match)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParsePercentage(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParsePercentOrLength(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseColor(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseEnum``1(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseText(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseFilePath(System.String,SharpSheets.Utilities.DirectoryPath,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseConcreteSize(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseConcreteRectangle(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseRectangle(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseMargins(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseDimension(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseDrawPoints(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseTransform(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParsePreserveAspectRatio(System.String,SharpSheets.Evaluations.IVariableBox)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.EvaluationException"></exception>
        </member>
        <member name="M:SharpSheets.Markup.Parsing.MarkupValueParsing.ParseLibraryName(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Patterns.MarkupArgumentFormat">
            <summary>
            Indicates the format that the Markup argument should take in the configuration file.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Patterns.MarkupArgumentFormat.DEFAULT">
            <summary>
            Indicates that the argument should be a single-line key-value pair or boolean flag.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Patterns.MarkupArgumentFormat.ENTRIES">
            <summary>
            Indicates that the argument should take a list of values from the entries of an entity in the configuration file.
            </summary>
        </member>
        <member name="F:SharpSheets.Markup.Patterns.MarkupArgumentFormat.NUMBERED">
            <summary>
            Indicates that the argument should take a sequence of numbered properties from the configuration file.
            </summary>
        </member>
        <member name="T:SharpSheets.Markup.Patterns.MarkupSingleArgument">
            <summary>
            This element represents a single Markup argument.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Patterns.MarkupSingleArgument.#ctor(SharpSheets.Evaluations.EvaluationName,SharpSheets.Evaluations.EvaluationType,System.Nullable{SharpSheets.Evaluations.EvaluationName},System.String,System.Boolean,System.Object,System.Object,SharpSheets.Evaluations.BoolExpression,System.String,System.Boolean,SharpSheets.Markup.Patterns.MarkupArgumentFormat)">
            <summary>
            Constructor for MarkupSingleArgument.
            </summary>
            <param name="_name">The name for this argument. This name will be visible to
            the user, and by default will also be the variable name for this argument
            in the Markup, unless the <paramref name="_variable"/> attribute is specified.</param>
            <param name="_type">The type for this argument. This determines how the data
            provided to this argument will be processed and made available in the Markup.</param>
            <param name="_variable">An optional variable name, which (if provided) will be used
            in place of the <paramref name="_name"/> as the variable handle for this argument
            in the Markup.</param>
            <param name="_desc">A description for this argument, which will be presented to
            the user.</param>
            <param name="_optional">A flag to indicate that this argument is optional. If this
            attribute is true and the argument does not have a <paramref name="_default"/> value,
            it is important to check that the value is present before using it.</param>
            <param name="_default">An optional default value for this argument, which must be
            valid data of the specified <paramref name="_type"/>.</param>
            <param name="_example">An optional example value for this argument, which will be used
            when displaying the pattern in the designer and in documentation, but will not be used
            as a default when the pattern is utilised by a user.</param>
            <param name="_validate">A validation test for this argument, which may only use the
            current variable. If this evaluates to false, then the default value will be used instead,
            and an error message will be displayed to the user.</param>
            <param name="_validate_message">An error message to display to the user when the
            <paramref name="_validate"/> test evaluates to false.</param>
            <param name="_local">A flag to indicate that argument must be explicitly specified for the
            entry in the configuration file, and may not be inherited.</param>
            <param name="_format">The format for this argument, allowing for arguments which
            utilise entry data from the configuration file, or similar.</param>
        </member>
        <member name="T:SharpSheets.Markup.Patterns.MarkupGroupArgument">
            <summary>
            This element represents a group of Markup arguments.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Patterns.MarkupGroupArgument.#ctor(SharpSheets.Evaluations.EvaluationName,System.Nullable{SharpSheets.Evaluations.EvaluationName},System.Collections.Generic.IEnumerable{SharpSheets.Markup.Patterns.IMarkupArgument})">
            <summary>
            Constructor for MarkupGroupArgument.
            </summary>
            <param name="_name">The name for this argument group. This name will be visible to
            the user, and by default will also be the variable name for this argument group
            in the Markup, unless the <paramref name="_variable"/> attribute is specified.</param>
            <param name="_variable">An optional variable name, which (if provided) will be used
            in place of the <paramref name="_name"/> as the variable handle for this argument group
            in the Markup.</param>
            <param name="args">The arguments inside this grouping.</param>
        </member>
        <member name="M:SharpSheets.Markup.Patterns.MarkupGroupArgument.GroupFieldAccessor(System.Object,SharpSheets.Evaluations.EvaluationName)">
            <summary></summary>
            <exception cref="T:SharpSheets.Evaluations.UndefinedVariableException"></exception>
            <exception cref="T:SharpSheets.Evaluations.EvaluationTypeException"></exception>
        </member>
        <member name="T:SharpSheets.Markup.Patterns.MarkupValidation">
            <summary>
            This element represents a validation test for a Markup pattern's arguments.
            If the provided test returns false, then an error message will be displayed
            to the user.
            </summary>
        </member>
        <member name="M:SharpSheets.Markup.Patterns.MarkupValidation.#ctor(SharpSheets.Evaluations.BoolExpression,System.String)">
            <summary>
            Constructor for MarkupValidation.
            </summary>
            <param name="_test">A test to be run on one or more of the pattern argument values.
            An error message will be displayed if this expression evaluates to false.</param>
            <param name="_message">A message to be displayed to the user if the test evaluates to
            false.</param>
        </member>
        <member name="M:SharpSheets.Markup.Patterns.PatternData.GetPatternVariables``1">
            <summary></summary>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="T"/> is not a valid pattern type.</exception>
        </member>
        <member name="M:SharpSheets.Parsing.DictionaryContext.CreateContext(System.String,System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.Escaping.SplitUnescaped(System.String,System.Char[],System.Int32,System.StringSplitOptions)">
            <summary></summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IContext.GetProperty(System.String,System.Boolean,SharpSheets.Parsing.IContext,System.String,System.Nullable{SharpSheets.Parsing.DocumentSpan}@)">
            <summary>
             
            </summary>
            <param name="key"></param>
            <param name="local"></param>
            <param name="origin"></param>
            <param name="defaultValue"></param>
            <param name="location"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IContext.GetFlag(System.String,System.Boolean,SharpSheets.Parsing.IContext,System.Nullable{SharpSheets.Parsing.DocumentSpan}@)">
            <summary>
            
            </summary>
            <param name="flag"></param>
            <param name="local"></param>
            <param name="origin"></param>
            <param name="location"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IContext.GetLocalProperties(SharpSheets.Parsing.IContext)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IContext.GetLocalFlags(SharpSheets.Parsing.IContext)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IContext.GetEntries(SharpSheets.Parsing.IContext)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IContext.GetDefinitions(SharpSheets.Parsing.IContext)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IContext.GetNamedChild(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ContextUtils.GetProperty(SharpSheets.Parsing.IContext,System.String,System.Boolean,SharpSheets.Parsing.IContext,System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ContextUtils.GetFlag(SharpSheets.Parsing.IContext,System.String,System.Boolean,SharpSheets.Parsing.IContext)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ContextUtils.GetProperty``1(SharpSheets.Parsing.IContext,System.String,System.Boolean,SharpSheets.Parsing.IContext,``0,System.Func{System.String,``0},System.Nullable{SharpSheets.Parsing.DocumentSpan}@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ContextUtils.GetProperty``1(SharpSheets.Parsing.IContext,System.String,System.Boolean,SharpSheets.Parsing.IContext,``0,System.Func{System.String,``0})">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ContextUtils.GetProperty``1(SharpSheets.Parsing.IContext,System.String,System.Boolean,SharpSheets.Parsing.IContext,System.Func{System.String,``0},System.Nullable{SharpSheets.Parsing.DocumentSpan}@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ContextUtils.GetProperty``1(SharpSheets.Parsing.IContext,System.String,System.Boolean,SharpSheets.Parsing.IContext,System.Func{System.String,``0})">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ContextUtils.GetAllProperties(SharpSheets.Parsing.IContext,System.Boolean)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ContextUtils.GetAllFlags(SharpSheets.Parsing.IContext,System.Boolean)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.EmptyChildContext.#ctor(SharpSheets.Parsing.IContext,System.String,System.Nullable{SharpSheets.Parsing.DocumentSpan})">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:SharpSheets.Parsing.IDocumentEntity.SimpleName">
            <summary> A single word that describes the type of entity this is. </summary>
        </member>
        <member name="P:SharpSheets.Parsing.IDocumentEntity.DetailedName">
            <summary> A detailed name that includes the child index of this entity among its parent's children. </summary>
        </member>
        <member name="P:SharpSheets.Parsing.IDocumentEntity.FullName">
            <summary> A full path of the entity in the document tree. </summary>
        </member>
        <member name="P:SharpSheets.Parsing.IDocumentEntity.Location">
            <summary> Document span that this entity originates from. </summary>
        </member>
        <member name="P:SharpSheets.Parsing.IDocumentEntity.Depth">
            <summary> Depth of this entity in the document tree. </summary>
        </member>
        <member name="P:SharpSheets.Parsing.IDocumentEntity.Parent">
            <summary> The parent node of this entity. </summary>
        </member>
        <member name="P:SharpSheets.Parsing.IDocumentEntity.Children">
            <summary> The child nodes of this entity. </summary>
        </member>
        <member name="P:SharpSheets.Parsing.DocumentSpan.Offset">
            <summary> Offset (zero-index) of the starting character for this span in the document. A value of less than 0 indicates that this span is imaginary.</summary>
        </member>
        <member name="P:SharpSheets.Parsing.DocumentSpan.Line">
            <summary> Line index of this span in the document. A value of less than 0 indicates that this span is imaginary.</summary>
        </member>
        <member name="P:SharpSheets.Parsing.DocumentSpan.Column">
            <summary> Column index for the start of this span in the specified line. A value less than 0 indicates that this span takes up the whole line. </summary>
        </member>
        <member name="P:SharpSheets.Parsing.DocumentSpan.Length">
            <summary> The length of this span (the number of characters). A value less than 0 indicates that this span takes up the rest of the line after <see cref="P:SharpSheets.Parsing.DocumentSpan.Column"/>. </summary>
        </member>
        <member name="F:SharpSheets.Parsing.DocumentSpan.Imaginary">
            <summary> Instance of an imaginary span (i.e. one which does not actually exist in the document), with values (-1,-1,-1). </summary>
        </member>
        <member name="M:SharpSheets.Parsing.IFileReader.ReadAllText(System.String)">
            <summary></summary>
            <param name="path"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IFileReader.ReadAllLines(System.String)">
            <summary></summary>
            <param name="path"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IFileReader.OpenFile(System.String)">
            <summary></summary>
            <param name="path"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IParser.Parse(SharpSheets.Utilities.FilePath,SharpSheets.Utilities.DirectoryPath,System.String,SharpSheets.Parsing.CompilationResult@)">
            <summary></summary>
            <param name="origin"></param>
            <param name="source"></param>
            <param name="config"></param>
            <param name="results"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.IParser`1.ParseContent(SharpSheets.Utilities.FilePath,SharpSheets.Utilities.DirectoryPath,System.String,SharpSheets.Parsing.CompilationResult@)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="source"></param>
            <param name="config"></param>
            <param name="results"></param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ConfigurationParserUtils.Parse(SharpSheets.Parsing.IParser,SharpSheets.Utilities.FilePath,SharpSheets.Utilities.DirectoryPath,System.String)">
            <summary></summary>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ConfigurationParserUtils.ParseContent``1(SharpSheets.Parsing.IParser{``0},SharpSheets.Utilities.FilePath,SharpSheets.Utilities.DirectoryPath,System.String)">
            <summary></summary>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="P:SharpSheets.Parsing.SharpDocumentLine.Location">
            <summary>
            Location of the <see cref="P:SharpSheets.Parsing.SharpDocumentLine.Content"/> string in the document.
            </summary>
        </member>
        <member name="P:SharpSheets.Parsing.SharpDocumentLine.IndentLevel">
            <summary>
            Indent level of this line in the hierarchy.
            </summary>
        </member>
        <member name="P:SharpSheets.Parsing.SharpDocumentLine.Content">
            <summary>
            Primary string content of this line, excluding indent and any boilerplate punctuation.
            </summary>
        </member>
        <member name="P:SharpSheets.Parsing.SharpDocumentLine.Property">
            <summary>
            String property value for this line, if one if given. Only present if LineType == LineType.Property.
            </summary>
        </member>
        <member name="P:SharpSheets.Parsing.SharpDocumentLine.PropertyLocation">
            <summary>
            Location of the <see cref="P:SharpSheets.Parsing.SharpDocumentLine.Property"/> string in the document.
            </summary>
        </member>
        <member name="P:SharpSheets.Parsing.SharpDocumentLine.LineType">
            <summary>
            Enum denoting the presumed function of this line.
            </summary>
        </member>
        <member name="M:SharpSheets.Parsing.SharpFactory.GetConstructors(System.Type,System.Type[])">
            <summary></summary>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.SharpFactory.CreateParameter(System.String,System.Type,System.Boolean,System.Boolean,System.Object,SharpSheets.Parsing.IContext,SharpSheets.Utilities.DirectoryPath,SharpSheets.Widgets.WidgetFactory,SharpSheets.Shapes.ShapeFactory,SharpSheets.Exceptions.SharpParsingException[]@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
            <exception cref="T:SharpSheets.Exceptions.SharpFactoryException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.SharpFactory.GatherParameters(System.Reflection.ConstructorInfo,SharpSheets.Parsing.IContext,SharpSheets.Utilities.DirectoryPath,SharpSheets.Widgets.WidgetFactory,SharpSheets.Shapes.ShapeFactory,System.Object[],SharpSheets.Exceptions.SharpParsingException[]@)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:SharpSheets.Exceptions.SharpFactoryException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.SharpFactory.Construct(System.Reflection.ConstructorInfo,SharpSheets.Parsing.IContext,SharpSheets.Utilities.DirectoryPath,SharpSheets.Widgets.WidgetFactory,SharpSheets.Shapes.ShapeFactory,System.Object[],SharpSheets.Exceptions.SharpParsingException[]@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpParsingException"></exception>
            <exception cref="T:SharpSheets.Exceptions.SharpFactoryException"></exception>
        </member>
        <member name="T:SharpSheets.Parsing.ISharpArgsGrouping">
            <summary>
            Implementing this interface indicates that this object is to be interpreted as nested arguments by SharpFactory.
            </summary>
        </member>
        <member name="T:SharpSheets.Parsing.ISharpDictArg">
            <summary>
            Implementing this interface indicates that this object can be constructed as a dict expression by SharpFactory.
            </summary>
        </member>
        <member name="M:SharpSheets.Parsing.INumbered.Add(System.Int32,System.Object)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.Numbered`1.Add(System.Int32,`0)">
            <summary></summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:SharpSheets.Parsing.Numbered`1.Item(System.Int32)">
            <summary></summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.NumberedUtils.ConvertArrayObjectToNumbered(System.Array,System.Type)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.NumberedUtils.MakeNumbered(System.Type,System.Type@)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.StringParsing.Parse(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.StringParsing.Escape(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.StringParsing.GetUnicode(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.StringParsing.ParseRich(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.StringParsing.EscapeRich(SharpSheets.Canvas.Text.RichString)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:SharpSheets.Parsing.ValueParsing">
            <summary>
            A class containing methods for parsing <see cref="T:System.String"/> values into <see cref="T:System.Object"/> values,
            according to the SharpSheets style conventions.
            </summary>
        </member>
        <member name="M:SharpSheets.Parsing.ValueParsing.Parse(System.String,System.Type,SharpSheets.Utilities.DirectoryPath)">
            <summary>
            Parse a string into an <see cref="T:System.Object"/> of the appropriate type,
            using the SharpSheets syntax conventions. Arrays are divided first by
            unescaped commas, followed by unescaped semi-colons, and finally unescaped pipe characters ('|').
            </summary>
            <param name="value">The value string to be parsed (must not be <see langword="null"/>).</param>
            <param name="type">The <see cref="T:System.Type"/> of the object to be created.</param>
            <param name="source">The source directory for this value (used primarily for parsing path types).</param>
            <returns>An <see cref="T:System.Object"/> of a type corresponding to <paramref name="type"/>.</returns>
            <exception cref="T:System.FormatException">Thrown when <paramref name="value"/> cannot be parsed into the desired type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="type"/> is a path type, and <paramref name="value"/> is not an existing path.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when there is no corresponding parser for <paramref name="type"/>.</exception>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ValueParsing.Parse``1(System.String,SharpSheets.Utilities.DirectoryPath)">
            <summary>
            Parse a string into an object of type <typeparamref name="T"/>,
            using the SharpSheets syntax conventions. Arrays are divided first by
            unescaped commas, followed by unescaped semi-colons, and finally unescaped pipe characters ('|').
            </summary>
            <typeparam name="T">The type into which the <paramref name="value"/> text should be parsed.</typeparam>
            <param name="value">The value string to be parsed.</param>
            <param name="source">The source directory for this value (used primarily for parsing path types).</param>
            <returns>An object of a type corresponding to <typeparamref name="T"/>.</returns>
            <exception cref="T:System.FormatException">Thrown when <paramref name="value"/> cannot be parsed into the desired type.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <typeparamref name="T"/> is a path type, and <paramref name="value"/> is not an existing path.</exception>
            <exception cref="T:System.NotImplementedException">Thrown when there is no corresponding parser for type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.SystemException">Thrown when a system error has occured trying to construct an object.</exception>
        </member>
        <member name="M:SharpSheets.Parsing.ValueParsing.ToString(System.Object)">
            <summary>
            Convert an object into an <see cref="T:System.String"/> with the appropriare formatting,
            using the SharpSheets syntax conventions. Arrays are divided first by
            unescaped commas, followed by unescaped semi-colons.
            </summary>
            <param name="value">The object to be converted.</param>
            <returns>
            An <see cref="T:System.String"/> representation of <paramref name="value"/>,
            according to the SharpSheets syntax conventions.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is an array with rank greater than 2.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when there is no corresponding serialization for <paramref name="value"/>.</exception>
            <exception cref="T:System.FormatException">Thrown when <paramref name="value"/> is a badly formatted <see cref="T:System.String"/> or <see cref="T:SharpSheets.Canvas.Text.RichString"/>.</exception>
        </member>
        <member name="M:SharpSheets.Parsing.ValueParsing.ParseValueDict(System.String,System.Reflection.ConstructorInfo,SharpSheets.Utilities.DirectoryPath)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ValueParsing.ParseArrayOrTupleValue(System.String,System.Type,System.Int32,SharpSheets.Utilities.DirectoryPath)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Parsing.ValueParsing.ArrayToString(System.Object,System.Int32@)">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.PDFs.FieldTools.ExtractFields(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="T:SharpSheets.Shapes.SimpleBar">
            <summary>
            A simple bar using a rectangular outline. The relative sizes of the label and entry areas
            can be controlled, the entry area can be emphasised, and the bar can be flipped horizontally.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.SimpleBar.#ctor(System.Single,System.Boolean,System.Nullable{SharpSheets.Utilities.UnitInterval},SharpSheets.Utilities.UFloat,System.Boolean)">
            <summary>
            Constructor for SimpleBar.
            </summary>
            <param name="aspect">The aspect ratio for this bar.</param>
            <param name="flip">Flag to indicate that the bar should be flipped horizontally.
            By default, the label will be drawn on the right.</param>
            <param name="entryFraction">Fraction of the bar width which should be given to the
            entry.</param>
            <param name="emphasis">The amount by which the entry outline should extend beyond the
            label area outline, above and below. Depending on the <paramref name="includeEmphasis"/>
            flag, this may or may not be included in height calculations for the bar.</param>
            <param name="includeEmphasis">Flag to indicate that the emphasis should be included
            in calculations of the bar height.</param>
        </member>
        <member name="T:SharpSheets.Shapes.EllipseBar">
            <summary>
            A simple bar using a rectangular outline for the label area and an elliptical outline for the
            entry area. The relative sizes of the label and entry areas can be controlled, the entry area
            can be emphasised, and the bar can be flipped horizontally.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.EllipseBar.#ctor(System.Single,System.Boolean,System.Nullable{SharpSheets.Utilities.UnitInterval},SharpSheets.Utilities.UFloat,System.Boolean)">
            <summary>
            Constructor for EllipseBar.
            </summary>
            <param name="aspect">The aspect ratio for this bar.</param>
            <param name="flip">Flag to indicate that the bar should be flipped horizontally.
            By default, the label will be drawn on the right.</param>
            <param name="entryFraction">Fraction of the bar width which should be given to the
            entry.</param>
            <param name="emphasis">The amount by which the entry outline should extend beyond the
            label area outline, above and below. Depending on the <paramref name="includeEmphasis"/>
            flag, this may or may not be included in height calculations for the bar.</param>
            <param name="includeEmphasis">Flag to indicate that the emphasis should be included
            in calculations of the bar height.</param>
        </member>
        <member name="T:SharpSheets.Shapes.BoxBar">
            <summary>
            A bar using two box styles for the label and entry areas. The relative sizes of the label
            and entry areas can be controlled, the entry area can be emphasised, and the bar can be
            flipped horizontally.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.BoxBar.#ctor(System.Single,SharpSheets.Shapes.IBox,SharpSheets.Shapes.IBox,System.Nullable{System.Single},System.Single,System.Boolean,System.Boolean)">
            <summary>
            Constructor for BarBox.
            </summary>
            <param name="aspect">The aspect ratio for this bar.</param>
            <param name="barBox">Box style to use for the label area outline. This outline will
            extend past the edge of the entry area, with the intention that it appears to protrude
            from the entry outline.</param>
            <param name="entryBox">Box style to use for the entry are outline.</param>
            <param name="entryfraction">Fraction of the bar width which should be given to the
            entry.</param>
            <param name="emphasis">The amount by which the entry outline should extend beyond the
            label area outline, above and below. Depending on the <paramref name="includeEmphasis"/>
            flag, this may or may not be included in height calculations for the bar.</param>
            <param name="includeEmphasis">Flag to indicate that the emphasis should be included
            in calculations of the bar height.</param>
            <param name="flip">Flag to indicate that the bar should be flipped horizontally.
            By default, the label will be drawn on the right.</param>
        </member>
        <member name="M:SharpSheets.Shapes.LabelDetails.#ctor(System.Single,System.Nullable{System.ValueTuple{System.Single,System.Single}},SharpSheets.Canvas.Text.TextFormat,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,System.Nullable{SharpSheets.Colors.Color})">
            <summary>
            Constructor for LabelDetails.
            </summary>
            <param name="fontSize">The fontsize for this text label.</param>
            <param name="offset" default="0,1" example="0.0,3.0">The offset for this text label,
            relative to its initial position based on <paramref name="justification"/> and
            <paramref name="alignment"/>.</param>
            <param name="format">Font format to use for the text label. This will use the appropriate
            font format from the current font selection.</param>
            <param name="justification">Horizontal justification for the text label, indicating if
            the text should be left, right, or centre justified.</param>
            <param name="alignment">Vertical alignment for the text label, indicating if the text
            should be top, bottom, or centre aligned.</param>
            <param name="color">Text color for this text label.</param>
        </member>
        <member name="T:SharpSheets.Shapes.NoOutline">
            <summary>
            A box that draws no outline, but can optionally utilise a margin around the
            edge when calculating the remaining area.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.NoOutline.#ctor(System.Single,SharpSheets.Layouts.Margins)">
            <summary>
            Constructor for NoOutline.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="trim">A margin around the inside of the shape area to trim
            when calculating the remaining area.</param>
        </member>
        <member name="T:SharpSheets.Shapes.UnderlineBox">
            <summary>
            A box that simply draws a single line along the bottom edge, the color of which
            may be specified. The line may also be offset from the edge of the shape area.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.UnderlineBox.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Single)">
            <summary>
            Constructor for UnderlineBox.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the line.</param>
            <param name="offset">A value by which to offset the start and end points
            of the line from the sides of the shape area.</param>
        </member>
        <member name="T:SharpSheets.Shapes.ShadowedBox">
            <summary>
            A simple rectangular box with a "shadow" towards the bottom right.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.ShadowedBox.#ctor(System.Single,System.Single)">
            <summary>
            Constructor for ShadowedBox.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="shadow">The length of the shadow, in points.</param>
        </member>
        <member name="T:SharpSheets.Shapes.ShadowedCircle">
            <summary>
            A simple circular box with a "shadow" towards the bottom right.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.ShadowedCircle.#ctor(System.Single,System.Single)">
            <summary>
            Constructor for ShadowedCircle.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="shadow">The length of the shadow, in points.</param>
        </member>
        <member name="T:SharpSheets.Shapes.SimpleBackground">
            <summary>
            A simple background box, consisting of a bevelled area filled with the
            current midtone color, and a trim detail in the durrent background box
            following the shape outline.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.SimpleBackground.#ctor(System.Single,System.Single)">
            <summary>
            Constructor for SimpleBackground.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="bevel">The size of the margin for the remaining area,
            which also dictates the size of the outline bevels.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Blank">
            <summary>
            A detail that draws nothing to the page. A useful default.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Blank.#ctor">
            <summary>
            Constructor for Blank.
            </summary>
        </member>
        <member name="T:SharpSheets.Shapes.LineDetail">
            <summary>
            A detail that draws a centred line in the detail area, oriented appropriately
            to the detail layout. The width and color of the line can be controlled separately,
            and may be offset from the ends of the detail area.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.LineDetail.#ctor(System.Single,System.Nullable{System.Single},System.Nullable{SharpSheets.Colors.Color})">
            <summary>
            Constructor for LineDetail.
            </summary>
            <param name="offset">An offset for the start and end of the line from the ends
            of the detail area.</param>
            <param name="width">The linewidth for the detail line. If no value is provided,
            the current linewidth will be used.</param>
            <param name="color">A color for the detail line. If no value is provided, the
            current foreground color will be used.</param>
        </member>
        <member name="T:SharpSheets.Shapes.FilledDetail">
            <summary>
            A detail that fills the detail area with a block color.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.FilledDetail.#ctor(System.Nullable{SharpSheets.Colors.Color})">
            <summary>
            Constructor for FilledDetail.
            </summary>
            <param name="color">The color to fill the detail area with. If no
            value is provided, the current midtone color will be used.</param>
        </member>
        <member name="T:SharpSheets.Shapes.SimpleLabelledBox">
            <summary>
            A simple labelled box that uses connected rectangular outlines for the remaining
            and label areas. The size and placement of the label area around the outside of
            the shape can be specified, along with margins for each of the areas separately.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.SimpleLabelledBox.#ctor(System.Single,SharpSheets.Shapes.Direction,System.Single,SharpSheets.Layouts.Margins,SharpSheets.Layouts.Margins)">
            <summary>
            Constructor for SimpleLabelledBox.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="placement">The placement of the label area around the shape area,
            as a cardinal direction.</param>
            <param name="labelSize">The size of the label area, measured from the edge of the
            shape area, in points.</param>
            <param name="labelTrim">Padding for the inside of the label area.</param>
            <param name="boxTrim">Padding for the inside of the remaining area.</param>
        </member>
        <member name="T:SharpSheets.Shapes.StatBoxSimple">
            <summary>
            A simple statistic box style. A larger rectangular area with a small oval
            at the base, with some detailing.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.StatBoxSimple.#ctor(System.Single,System.Single)">
            <summary>
            Constructor for StatBoxSimple.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="bevel">A scaling for the details of the outline. This
            also affects the size of the remaining and label areas.</param>
            <size>50 65</size>
        </member>
        <member name="T:SharpSheets.Shapes.EaredShield">
            <summary>
            A heraldic shield style outline, with a pointed top and cutaway corners.
            An inner outline may also be drawn, and the fill and stroke colors specified.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.EaredShield.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single,System.Nullable{SharpSheets.Utilities.UFloat})">
            <summary>
            Constructor for EaredShield.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="bevel">If a value is provided, a secondary outline with half the
            stroke width will be drawn inside the shape outline, inset by the provided
            value.</param>
        </member>
        <member name="T:SharpSheets.Shapes.BadgeShield">
            <summary>
            A heraldic shield style outline, with a rounder profile and cutaway corners.
            An inner outline may also be drawn, and the fill and stroke colors specified.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.BadgeShield.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single,System.Nullable{System.Single})">
            <summary>
            Constructor for BadgeShield.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="bevel">If a value is provided, a secondary outline with half the
            stroke width will be drawn inside the shape outline, inset by the provided
            value.</param>
        </member>
        <member name="T:SharpSheets.Shapes.EngrailedShield">
            <summary>
            A heraldic shield style outline, with a pointed bottom, and two cutaway
            curves along the top edge. An inner outline may also be drawn, and the
            fill and stroke colors specified.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.EngrailedShield.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single,System.Nullable{System.Single})">
            <summary>
            Constructor for EngrailedShield.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="bevel">If a value is provided, a secondary outline with half the
            stroke width will be drawn inside the shape outline, inset by the provided
            value.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Heart">
            <summary>
            A simple geometric heart outline, with two semi-circular curves at the top,
            and a right-angled corner at the bottom.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Heart.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single)">
            <summary>
            Constructor for Heart.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Eye">
            <summary>
            An eye-shaped outline, with rounded corners at the sides.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Eye.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single)">
            <summary>
            Constructor for Eye.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Scroll">
            <summary>
            Scroll outline, with folds and curls at both sides. The resulting shape
            is slightly randomized, to avoid uniformity on the page.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Scroll.#ctor(System.Single,System.Single)">
            <summary>
            Constructor for Scroll.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="bevel">A sizing parameter for the details of this outline.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Pennant">
            <summary>
            Pennant outline, with folds and triangular cutouts at both sides.
            The resulting shape is slightly randomized, to avoid uniformity
            on the page.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Pennant.#ctor(System.Single,System.Single)">
            <summary>
            Constructor for Pennant.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="bevel">A sizing parameter for the details of this outline.</param>
            <size>100 20</size>
        </member>
        <member name="M:SharpSheets.Shapes.ShapeFactory.MakeShape(System.Type,SharpSheets.Parsing.IContext,System.String,System.Type,SharpSheets.Utilities.DirectoryPath,SharpSheets.Exceptions.SharpParsingException[]@)">
            <summary></summary>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="defaultStyle"/> is not a valid shape of the requested type <paramref name="shapeType"/>.</exception>
        </member>
        <member name="M:SharpSheets.Shapes.ShapeFactory.GetCustomStylePattern``1(System.String)">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="styleName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:SharpSheets.Shapes.IShape.Draw(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle)">
            <summary>
            
            </summary>
            <param name="canvas"></param>
            <param name="rect"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Shapes.IEntriedArea.EntryRect(SharpSheets.Canvas.ISharpGraphicsState,System.Int32,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <param name="graphicsState"></param>
            <param name="areaIndex"></param>
            <param name="rect"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:SharpSheets.Shapes.AbstractShapeUtils.Draw``1(``0,SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle@)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Shapes.AbstractShapeUtils.Draw``1(``0,SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle@)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Shapes.AbstractShapeUtils.Draw(SharpSheets.Shapes.IUsageBar,SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle@,SharpSheets.Layouts.Rectangle@)">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Shapes.AbstractAreaShape.DrawFrame(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle)">
            <summary>
            
            </summary>
            <param name="canvas"></param>
            <param name="aspectRect"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Shapes.AbstractAreaShape.ValidateRects(SharpSheets.Layouts.Rectangle[],System.String)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="T:SharpSheets.Shapes.Simple">
            <summary>
            A simple rectangular box. The fill and stroke colors may be specified, an internal padding
            specified for the remaining area, and the outline may be drawn using a dashed line.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Simple.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single,SharpSheets.Layouts.Margins)">
            <summary>
            Constructor for Simple.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="trim">Padding to apply to the remaining area.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Bevelled">
            <summary>
            A simple bevelled rectangular box. The fill and stroke colors may be specified, an internal
            padding specified for the remaining area, and the outline may be drawn using a dashed line.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Bevelled.#ctor(System.Single,System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single,System.Nullable{SharpSheets.Layouts.Margins})">
            <summary>
            Constructor for Bevelled.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="bevel">The bevel size for the rectangle. If the bevel is larger
            than min(width, height)/2, then the smaller value will be used.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="trim">Padding to apply to the remaining area. If no value is provided,
            a padding of 0.35 times the <paramref name="bevel"/> will be used.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Rounded">
            <summary>
            A simple rounded rectangular box. The fill and stroke colors may be specified, an internal
            padding specified for the remaining area, and the outline may be drawn using a dashed line.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Rounded.#ctor(System.Single,System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single,System.Nullable{SharpSheets.Layouts.Margins})">
            <summary>
            Constructor for Rounded.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="radius">The corner radius for the rectangle. If the radius is larger
            than min(width, height)/2, then the smaller value will be used.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="trim">Padding to apply to the remaining area. If no value is provided,
            a padding of 0.5 times the <paramref name="radius"/> will be used.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Tablet">
            <summary>
            A simple tablet-shaped box, where the sortest sides are semi-circles, connected by straight
            lines to form the longer sides. The fill and stroke colors may be specified, an internal
            padding specified for the remaining area, and the outline may be drawn using a dashed line.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Tablet.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single,SharpSheets.Layouts.Margins)">
            <summary>
            Constructor for Tablet.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="trim">Padding to apply to the remaining area.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Ellipse">
            <summary>
            A simple ellipse-shaped box. The fill and stroke colors may be specified, an internal
            padding specified for the remaining area, and the outline may be drawn using a dashed
            line.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Ellipse.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single,SharpSheets.Layouts.Margins)">
            <summary>
            Constructor for Ellipse.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="trim">Padding to apply to the remaining area.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Circle">
            <summary>
            A simple circle-shaped box. Any aspect provided will be applied to the initial shape
            area, and then a circle will be drawn inside that area. The fill and stroke colors may
            be specified, along with an internal padding specified for the remaining area, and the
            outline may be drawn using a dashed line.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Circle.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single,SharpSheets.Layouts.Margins)">
            <summary>
            Constructor for Circle.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="trim">Padding to apply to the remaining area.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Diamond">
            <summary>
            A simple diamond-shaped box, where the midpoint of each side is connected by straight lines
            to the two adjoining side midpoints. The fill and stroke colors may be specified, an internal
            padding specified for the remaining area, and the outline may be drawn using a dashed line.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Diamond.#ctor(System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Single[],System.Single,SharpSheets.Layouts.Margins)">
            <summary>
            Constructor for Diamond.
            </summary>
            <param name="aspect">Aspect ratio for this box.</param>
            <param name="stroke">The stroke color for the outline. If no value is provided,
            the current foreground color will be used.</param>
            <param name="fill">The fill color for the shape. If no value is provided, the
            current background color will be used.</param>
            <param name="dashes">An array of dash lengths with which to draw the outline.
            The resulting line will be a series of "on" and "off" lengths, corresponding
            to the dash array. These lengths are measured in points.</param>
            <param name="dashOffset">An offset for the start of the dash pattern. This
            will shift the dash pattern along by a number of points equal to the value.</param>
            <param name="trim">Padding to apply to the remaining area.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Direction">
            <summary>
            Indicates a cardinal direction.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.Direction.NORTH">
            <summary>
            Indicates that the content should be positioned at the top, or oriented upwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.Direction.EAST">
            <summary>
            Indicates that the content should be positioned on the right, or oriented rightwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.Direction.SOUTH">
            <summary>
            Indicates that the content should be positioned at the bottom, or oriented downwards.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.Direction.WEST">
            <summary>
            Indicates that the content should be positioned on the left, or oriented leftwards.
            </summary>
        </member>
        <member name="T:SharpSheets.Shapes.BlockTitledBox">
            <summary>
            This box draws a rectangle around the shape area, with a larger block along one edge
            in which to draw the title text. By default, the outline will be drawn using the
            current foreground color, and filled with the current background color (which will
            also be used for the title text color). All of these may be altered, and the title
            positioning, fontsize, and arrangement can be controlled.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.BlockTitledBox.#ctor(System.Single,System.String,System.Single,SharpSheets.Canvas.Text.TextFormat,SharpSheets.Shapes.TitlePosition,SharpSheets.Layouts.Layout,System.Nullable{System.Single},System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Layouts.Margins},System.ValueTuple{System.Single,System.Single},SharpSheets.Layouts.Margins,SharpSheets.Canvas.Text.Justification,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy,SharpSheets.Shapes.Direction)">
            <summary>
            Constructor for BlockTitledBox.
            </summary>
            <param name="aspect">Aspect ratio.</param>
            <param name="name">Title text.</param>
            <param name="fontSize">Font size at which to draw the title text.</param>
            <param name="format">Font format to use for the title text. This will use
            the appropriate font format from the current font selection.</param>
            <param name="position">The positioning for the title text around the edge of
            the box area. This will be used in conjuction with <paramref name="layout"/>
            to determine the placement of the title block.</param>
            <param name="layout"> The layout for the title block. If ROWS, the block will
            be a horizontal block, otherwise vertical for COLUMNS. This is only relevant
            if the title is placed in one of the corners of the available area, otherwise
            the block placement is determined solely by <paramref name="position"/>, i.e.
            ignored if "position" is one of TOP, BOTTOM, LEFT, or RIGHT.</param>
            <param name="headerSize">A fixed size for the title block. If the block is
            horizontal, this will be a height, otherwise a width for vertical blocks.
            If no value is provided, the block size is calculated based on the size of the
            title text.</param>
            <param name="stroke">The color to use for the shape outline and title block.
            If no value is given, the current foreground color will be used.</param>
            <param name="fill">The color with which to fill the inside of the outline.
            If no value is given, the current background color will be used.</param>
            <param name="text">The color for the title text. If no value is given, the
            value for <paramref name="fill"/> will be used. If no value is given for
            <paramref name="fill"/>, the current background color will be used.</param>
            <param name="padding" default="2,2,2,2">Padding around the title text within
            the title block. This is used when automatically calculating the title block
            size.</param>
            <param name="offset">An offset for the title from its position indicated by
            the other parameters. The title block will also be repositioned such that the
            title text is still within the block.</param>
            <param name="trim">A margin around the inside of the box for calculating the
            remaining area.</param>
            <param name="justification">The justification of the title text. This
            justification is used only for titles with multiple lines of text, and adjusts
            the horizontal position of each line within the maximum width of any line.
            It does not move the title position around the shape area.</param>
            <param name="lineSpacing">The line spacing to use for multi-line title texts.</param>
            <param name="heightStrategy">The height strategy to use when calculating the
            size of title texts for position and auto-calculation purposes.</param>
            <param name="orientation">The orientation of the title text. This does not
            change the position of the title text, only its arrangement at that position.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Untitled">
            <summary>
            This style will draw no title around the box, and will not affect the remaining
            area of the shape.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Untitled.#ctor(SharpSheets.Shapes.IContainerShape,System.String)">
            <summary>
            Constructor for Untitled.
            </summary>
            <param name="box">Base shape.</param>
            <param name="name">Title text.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Named">
            <summary>
            This style will draw the title text inside the shape outline, adjusting the remaining
            area appropriately. The position of the title text can be set and adjusted, along with the
            title text, font format, and size. The position of the title text is specified relative
            to the whole shape area, not the remaining area, and as such the offset may need to be
            adjusted for individual outline styles.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Named.#ctor(SharpSheets.Shapes.IContainerShape,System.String,SharpSheets.Shapes.TitlePosition,SharpSheets.Layouts.Layout,SharpSheets.Shapes.Direction,SharpSheets.Canvas.Text.TextFormat,System.Single,System.Nullable{SharpSheets.Utilities.Vector},System.Single,SharpSheets.Canvas.Text.Justification,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>
            Constructor for Named.
            </summary>
            <param name="box">Base shape.</param>
            <param name="name">Title text.</param>
            <param name="position">The position of the title text around the inside of the shape
            area. This will control the starting location of the text, which may then be adjusted
            using <paramref name="offset"/>.</param>
            <param name="layout">The layout of the remaining area relative to the title text.
            The title text will be considered to be taking up either a row or a column inside the shape
            area, and the remaining area will take up the remaining row or column, as appropriate.
            This is ignored when a non-corner value is provided (e.g. <see cref="F:SharpSheets.Shapes.TitlePosition.TOPLEFT"/>),
            where the arrangement of the remaining area is controlled solely by the <paramref name="position"/>.
            </param>
            <param name="orientation">Orientation for the title text, which will control the "up" direction
            when the text is drawn. Note that any adjustment from <paramref name="justification"/> will be
            relative to the internal text direction, not the direction relative to the page.</param>
            <param name="format">Font format to use for the title text. This will use the appropriate font
            format from the current font selection.</param>
            <param name="fontSize">The fontsize to use for the title text.</param>
            <param name="offset" default="(0,3)">The offset for the title text, relative to its initial
            layout based on <paramref name="position"/>. This can be used to move the title away from
            the shape outline, and for making design adjustments. This offset is directed "away" from the
            edge, meaning that for top-aligned titles, positive offsets will move the title downwards,
            whereas bottom-aligned titles will be offset upwards - and vice versa for left and right.</param>
            <param name="spacing">The spacing between the title text and the remaining area, if the remaining
            area requires adjustment after the title has been drawn.</param>
            <param name="justification">The justification for the title text, relative to the widest line
            of the title text. Note this this will not move the position of the title relative to the outline,
            but only within the bounding box created by the text height and maximum line width.</param>
            <param name="lineSpacing">The line spacing to use when drawing multi-line titles. This is
            expressed as a multiple of <paramref name="fontSize"/>.</param>
            <param name="heightStrategy">The height strategy to use when determining title text height.</param>
        </member>
        <member name="T:SharpSheets.Shapes.Titled">
            <summary>
            This style will draw the title text outside the shape outline, adjusting the available
            outline area within the full shape area appropriately. The position of the title text
            can be set and adjusted, along with the title text, font format, and size. The position of
            the title text is specified relative to the full shape area, and as such the offset may
            need a zero value on at least one axis in order for the title to be drawn at the edge
            of the shape area.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.Titled.#ctor(SharpSheets.Shapes.IContainerShape,System.String,SharpSheets.Shapes.TitlePosition,SharpSheets.Layouts.Layout,SharpSheets.Shapes.Direction,SharpSheets.Canvas.Text.TextFormat,System.Single,System.Nullable{SharpSheets.Utilities.Vector},System.Single,SharpSheets.Canvas.Text.Justification,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>
            Constructor for Titled.
            </summary>
            <param name="box">Base shape.</param>
            <param name="name">Title text.</param>
            <param name="position">The position of the title text around the outside of the shape
            area. This will control the starting location of the text, which may then be adjusted
            using <paramref name="offset"/>.</param>
            <param name="layout">The layout of the shape area relative to the title text. The title text
            will be considered to be taking up either a row or a column inside the full shape area, and
            the outline shape area will take up the remaining row or column, as appropriate.
            This is ignored when a non-corner value is provided (e.g. <see cref="F:SharpSheets.Shapes.TitlePosition.TOPLEFT"/>),
            where the arrangement of the outline shape area is controlled solely by the <paramref name="position"/>.
            </param>
            <param name="orientation">Orientation for the title text, which will control the "up" direction
            when the text is drawn. Note that any adjustment from <paramref name="justification"/> will be
            relative to the internal text direction, not the direction relative to the page.</param>
            <param name="format">Font format to use for the title text. This will use the appropriate font
            format from the current font selection.</param>
            <param name="fontSize">The fontsize to use for the title text.</param>
            <param name="offset" default="(0,0)">The offset for the title text, relative to its initial
            layout based on <paramref name="position"/>. This can be used to move the title away from
            the full area edge, and for making design adjustments. This offset is directed "away" from the
            edge, meaning that for top-aligned titles, positive offsets will move the title downwards,
            whereas bottom-aligned titles will be offset upwards - and vice versa for left and right.</param>
            <param name="spacing">The spacing between the title text and the outline shape area.</param>
            <param name="justification">The justification for the title text, relative to the widest line
            of the title text. Note this this will not move the position of the title relative to the outline,
            but only within the bounding box created by the text height and maximum line width.</param>
            <param name="lineSpacing">The line spacing to use when drawing multi-line titles. This is
            expressed as a multiple of <paramref name="fontSize"/>.</param>
            <param name="heightStrategy">The height strategy to use when determining title text height.</param>
        </member>
        <member name="T:SharpSheets.Shapes.BoxedTitle">
            <summary>
            This style will draw the title text outside the shape outline, inside its own shape
            outline. The available outline area (i.e. that used for the actual outline style being
            drawn for the main shape) within the full shape area will be adjusted appropriately.
            The position of the title box can set and adjusted, along with the title text font format
            and size, and positioning within the title box. The position of the title box is specified
            relative to the full shape area, and as such the offset may need a zero value on at least
            one axis in order for the title to be drawn at the edge of the shape area.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.BoxedTitle.#ctor(SharpSheets.Shapes.IContainerShape,System.String,SharpSheets.Shapes.IBox,SharpSheets.Layouts.Margins,SharpSheets.Shapes.TitlePosition,SharpSheets.Layouts.Layout,SharpSheets.Shapes.Direction,SharpSheets.Canvas.Text.TextFormat,System.Single,SharpSheets.Utilities.Vector,System.Single,SharpSheets.Canvas.Text.Justification,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>
            Constryctor for BoxedTitle.
            </summary>
            <param name="box">Base shape.</param>
            <param name="name">Title text.</param>
            <param name="box_">The box style to draw around the title text. This style must support
            inferring the full area from a content area.</param>
            <param name="trim">Spacing to use around the title text inside the title box.</param>
            <param name="position">The position of the title box around the outside of the shape
            area. This will control the starting location of the title box, which may then be adjusted
            using <paramref name="offset"/>.</param>
            <param name="layout">The layout of the outline area relative to the title box. The title box
            will be considered to be taking up either a row or a column inside the full shape area, and
            the outline shape area will take up the remaining row or column, as appropriate.
            This is ignored when a non-corner value is provided (e.g. <see cref="F:SharpSheets.Shapes.TitlePosition.TOPLEFT"/>),
            where the arrangement of the outline shape area is controlled solely by the <paramref name="position"/>.
            </param>
            <param name="orientation">Orientation for the title text, which will control the "up" direction
            when the text is drawn. Note that any adjustment from <paramref name="justification"/> will be
            relative to the internal text direction, not the direction relative to the page.</param>
            <param name="format">Font format to use for the title text. This will use the appropriate font
            format from the current font selection.</param>
            <param name="fontSize">The fontsize to use for the title text.</param>
            <param name="offset">The offset for the title box, relative to its initial
            layout based on <paramref name="position"/>. This can be used to move the title box away from
            the full area edge, and for making design adjustments. This offset is directed "away" from the
            edge, meaning that for top-aligned titles, positive offsets will move the title downwards,
            whereas bottom-aligned titles will be offset upwards - and vice versa for left and right.</param>
            <param name="spacing">The spacing between the title box and the outline shape area.</param>
            <param name="justification">The justification for the title text, relative to the widest line
            of the title text. Note this this will not move the position of the title text or box relative to
            the outline, but only within the bounding box created by the text height and maximum line width.
            </param>
            <param name="lineSpacing">The line spacing to use when drawing multi-line titles. This is
            expressed as a multiple of <paramref name="fontSize"/>.</param>
            <param name="heightStrategy">The height strategy to use when determining title text height.</param>
        </member>
        <member name="T:SharpSheets.Shapes.TabTitle">
            <summary>
            This style will draw the title text outside of the shape outline, inside its own tab
            outline that is drawn connected to the main outline. The tab shape will be draw "behind"
            the main outline, and continued such that the tab appears to "protrude" from behind the
            main shape. The main outline area can either be left as is, or repositioned to allow for
            the size of the tab. The tab position is specified as a cardinal direction relative to
            the main shape area. The position of the tab can be adjusted, and the layout of the title
            text inside the tab specified. 
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.TabTitle.#ctor(SharpSheets.Shapes.IContainerShape,System.String,SharpSheets.Shapes.IBox,SharpSheets.Layouts.Margins,SharpSheets.Shapes.Direction,System.Nullable{SharpSheets.Layouts.Dimension},System.Nullable{SharpSheets.Layouts.Dimension},System.Boolean,SharpSheets.Shapes.Direction,SharpSheets.Canvas.Text.TextFormat,System.Single,SharpSheets.Utilities.Vector,System.Single,SharpSheets.Canvas.Text.Justification,System.Single,SharpSheets.Canvas.Text.TextHeightStrategy)">
            <summary>
            Constructor for TabTitle.
            </summary>
            <param name="box" example="Simple">Base shape.</param>
            <param name="name">Title text.</param>
            <param name="tabBox" example="Simple">The box style to draw around the title tab.
            This style must support inferring the full area from a content area.</param>
            <param name="trim" example="2">Spacing to use around the title text inside the title
            tab box.</param>
            <param name="position">The position of the title tab box around the outside of the shape
            area. This will control the starting location of the title box, which may then be adjusted
            using <paramref name="offset"/>.</param>
            <param name="protrusion">A specific length for the tab protrusion. If no value is provided,
            the protrusion is calculated from the title text size and other parameters. Percentage values
            are calculated based on the total area (width or height, according to the value of
            <paramref name="position"/>), and relative values are considered to be fractions of the total
            area (and hence should be between 0 and 1). Note that percentage or relative values do not
            allow for inferring the full shape size.</param>
            <param name="tabBreadth">A specific length for the tab breadth, i.e. it's size perpendicular
            to the protrusion. If no value is provided, the breadth is calculated from the title text size
            and other parameters. Percentage values are calculated based on the total area (width or height,
            according to the value of <paramref name="position"/>), and relative values are considered to
            be fractions of the total area (and hence should be between 0 and 1). Note that percentage or
            relative values do not allow for inferring the full shape size.</param>
            <param name="includeProtrusion" example="true">Flag to indicate if the tab protrusion should
            be included in the width of the shape. If true, the outline area will be shortened to allow
            the protrusion to be contained in the full area. If false, the outline area will take up the
            full area, and the title tab will protrude outside the shape area.</param>
            <param name="orientation">Orientation for the title text, which will control the "up" direction
            when the text is drawn. Note that any adjustment from <paramref name="justification"/> will be
            relative to the internal text direction, not the direction relative to the page.</param>
            <param name="format">Font format to use for the title text. This will use the appropriate font
            format from the current font selection.</param>
            <param name="fontSize">The fontsize to use for the title text.</param>
            <param name="offset">The offset for the title tab, relative to its initial layout based on
            <paramref name="position"/>. This can be used to fine-tune the position of the title relative to
            the main outline. This offset is directed "away" from the edge of the full area, meaning that for
            <see cref="F:SharpSheets.Shapes.Direction.WEST"/> the offset will increase rightwards, and for <see cref="F:SharpSheets.Shapes.Direction.EAST"/>
            it will increase leftwards (and vica versa for vertical arrangements).</param>
            <param name="spacing">The spacing between the title text and the main outline inside the tab
            area.</param>
            <param name="justification">The justfication for the title text inside the tab label area. Note
            that this justification includes the entire tab area, and is not just relative to the widest
            title line. This means that if <paramref name="protrusion"/> or <paramref name="tabBreadth"/>
            have been set, the justification may reposition the title within the tab area.</param>
            <param name="lineSpacing">The line spacing to use when drawing multi-line titles. This is
            expressed as a multiple of <paramref name="fontSize"/>.</param>
            <param name="heightStrategy">The height strategy to use when determining title text height.</param>
            <canvas>120 60</canvas>
        </member>
        <member name="T:SharpSheets.Shapes.TitlePosition">
            <summary>
            Indicates the position of a title around the outside of a rectangular area.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.TitlePosition.TOP">
            <summary>
            Indicates that the title should be placed at the top of the area,
            horizontally centred.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.TitlePosition.TOPRIGHT">
            <summary>
            Indicates that the title should be placed at the top of the area,
            on the right-hand side.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.TitlePosition.RIGHT">
            <summary>
            Indicates that the title should be placed to the right of the area,
            vertically centred.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.TitlePosition.BOTTOMRIGHT">
            <summary>
            Indicates that the title should be placed at the bottom of the area,
            on the right-hand side.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.TitlePosition.BOTTOM">
            <summary>
            Indicates that the title should be placed at the bottom of the area,
            horizontally centred.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.TitlePosition.BOTTOMLEFT">
            <summary>
            Indicates that the title should be placed at the bottom of the area,
            on the left-hand side.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.TitlePosition.LEFT">
            <summary>
            Indicates that the title should be placed to the left of the area,
            vertically centred.
            </summary>
        </member>
        <member name="F:SharpSheets.Shapes.TitlePosition.TOPLEFT">
            <summary>
            Indicates that the title should be placed at the top of the area,
            on the left-hand side.
            </summary>
        </member>
        <member name="T:SharpSheets.Shapes.SimpleUsageBar">
            <summary>
            A simple usage bar style, using connected rectangular outlines for the
            entry and label areas. The entry areas can be emphasised, and the bar can
            be flipped horizontally. The width of the entry areas is determined by the
            height of the bar and the emphasis, if any.
            </summary>
        </member>
        <member name="M:SharpSheets.Shapes.SimpleUsageBar.#ctor(System.Single,System.Boolean,SharpSheets.Utilities.UFloat,System.Boolean)">
            <summary>
            Constructor for SimpleUsageBar.
            </summary>
            <param name="aspect">Aspect ratio for this bar.</param>
            <param name="flip">Flag to indicate that the bar should be flipped horizontally.
            By default, the label will be drawn on the right.</param>
            <param name="emphasis">The amount by which the entry outlines should extend beyond the
            label area outline, above and below. Depending on the <paramref name="includeEmphasis"/>
            flag, this may or may not be included in height calculations for the bar.</param>
            <param name="includeEmphasis">Flag to indicate that the emphasis should be included
            in calculations of the bar height.</param>
            <exception cref="T:SharpSheets.Exceptions.SharpInitializationException"></exception>
        </member>
        <member name="M:SharpSheets.Sheets.SheetConfigurationParser.ParseConfiguration(SharpSheets.Utilities.DirectoryPath,System.String)">
            <summary></summary>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.ArrayUtils.ToArray(System.Collections.IEnumerable,System.Type)">
            <summary></summary>
            <exception cref="T:System.NotSupportedException">Thrown when an array of the provided <paramref name="elementType"/> cannot be instantiated.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when any entries in <paramref name="collection"/> cannot be cast to <paramref name="elementType"/>.</exception>
        </member>
        <member name="M:SharpSheets.Utilities.ArrayUtils.To2DArray``1(``0[][])">
            <summary></summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.ColorUtils.Parse(System.String,System.IFormatProvider)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.DelimitedUtils.SplitDelimitedString(System.String,System.Char,System.Boolean)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.DictionaryUtils.TryKeys``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary></summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.EnumerableUtils.Yield``1(``0)">
            <summary>
            Wraps this object instance into an IEnumerable&lt;T&gt;
            consisting of a single item.
            </summary>
            <typeparam name="T"> Type of the object. </typeparam>
            <param name="item"> The instance that will be wrapped. </param>
            <returns> An IEnumerable&lt;T&gt; consisting of a single item. </returns>
        </member>
        <member name="M:SharpSheets.Utilities.EnumerableUtils.RemoveRepeats``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Remove sequential repetitions from an enumerable.
            </summary>
            <typeparam name="T">The type of this enumerable.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to query.</param>
            <param name="equality">A function to compare the equality of two items.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Utilities.EnumerableUtils.RemoveRepeats``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove sequential repetitions from an enumerable,
            using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the item type.
            </summary>
            <typeparam name="T">The type of this enumerable.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to query.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Utilities.EnumerableUtils.WhereNotEmpty(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters a sequence of strings, removing items that are null or <see cref="F:System.String.Empty"/>, or are comprised exclusively of white-space characters.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to query.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Utilities.EnumUtils.ParseEnum(System.Type,System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.EnumUtils.ParseEnum``1(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.FileUtils.GetAllFiles(System.String)">
            <summary></summary>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.FileUtils.GetRelativePath(System.String,System.String)">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.ListUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="list"/> or <paramref name="items"/> are null.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="list"/> is a readonly <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
        </member>
        <member name="M:SharpSheets.Utilities.ListUtils.ConvertArrayObjectToList(System.Array,System.Type)">
            <summary>
            Convert an <see cref="T:System.Array"/> object into a <see cref="T:System.Collections.Generic.List`1"/> of the appropriate type.
            If the 
            </summary>
            <param name="array">The array to convert.</param>
            <param name="listType">The generic <see cref="T:System.Collections.Generic.List`1"/> type that should be produced.</param>
            <returns>A list object containing all the elements of the array.</returns>
            <exception cref="T:System.ArgumentException">If the provided <paramref name="listType"/> is not an example of <see cref="T:System.Collections.Generic.List`1"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the provided <paramref name="listType"/> cannot be properly instantiated.</exception>
        </member>
        <member name="M:SharpSheets.Utilities.MathUtils.Min(System.Byte[])">
            <summary></summary>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.MathUtils.Min(System.Int32[])">
            <summary></summary>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.MathUtils.Min(System.Single[])">
            <summary></summary>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.MathUtils.Min(System.Double[])">
            <summary></summary>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.MathUtils.Max(System.Byte[])">
            <summary></summary>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.MathUtils.Max(System.Int32[])">
            <summary></summary>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.MathUtils.Max(System.Single[])">
            <summary></summary>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.MathUtils.Max(System.Double[])">
            <summary></summary>
            <param name="values"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.RegexChunker.Matches(System.String,System.Int32)">
            <summary></summary>
            <exception cref="T:System.FormatException">Thrown when the input cannot be chunked according to the provided regular expressions.</exception>
        </member>
        <member name="M:SharpSheets.Utilities.StringUtils.Chunk(System.String,System.Int32)">
            <summary></summary>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="chunkSize"/> is negative or zero.</exception>
        </member>
        <member name="M:SharpSheets.Utilities.StringUtils.PrefixOverlapLength(System.String,System.String)">
            <summary>
            Returns the length of any prefix shared by both strings. Returns 0 if the two strings do not share a prefix.
            </summary>
            <param name="a">The first string.</param>
            <param name="b">The second string.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Utilities.TypeUtils.IsAssignableTo(System.Type,System.Type)">
            <summary>
            Determines whether the current type can be assigned to a variable of the specified type.
            </summary>
            <param name="type"> The current type, which is to be assigned to the specified type (i.e. proposed sub-type). </param>
            <param name="other"> The specified type, which is to be assigned the current type (i.e. proposed super-type). </param>
            <returns></returns>
        </member>
        <member name="M:SharpSheets.Utilities.TypeUtils.GetUnderlyingType(System.Type)">
            <summary>
            Find and return the underlying type, if the current type is Nullable, otherwise return the current type.
            </summary>
            <param name="type">Current type to check for Nullable underlying type.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.TypeUtils.IsGenericType(System.Type,System.Type)">
            <summary></summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.UFloat.#ctor(System.Single)">
            <summary></summary>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is negative.</exception>
        </member>
        <member name="M:SharpSheets.Utilities.UFloat.Parse(System.String,System.IFormatProvider)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.UFloat.Parse(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.UnitInterval.#ctor(System.Single)">
            <summary></summary>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is outside the range (0,1).</exception>
        </member>
        <member name="M:SharpSheets.Utilities.UnitInterval.Parse(System.String,System.IFormatProvider)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.UnitInterval.Parse(System.String)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Utilities.Vector.Parse(System.String,System.IFormatProvider)">
            <summary></summary>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpSheets.Widgets.AbstractLinedWidget.FieldDetails.#ctor(System.Nullable{System.Single},SharpSheets.Canvas.Text.TextFormat,SharpSheets.Canvas.Text.Justification,System.Boolean,System.Nullable{SharpSheets.Colors.Color})">
            <summary>
            Constructor for field details.
            </summary>
            <param name="fontsize">The font size to use for field contents.
            A value of 0 indicates that the fields should autosize the contents to fit the available space.</param>
            <param name="font">Font format to use for the fields. This will use the appropriate font format from
            the current font selection.</param>
            <param name="justification">The horizontal justification for the fields, indicating if the field
            should be left, right, or centre justified.</param>
            <param name="rich">Flag to indicate that the fields should have rich text features enabled.</param>
            <param name="color">Color value for the field contents. Defaults to the current text color.</param>
        </member>
        <member name="T:SharpSheets.Widgets.LinedDetails">
            <summary>
            This widget draw a series of lines, each with one or more fields, and text labels for those fields.
            The height of each line may be specified as an absolute or relative value, and the specific placement
            of fields and label may be controlled. The labels are provided as a series of entries to the widget,
            and can be used to place text before and after the fields. Optionally, a number of unlabelled "extra"
            lines may be appended to the bottom, containing only a single field in each line. Labels may contain
            embedded fields (to a maximum of one per label part), by surrounding a Dimension with question marks ("?").
            Each line will be underlined by default, but this can be specified.
            </summary>
        </member>
        <member name="T:SharpSheets.Widgets.LinedDetails.AlignFields">
            <summary>
            Indicates how the field start positions should be aligned horizontally
            aligned.
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.LinedDetails.AlignFields.NONE">
            <summary>
            Indicates that no additional aligning should be performed, and the
            start positions for the fields should depend only on the label width.
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.LinedDetails.AlignFields.GROUPED">
            <summary>
            Indicates that rows with equal numbers of entries should have their
            fields begin at the same position as a group, such that each field
            has the right-most start location of any other field in a row with
            same number of entries and at the same index in the row.
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.LinedDetails.AlignFields.ALLFIRST">
            <summary>
            Indicates that, in addition to aligning as for <see cref="F:SharpSheets.Widgets.LinedDetails.AlignFields.GROUPED"/>,
            that the first field in each row should be aligned with the first
            field in each other row, such that they each have the right-most
            value of any such field.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.LinedDetails.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,System.Collections.Generic.List{SharpSheets.Canvas.Text.RichString[][]},SharpSheets.Layouts.Dimension[][],System.Nullable{SharpSheets.Layouts.Dimension},System.UInt32,System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Nullable{System.Single},System.Single,SharpSheets.Widgets.AbstractLinedWidget.FieldDetails,System.Boolean,SharpSheets.Widgets.LinedDetails.AlignFields,SharpSheets.Canvas.Text.Alignment,System.Single)">
            <summary>
            Constructor for LinedDetails widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="name">The name for this widget, used for field names (not drawn to the document).</param>
            <param name="details" example="First (?30pt?);Second|Third,Comment|Fourth;Fifth;Sixth|Seventh|Eighth (?30pt?)">
            The labels to be used for each line. A line may comprise of 1 or more components. Each component
            may contain 1 or 2 parts. The first part will come before the field, and the second part (if present)
            will come after. Each entry will be a separate line. Addiitonally, each part may have up to one field
            contained within its text, by enclosing an absolute width in question marks ("?"). For example, the entry
            "Label (?40pt?)" would produce the text label "Label (", followed by a field with width 45pt, and then
            the text label ")". This field is in addition to the normal line field.
            </param>
            <param name="widths">The widths to use for each component. Each sub-array gives a list of n Dimensions,
            where each sub-array should have a different value for n (i.e. a different number of Dimension values).
            When a row is drawn to the document, the set of widths with a corresponding number of values will be
            used to determine the widths of the components. If there is not corresponding entry, then each component
            will be given an equal amount of space.</param>
            <param name="height" example="16pt">The height to use for each line (which will determine the field
            heights). This value is only meaningful if an absolute or percentage value is provided.</param>
            <param name="extra">A number of unlabelled lines to append to the end of the provided details.
            These lines will contain a single field, with no text labels.</param>
            <param name="spacing" default="3,3">The column and row spacing for this widget. The column spacing is used
            to horizontally separate components in a line, and the row spacing is used to vertically separate the lines.</param>
            <param name="detailSpacing">The horizontal spacing used to separate the parts of a component. If no
            value is provided, the width of a space at the current font size will be used.</param>
            <param name="fontsize" example="12">The fontsize to use for the text labels.</param>
            <param name="field">FieldDetails data for this widget.</param>
            <param name="underline">Flag to indicate whether the fields should be underlined. This line will
            use the current foreground color and linewidth.</param>
            <param name="alignFields">Indicates how the horizontal start of the fields should be aligned
            between lines.</param>
            <param name="labelAlignment">Indicates how the text labels should be aligned within the line areas.</param>
            <param name="labelOffset">A vertical offset to use for the text labels, after positioning with
            <paramref name="labelAlignment"/>, allowing for finer control of text positioning to account for font
            quirks.</param>
            <size>200 150</size>
        </member>
        <member name="T:SharpSheets.Widgets.LinedField">
            <summary>
            This widget draws a series of lines, with each line containing a single text field. The heights of each
            line may be specified as an absolute or relative value. Each line will be underlined by default, but
            this can be specified.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.LinedField.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,System.Nullable{SharpSheets.Layouts.Dimension},System.Nullable{System.Int32},System.Nullable{System.ValueTuple{System.Single,System.Single}},SharpSheets.Widgets.AbstractLinedWidget.FieldDetails,System.Boolean)">
            <summary>
            Constructor for LinedField widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="name">The name for this widget, used for field names (not drawn to the document).</param>
            <param name="height">The height to use for each line (which will determine the field
            heights). This value is only meaningful if an absolute or percentage value is provided.
            If no value is provided for <paramref name="rows"/>, when the area will be filled with lines of this height.
            If no <paramref name="height"/> or <paramref name="rows"/> value is provided, then there will be a single
            row.</param>
            <param name="rows" example="6">The number of lines to draw. If no value is provided, then the available
            area will be filled with rows of the specified <paramref name="height"/>. If no <paramref name="height"/>
            or <paramref name="rows"/> is specified, then there will be a single row.</param>
            <param name="spacing" default="3, 3">The column and row spacing for this widget. The column spacing is
            unused for this widget type (and is included for compatibility with other lined widgets), with the row
            spacing being used to vertically separate the lines.</param>
            <param name="field">FieldDetails data for this widget.</param>
            <param name="underline">Flag to indicate whether the fields should be underlined. This line will
            use the current foreground color and linewidth.</param>
            <size>200 150</size>
        </member>
        <member name="T:SharpSheets.Widgets.LinedList">
            <summary>
            This widget draws a series of lines, each containing one or more fields arranged in columns. Each column
            will be optionally headed by a text label. The size and placement of the column headers, and the column
            widths, can be specified. The height of each line may be specified as an absolte or relative value. Each
            line will be underlined by default, but this can be specified.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.LinedList.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,SharpSheets.Canvas.Text.RichString[],SharpSheets.Layouts.Dimension[],System.Nullable{SharpSheets.Layouts.Dimension},System.Nullable{System.Int32},System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Nullable{System.Single},System.Single,System.Nullable{SharpSheets.Canvas.Text.Justification},SharpSheets.Widgets.AbstractLinedWidget.FieldDetails,System.Boolean)">
            <summary>
            Constructor for LinedList widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="name">The name for this widget, used for field names (not drawn to the document).</param>
            <param name="columns" example="First,Second,Third">The column headings to draw at the top of the
            area.</param>
            <param name="widths" default="1" example="2,1,1">The widths to use when drawing the columns.
            If fewer widths than column names are provided, then the excess will be ignored. If no columns
            are provided, then all widths will be used, and no column headings drawn.</param>
            <param name="height">The height to use for each line (which will determine the field
            heights). This value is only meaningful if an absolute or percentage value is provided.</param>
            <param name="rows" example="6">The number of lines to draw. If no value is provided, then the available
            area will be filled with rows of the specified <paramref name="height"/>. If no <paramref name="height"/>
            or <paramref name="rows"/> is specified, then there will be a single row.</param>
            <param name="spacing" default="3, 3">The column and row spacing for this widget. The column spacing is used
            to horizontally separate the columns, and the row spacing is used to vertically separate the lines.</param>
            <param name="titlespacing">The vertical spacing between the header text and the first line. If no value
            is provided, this will default to the row spacing.</param>
            <param name="titlefontsize" example="13">The fontsize to use for the header text.</param>
            <param name="titleJustification">The justification to use for the header text. If no value is provided,
            this will default to the field justification.</param>
            <param name="field">FieldDetails data for this widget.</param>
            <param name="underline">Flag to indicate whether the fields should be underlined. This line will
            use the current foreground color and linewidth.</param>
            <size>200 150</size>
        </member>
        <member name="T:SharpSheets.Widgets.LinedCheckList">
            <summary>
            This widget draws a series of lines, each containing at least one text field and one check field,
            and may begin with either a text label or a second text field. The height of each line may be specified
            as an absolute or relative value, and the specific placement of fields and labels may be controlled.
            The labels are provided as a series of entries to the widget, and may optionally contain embedded fields
            (to a maximum of one per label), by surrounding a Dimension with question marks ("?"). There is also
            an option to append a number of unlabelled "extra" lines to the bottom, where the text label is replaced
            with a text field. Each line will be underlined by default, but this can be specified.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.LinedCheckList.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,System.Collections.Generic.List{SharpSheets.Canvas.Text.RichString},System.Nullable{SharpSheets.Layouts.Dimension},System.UInt32,System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Single,SharpSheets.Widgets.AbstractLinedWidget.FieldDetails,SharpSheets.Shapes.IBox,SharpSheets.Canvas.CheckType,System.Nullable{SharpSheets.Layouts.Dimension},System.Boolean,SharpSheets.Canvas.Text.Alignment,System.Single)">
            <summary>
            Constructor for LinedCheckList widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="name">The name for this widget, used for field names (not drawn to the document).</param>
            <param name="entries" example="First,Second,Third,Fourth (?25pt?)">
            A list of labels for each line in the widget. Each label may have up to one field contained within its text,
            by enclosing an absolute width in question marks ("?"). For example, the entry "Label (?40pt?)" would produce
            the text label "Label (", followed by a field with width 45pt, and then the text label ")". This field is in
            addition to the normal text and check fields for each line.
            </param>
            <param name="height" example="15pt">The height to use for each line (which will determine the field and check
            heights). This value is only meaningful if an absolute or percentage value is provided.</param>
            <param name="extra">A number of unlabelled lines to append to the end of the provided list.
            These lines will contain a text field in place of the label, in addition to the usual fields.</param>
            <param name="spacing" default="3, 3" example="5,5">The column and row spacing for this widget. The column
            spacing is used to horizontally separate components in a line, and the row spacing is used to vertically
            separate the lines.</param>
            <param name="fontsize" example="12">The fontsize to use for the text labels.</param>
            <param name="field">FieldDetails data for this widget.</param>
            <param name="check" example="Simple">The outline to draw around the check fields in each line.</param>
            <param name="checkType">The check mark to use in the check fields.</param>
            <param name="width">The width for the text labels for each row. If no value is provided, the maximum width
            among the labels (including any additional field widths) will be used.</param>
            <param name="underline">Flag to indicate whether the fields should be underlined. This line will
            use the current foreground color and linewidth.</param>
            <param name="labelAlignment">Indicates how the text labels should be aligned within the line areas.</param>
            <param name="labelOffset">A vertical offset to use for the text labels, after positioning with
            <paramref name="labelAlignment"/>, allowing for finer control of text positioning to account for font
            quirks.</param>
            <size>200 100</size>
        </member>
        <member name="T:SharpSheets.Widgets.ImageLayout">
            <summary>
            Indicates the layout to use for a page background image.
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.ImageLayout.STRETCH">
            <summary>
            The image is to be stretched to fit the aspect ratio of the page.
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.ImageLayout.CONTAIN">
            <summary>
            The image will be resized to fit inside the available page space, preserving its aspect ratio.
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.ImageLayout.COVER">
            <summary>
            The image will be resized to cover the entire page space, preserving its aspect ratio and potentially
            clipping the image to fit the page.
            </summary>
        </member>
        <member name="T:SharpSheets.Widgets.Page">
            <summary>
            This widget represents an entire page of a SharpSheets document, and hence should only appear
            at the base level of the configuration file. The current background color will be used
            as the background color for the whole page, or optionally an image can be provided as a background,
            with the option to stretch that image to fit the entire page area. Additionally, page size and page
            margins can be specified, along with an option to convert standard page sizes to landscape.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Page.#ctor(SharpSheets.Widgets.WidgetSetup,SharpSheets.Layouts.PageSize,System.Nullable{SharpSheets.Layouts.Margins},System.Boolean,SharpSheets.Canvas.CanvasImageData,System.Nullable{SharpSheets.Widgets.ImageLayout},SharpSheets.Parsing.ChildHolder,SharpSheets.Parsing.ChildHolder)">
            <summary>
            Constructor for SharpPage.
            </summary>
            <param name="setup">Widget setup for SharpPage.</param>
            <param name="paper">Paper size to use for the page. A variety of common paper size options are available,
            such as "A4" or "letter", or alternatively a size may be specified explicitly (as in "20 x 20 cm").</param>
            <param name="pageMargins" default="(28,28,28,28)">Margins to use for the page area, separating the document
            content from the edge of the paper.</param>
            <param name="landscape">Flag to indicate that the page should be landscape (i.e. rotated 90 degree).</param>
            <param name="backgroundimage">An image path to use for a page background (relative to the current file).
            If no image path is provided, then the current background color will be used as the page background.</param>
            <param name="backgroundLayout">Layout for background image, allowing you to specify how the image should be sized
            on the page (stretched, contained, or covering).</param>
            <param name="header">If provided, this child will be drawn in the header area of the page -- i.e. the
            area at the top of the page that lies within the <paramref name="pageMargins"/>.</param>
            <param name="footer">If provided, this child will be drawn in the footer area of the page -- i.e. the
            area at the bottom of the page that lies within the <paramref name="pageMargins"/>.</param>
            <size>0 0</size>
        </member>
        <member name="M:SharpSheets.Widgets.SharpWidget.MinimumContentSize(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Size)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Widgets.SharpWidget.GetMinimumContentSize(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Size)">
            <summary></summary>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Widgets.SharpWidget.GetContainerArea(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <param name="graphicsState"></param>
            <param name="rect"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Widgets.SharpWidget.GetDiagnosticRects(SharpSheets.Canvas.ISharpGraphicsState,SharpSheets.Layouts.Rectangle)">
            <summary></summary>
            <param name="graphicsState"></param>
            <param name="available"></param>
            <returns></returns>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="M:SharpSheets.Widgets.SharpWidget.DrawWidget(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.Threading.CancellationToken)">
            <summary>
            Draw the widget content inside the available rectangle (after margins), and return any remaining space.
            This method does not draw the children of the widget, only this widget's local content.
            </summary>
            <param name="canvas"> Canvas on which the widget will be drawn. </param>
            <param name="rect"> Available rectangle for drawing this widget (after margins applied). </param>
            <param name="cancellationToken"> Cancellation token indicating whether the draw procedure should be terminated. </param>
            <returns> The remaining rectangle after this widget's contents have been drawn. </returns>
            <exception cref="T:SharpSheets.Exceptions.SharpDrawingException"></exception>
            <exception cref="T:SharpSheets.Exceptions.SharpLayoutException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SharpSheets.Widgets.SharpWidget.Draw(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.Threading.CancellationToken)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpDrawingException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SharpSheets.Widgets.Div">
            <summary>
            The basic division widget, which simply arranges and draws its children, with no additional styling or graphics.
            This widget will draw any gutter style specified, and obeys auto-sizing conventions normally.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Div.#ctor(SharpSheets.Widgets.WidgetSetup)">
            <summary>
            Constructor for Div widget.
            </summary>
            <param name="setup"> Widget setup object. </param>
        </member>
        <member name="T:SharpSheets.Widgets.Row">
            <summary>
            This widget functions identically to the <see cref="T:SharpSheets.Widgets.Div"/> widget, and is simply included to allow more
            clarity in configuration files (to display the intent for a widget in the arrangement).
            </summary>
        </member>
        <member name="T:SharpSheets.Widgets.Column">
            <summary>
            This widget functions identically to the <see cref="T:SharpSheets.Widgets.Div"/> widget, and is simply included to allow more
            clarity in configuration files (to display the intent for a widget in the arrangement).
            </summary>
        </member>
        <member name="T:SharpSheets.Widgets.Empty">
            <summary>
            This widget draws nothing to the page, and also does not draw any children (indeed,
            this widget should not have any children).
            It is included as a placeholder and null-widget, and to be used where at least
            one child is required, but no drawing is desireable.
            </summary>
        </member>
        <member name="T:SharpSheets.Widgets.Section">
            <summary>
            This widget is used for drawing a standard document section, with an outline and title which may be specified
            by the user. If this widget has no children, it will draw a multiline text field in the remaining area
            after its outline and title have been drawn (the details of this field may be adjusted using the widget parameters).
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Section.FieldDetails.#ctor(System.String,System.Nullable{System.Single},System.Nullable{System.Single},SharpSheets.Canvas.Text.Justification,System.Boolean,SharpSheets.Canvas.Text.TextFormat,System.Single,System.Boolean)">
            <summary>
            Constructor for field details.
            </summary>
            <param name="tooltip">Tooltip string to use for the field, which can be used to provide additional
            information in the final document for accesibility and usability purposes.</param>
            <param name="lined">If provided, the text field in this widget will not be interactive in the final document,
            and will instead be drawn as a lined area, with a line spacing equal to the value given
            (measured in points). The lines will be drawn at the default line width, unless the field linewidth parameter
            is set.</param>
            <param name="linewidth">The line width to use if a <paramref name="lined"/> parameter is specified. If not
            specified, the current line width will be used.</param>
            <param name="justification">Justification for the field, indicating if the field should be left, right,
            or centre justified.</param>
            <param name="singleline">Flag to indicate that the field for this widget should be a single line field.</param>
            <param name="font">Font format to use for the text field. This will use the appropriate font format from
            the current font selection.</param>
            <param name="fontsize">Font size for the text field.
            A value of 0 or less indicates that the field in the final document should autosize the text.</param>
            <param name="rich">Flag to indicate that the text field should have rich text features enabled.</param>
        </member>
        <member name="M:SharpSheets.Widgets.Section.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,SharpSheets.Shapes.IContainerShape,SharpSheets.Layouts.Margins,SharpSheets.Widgets.Section.FieldDetails)">
            <summary>
            Constructor for Section widget.
            </summary>
            <param name="setup"> Widget setup object. </param>
            <param name="name"> The name for this section, used for titles and field names. </param>
            <param name="outline" example="Simple"> Outline style to place around this widget,
            which will be drawn before any child widgets are drawn. </param>
            <param name="_frame"> Margins to apply to the remaining area after the outline is drawn.
            This can be used to separate the children from the outline, if desired. This extra spacing will
            be factored into any autosizing calculations.</param>
            <param name="field">Field details for this widget.</param>
        </member>
        <member name="T:SharpSheets.Widgets.Box">
            <summary>
            This widget is used for drawing a standard document box containing (by default) a single-line text field,
            with an outline and title which may be specified by the user.
            If this widget has no children, it will draw a single-line text field in the remaining area
            after its outline and title have been drawn (the details of this field may be adjusted using the widget parameters).
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Box.FieldDetails.#ctor(System.String,SharpSheets.Canvas.Text.Justification,System.Nullable{SharpSheets.Canvas.CheckType},SharpSheets.Canvas.Text.TextFormat,System.Single,System.Boolean)">
            <summary>
            Constructor for field details.
            </summary>
            <param name="tooltip">Tooltip string to use for the field, which can be used to provide additional
            information in the final document for accesibility and usability purposes.</param>
            <param name="justification">Justification for the field, indicating if the field should be left, right,
            or centre justified.</param>
            <param name="check">If a check mark type is provided, the field will be a check field, rather than
            a text field, with the appropriate check mark used to indicate the "On" state.</param>
            <param name="font">Font format to use for the text field. This will use the appropriate font format from
            the current font selection.</param>
            <param name="fontsize">Font size for the text field.
            A value of 0 or less indicates that the field in the final document should autosize the text.</param>
            <param name="rich">Flag to indicate that the text field should have rich text features enabled.</param>
        </member>
        <member name="M:SharpSheets.Widgets.Box.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,SharpSheets.Shapes.IContainerShape,SharpSheets.Layouts.Margins,SharpSheets.Widgets.Box.FieldDetails)">
            <summary>
            
            </summary>
            <param name="setup"> Widget setup object. </param>
            <param name="name"> The name for this box, used for titles and field names. </param>
            <param name="outline" example="Simple"> Outline style to place around this widget,
            which will be drawn before any child widgets are drawn. </param>
            <param name="_frame"> Margins to apply to the remaining area after the outline is drawn.
            This can be used to separate the children from the outline, if desired. This extra spacing will
            be factored into any autosizing calculations.</param>
            <param name="field">Field details for this widget.</param>
        </member>
        <member name="M:SharpSheets.Widgets.Box.DrawWidget(SharpSheets.Canvas.ISharpCanvas,SharpSheets.Layouts.Rectangle,System.Threading.CancellationToken)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpLayoutException"></exception>
        </member>
        <member name="T:SharpSheets.Widgets.Labelled">
            <summary>
            This widget can be used to draw any LabelledBox shape with a text label in the label area of that shape.
            The label can be positioned within the label area, and it's parameters adjusted. Alternatively, a "content"
            child may be used to replace the text label with some other specified widget content.
            If the widget has no children, then a text field will be placed in the labelled box remaining area.
            If the widget does have children, then these will be drawn in the remaining area instead.
            If the labelled box style supports calculation of the full area from a content size, then this widget
            will support auto-sizing based on any child widgets.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Labelled.LabelParams.#ctor(System.Single,SharpSheets.Canvas.Text.TextFormat,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.ValueTuple{System.Single,System.Single})">
            <summary>
            Constructor for label parameters.
            </summary>
            <param name="fontSize">Font size to use for the label text.</param>
            <param name="format">Font format to use for the label text. This will use the appropriate font
            format from the current font selection.</param>
            <param name="justification">The horizontal justification to use for the label text, relative to the label area.</param>
            <param name="alignment">The vertical alignment to use for the label text, relative to the label area.</param>
            <param name="heightStrategy">The height calculation strategy to use when arranging the label text within the label area.</param>
            <param name="offset">An offset for the label text, after positioning using <paramref name="justification"/> and
            <paramref name="alignment"/> This is provided as an x,y pair of numbers, measured in points. The positive
            directions are rightwards and upwards. This can be used to make specific adjustments, to accomodate quirks of
            specific fonts.</param>
        </member>
        <member name="M:SharpSheets.Widgets.Labelled.FieldDetails.#ctor(System.String,SharpSheets.Canvas.Text.Justification,System.Nullable{SharpSheets.Canvas.CheckType},SharpSheets.Canvas.Text.TextFormat,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Constructor for field details.
            </summary>
            <param name="tooltip">Tooltip string to use for the field, which can be used to provide additional
            information in the final document for accesibility and usability purposes.</param>
            <param name="justification">Justification for the field, indicating if the field should be left, right,
            or centre justified.</param>
            <param name="check">If a check mark type is provided, the field will be a check field, rather than
            a text field, with the appropriate check mark used to indicate the "On" state.</param>
            <param name="font">Font format to use for the text field. This will use the appropriate font format from
            the current font selection.</param>
            <param name="fontsize">Font size for the text field.
            A value of 0 or less indicates that the field in the final document should autosize the text.</param>
            <param name="multiline">Flag to indicate that the field for this widget should be a multiline field.</param>
            <param name="rich">Flag to indicate that the text field should have rich text features enabled.</param>
        </member>
        <member name="M:SharpSheets.Widgets.Labelled.#ctor(SharpSheets.Widgets.WidgetSetup,SharpSheets.Shapes.ILabelledBox,SharpSheets.Layouts.Margins,System.String,SharpSheets.Widgets.Labelled.LabelParams,SharpSheets.Widgets.Labelled.FieldDetails,SharpSheets.Parsing.ChildHolder)">
            <summary>
            Constructor for Labelled widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="outline">LabelledBox style to draw for this widget.
            This shape will be used to calculate the remaining and label areas.
            It will also be drawn before any content or label is drawn.</param>
            <param name="_frame">Margins to apply to the remaining area after the labelled box is drawn.
            This can be used to separate the field, or any children, from the outline if desired.
            This extra spacing will be factored into any autosizing calculations.</param>
            <param name="label">The text label to be drawn in the label area of the
            labelled box. This positioning and style of this label can be adjusted using
            the other settings.</param>
            <param name="label__">Label details for this widget.</param>
            <param name="field">Field details for this widget.</param>
            <param name="content">If provided, this child content will be drawn in place
            of the label text in the label area of the labelled box.</param>
        </member>
        <member name="T:SharpSheets.Widgets.Text">
            <summary>
            This widget is used to draw known text to the page, which may be dynamically resized to fit the available
            space. The text can be positioned inside the available area, and formatted using either rich text, or with
            the "format" parameter. The size of this widget can be dynamically inferred from either "fontsize" or "minfontsize".
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Text.ParagraphDataArgs.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor for ParagraphDataArgs.
            </summary>
            <param name="spacing">The spacing to be used between paragraphs of text, measured in points.
            This spacing is in addition to any line spacing.</param>
            <param name="indent">The indentation length for the first line of text in a paragraph,
            measured in points.</param>
            <param name="hanging">The indentation length for each line after the first (whose indentation
            is controlled using <paramref name="indent"/>), measured in points.</param>
        </member>
        <member name="M:SharpSheets.Widgets.Text.#ctor(SharpSheets.Widgets.WidgetSetup,System.Collections.Generic.List{SharpSheets.Canvas.Text.RichString},System.Single,System.Nullable{SharpSheets.Canvas.Text.TextFormat},System.Single,SharpSheets.Widgets.Text.ParagraphDataArgs,System.Single,System.Nullable{System.Single},System.Single,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.Boolean,System.ValueTuple{System.Single,System.Single},System.Boolean)">
            <summary>
            Constructor for Text widget.
            </summary>
            <param name="setup"></param>
            <param name="text" example="Lorem ipsum dolor sit amet\, consectetur adipiscing elit\, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.">
            The text to be displayed in this widget, which can be formatted as rich text.
            The provided entries will be treated as separate lines of text.
            </param>
            <param name="fontSize">The fontsize at which to draw the provided text.
            A fontsize of 0 indicates that the fontsize should be adjusted such that
            the text fit the available area (this can also be achieved by setting the <paramref name="fit"/> flag).
            This parameter is ignored if <paramref name="fit"/> is true.</param>
            <param name="format">This parameter can be used to set the default format
            for the text, to be used in conjuction with any rich text formatting. For example, if this parameter
            is set to <see cref="F:SharpSheets.Canvas.Text.TextFormat.BOLD"/>, then the text "Testing _Testing_" would be interpreted as "*Testing _Testing_*" </param>
            <param name="lineSpacing">This parameter sets the line spacing, which is the distance between successive
            text baselines, measured in multiples of the current fontsize.</param>
            <param name="paragraph">Paragraph data for this widget.</param>
            <param name="minfontsize" example="1">This is the minimum fontsize to be used when fitting the text
            to the available area. It must have a value greater than zero. This parameter is ignored when <paramref name="fit"/>
            is false and <paramref name="fontSize"/> is greater than zero.</param>
            <param name="maxfontsize" example="400">This is the maximum fontsize to be used when fitting the
            text to the available area. It must have a value greater than zero. If not provided, the maximum fontsize will
            be the maximum of <paramref name="fontSize"/> and <paramref name="minfontsize"/>. This parameter is ignored when
            <paramref name="fit"/> is false and <paramref name="fontSize"/> is greater than zero.</param>
            <param name="epsilon">This is the smallest change in fontsize to be considered when fitting the text size
            to the available area. This parameter is ignored when <paramref name="fit"/> is false and <paramref name="fontSize"/>
            is greater than zero.</param>
            <param name="justification">The horizontal justification to use for the text within the available area.</param>
            <param name="alignment">The vertical alignment to use for the text within the available area.</param>
            <param name="heightStrategy">The height calculation strategy to use when arranging the text within the available area.</param>
            <param name="fit" example="true">Flag to indicate that the font size should be adjusted to fit the text to the
            available area.</param>
            <param name="offset">An offset for the text, after positioning using <paramref name="justification"/> and
            <paramref name="alignment"/>. This is provided as an x,y pair of numbers, measured in points. The positive directions
            are rightwards and upwards. This can be used to make specific adjustments, to accomodate quirks of specific fonts.</param>
            <param name="singleline">Flag to indicate that the text should be written on a single line. No line breaks will
            be added, regardless of the fontsize.</param>
            <size>50 50</size>
        </member>
        <member name="M:SharpSheets.Widgets.BarNameDetails.#ctor(System.Single,System.ValueTuple{System.Single,System.Single},SharpSheets.Canvas.Text.TextFormat,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.Nullable{SharpSheets.Colors.Color})">
            <summary>
            Constructor for BarNameDetails.
            </summary>
            <param name="fontSize">The fontsize for the bar names, measured in points.</param>
            <param name="offset">An offset for the name text, after positioning using <paramref name="justification"/> and
            <paramref name="alignment"/>. This is provided as an x,y pair of numbers, measured in points. The positive directions
            are rightwards and upwards. This can be used to make specific adjustments, to accomodate quirks of specific fonts.</param>
            <param name="format">Font format to use for the name text. This will use the appropriate font
            format from the current font selection.</param>
            <param name="justification">The horizontal justification to use for the name text, relative to the bar label area.</param>
            <param name="alignment">The vertical alignment to use for the name text, relative to the bar label area.</param>
            <param name="heightStrategy">The height calculation strategy to use when arranging the label text within the label area.</param>
            <param name="color">The color to use for the bar name text. The default is the current text color.</param>
        </member>
        <member name="T:SharpSheets.Widgets.Bars">
            <summary>
            This widget draws one or more bars in the document, arranged vertically. The spacing
            and size of these bars can be specified, and if an absolute value is given for the bar
            height, the size of the widget can be automatically calculated. It is also possible to
            specify content for the label and entry areas of the bar in the form of named children
            of this widget, however these children are not included in autosizing calculations.
            Additionally, annotations may be placed on the label and entry areas of the bars as
            labels and notes, whose parameters may be specified. By default, if no named children
            are provided, the bar name is written as text in the bar label area, and a field (either
            a text field or check field, depending on whether the check mark parameters have been
            specified) is placed in the bar remaining area.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Bars.#ctor(SharpSheets.Widgets.WidgetSetup,SharpSheets.Shapes.IBar,System.String[],System.String[],System.Nullable{SharpSheets.Layouts.Dimension},System.String,System.String,System.Boolean,SharpSheets.Widgets.BarNameDetails,SharpSheets.Shapes.LabelDetails,SharpSheets.Shapes.LabelDetails,System.Boolean,SharpSheets.Canvas.CheckType[],System.Boolean,SharpSheets.Parsing.ChildHolder,SharpSheets.Parsing.ChildHolder)">
            <summary>
            Constructor for Bars widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="bar">Bar style to draw for this widget.
            This shape will be used to calculate the label and entry areas.
            It will also be drawn before any label or entry is drawn.</param>
            <param name="_name" example="Bar 1,Bar 2">The names to use for the bars.
            The number of names will determine the number of bars drawn in the document.
            These names will be used in the bar labels (unless a <paramref name="content"/> child is given)
            and for field names.</param>
            <param name="_tooltip">Tooltip strings to use for the bar fields. If the number
            of tooltip strings does not match the number of bars, some tooltips will be ignored,
            or some fields will have no tooltip, as appropriate.</param>
            <param name="height">The height that each bar is to be drawn at. This is used
            in auto-sizing calculations. The default is 1 relative unit.</param>
            <param name="label" example="Label">A label to be drawn by the bar entry area.
            By default this will only be drawn for the first bar, but will be drawn by each
            bar if <paramref name="allLabelled"/> is specified.</param>
            <param name="note" example="Note">A note to be drawn by the bar label area.
            By default this will only be drawn for the first bar, but will be drawn by each
            bar if <paramref name="allLabelled"/> is specified.</param>
            <param name="allLabelled">Flag to indicate that the note and label should be drawn
            for each bar, not just the first one.</param>
            <param name="name_">Name details data for this widget.</param>
            <param name="label_">Label details data for this widget.</param>
            <param name="note_">Note details data for this widget.</param>
            <param name="checkMarks">A flag to indicate that the bar entry fields should be
            check fields, rather than text fields. This flag is unnecessary if a value is provided
            for <paramref name="check"/>.</param>
            <param name="check">The check mark to use for the bar fields (the fields will be check
            fields if a value is given for this parameter). Check marks can be specified for each
            bar separately. If the number of bars does not match the number of checkmarks, then the
            last checkmark will be used for any remaining bars, or remaining checkmarks will be ignored,
            as appropriate.</param>
            <param name="rich">Flag to indicate that any text field should have rich text features enabled.</param>
            <param name="content">If provided, this child will be drawn in place
            of the name text in the label area of the bar.</param>
            <param name="entry">If provided, this child will be drawn in place
            of the field in the remaining area of the bar.</param>
            <size>100 50</size>
        </member>
        <member name="T:SharpSheets.Widgets.SlotsBars">
            <summary>
            This widget draws one or more usage bars in the document, arranged vertically. The spacing
            and size of these bars can be specified, and if an absolute value is given for the bar
            height, the size of the widget can be automatically calculated. It is also possible to
            specify content for the label and entry areas of the usage bar in the form of named children
            of this widget, however these children are not included in autosizing calculations.
            Additionally, annotations may be placed on the label and entry areas of the bars as
            labels and notes, whose parameters may be specified. By default, if no named children
            are provided, the bar name is written as text in the bar label area, and text fields
            are placed in the bar entry areas.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.SlotsBars.#ctor(SharpSheets.Widgets.WidgetSetup,SharpSheets.Shapes.IUsageBar,System.String[],System.Nullable{SharpSheets.Layouts.Dimension},System.Nullable{System.ValueTuple{System.String,System.String}},System.String,System.Boolean,SharpSheets.Widgets.BarNameDetails,SharpSheets.Shapes.LabelDetails,SharpSheets.Shapes.LabelDetails,System.Boolean,SharpSheets.Parsing.ChildHolder,SharpSheets.Parsing.ChildHolder,SharpSheets.Parsing.ChildHolder)">
            <summary>
            Constructor for SlotsBars widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="bar">UsageBar style to draw for this widget.
            This shape will be used to calculate the label and entry areas.
            It will also be drawn before any label or entry is drawn.</param>
            <param name="_name" example="Bar 1,Bar 2">The names to use for the bars.
            The number of names will determine the number of bars drawn in the document.
            These names will be used in the bar labels (unless a <paramref name="content"/> child is given)
            and for field names.</param>
            <param name="height">The height that each bar is to be drawn at. This is used
            in auto-sizing calculations. The default is 1 relative unit.</param>
            <param name="labels" example="Label 1, Label 2">A pair of labels to be drawn by the bar entry areas.
            By default these will only be drawn for the first bar, but will be drawn by each
            bar if <paramref name="allLabelled"/> is specified.</param>
            <param name="note" example="Note">A note to be drawn by the bar label area.
            By default this will only be drawn for the first bar, but will be drawn by each
            bar if <paramref name="allLabelled"/> is specified.</param>
            <param name="allLabelled">Flag to indicate that the note and labels should be drawn
            for each bar, not just the first one.</param>
            <param name="name_">Name details data for this widget.</param>
            <param name="labels_">Label details data for this widget.</param>
            <param name="note_">Note details data for this widget.</param>
            <param name="rich">Flag to indicate that any text fields should have rich text features enabled.</param>
            <param name="content">If provided, this child will be drawn in place
            of the name text in the label area of the bar.</param>
            <param name="entry1">If provided, this child will be drawn in place
            of the field in the first entry area of the bar.</param>
            <param name="entry2">If provided, this child will be drawn in place
            of the field in the second entry area of the bar.</param>
            /// <size>100 50</size>
        </member>
        <member name="T:SharpSheets.Widgets.CheckList">
            <summary>
            This widget can be used to create a checklist, a vertically arranged list of text entries
            with a check field for each entry. The outline, style, and position for the check fields can be adjusted,
            and the format and positioning of the text can be specified. The check marks will be vertically positioned 
            in the centre of each row, and the text can be positioned relative to the row area.
            </summary>
        </member>
        <member name="T:SharpSheets.Widgets.CheckList.CheckPosition">
            <summary>
            Indicates the position of a check field relative to a text entry.
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.CheckList.CheckPosition.LEFT">
            <summary>
            Indicates that the check mark should be to the left of the text entry.
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.CheckList.CheckPosition.RIGHT">
            <summary>
            Indicates that the check mark should be to the right of the text entry.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.CheckList.#ctor(SharpSheets.Widgets.WidgetSetup,System.Collections.Generic.List{SharpSheets.Canvas.Text.RichString},System.String,System.Nullable{SharpSheets.Layouts.Dimension},System.Single,System.Single,System.Single,System.Single,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.Text.Alignment,SharpSheets.Canvas.Text.TextHeightStrategy,System.Nullable{System.Single},SharpSheets.Shapes.IBox,SharpSheets.Widgets.CheckList.CheckPosition,SharpSheets.Canvas.CheckType,System.Nullable{SharpSheets.Colors.Color})">
            <summary>
            Constructor for CheckList widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="list" example="Item 1, Item 2, Item 3">The list of text entries to be included.
            The number of entries dictates the number of lines, and number of check fields.
            Each entry will be drawn as a single line of text.</param>
            <param name="name">A name to prepend to the check fields.</param>
            <param name="height" example="10pt">The height of each row. The default is 1 relative unit.</param>
            <param name="fontsize" example="8">The fontsize for the text entries, measured in points.</param>
            <param name="textOffset">A vertical offset for the text entries, after positioning using <paramref name="alignment"/>
            and <paramref name="heightStrategy"/>. This can be useful for fine-tuning positioning, and to account for the specific
            of certain fonts.</param>
            <param name="separation" example="10">The separation between the check field outlines and the text entries.
            Measured in points.</param>
            <param name="spacing">The spacing between the rows, measured in points.</param>
            <param name="justification">The horizonta; justification for the text entries in the row area.</param>
            <param name="alignment" example="CENTRE">The vertical alignment of the text entries within the row area.</param>
            <param name="heightStrategy" example="AscentBaseline">The height strategy to use when determing the vertical placement
            of the text entries.</param>
            <param name="checkSize" example="6">The size of the check mark outlines, measured in points. If no value is provided,
            this will default to the row height. Each check mark outline will be positioned vertically centred in each row.</param>
            <param name="check" example="Circle">The outline to use for the check marks.</param>
            <param name="checkPosition">Indicates on which side the check mark should be drawn, left or right.</param>
            <param name="checkType">The check symbol to use when the check fields are in the "On" state.</param>
            <param name="checkColor">An optional color for the check field symbol. If no value is provided,
            the current text color will be used.</param>
            <size>60 80</size>
        </member>
        <member name="T:SharpSheets.Widgets.Field">
            <summary>
            This widget creates a text field in document, whose parameters and default value can be specified.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Field.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,System.String,System.Nullable{System.Single},System.String,System.Single,SharpSheets.Canvas.Text.TextFormat,System.Boolean,System.Boolean,System.Boolean,SharpSheets.Canvas.Text.Justification,SharpSheets.Canvas.TextFieldType)">
            <summary>
            Constructor for Field widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="name">The name for this text field.</param>
            <param name="tooltip">Tooltip string to use for the field, which can be used to provide additional
            information in the final document for accesibility and usability purposes.</param>
            <param name="aspect">The aspect ratio for this field. If none is provided, the field will conform
            the the size and aspect ratio of the provided area. If provided, the final field area will be the
            largest rectangle of that aspect ratio that can fit inside the provided area.</param>
            <param name="value">The default text value for this field.</param>
            <param name="fontsize">Font size for this text field.
            A value of 0 or less indicates that the field in the final document should autosize the text.</param>
            <param name="format">Font format to use for the text field. This will use the appropriate font format from
            the current font selection.</param>
            <param name="singleline">Flag to indicate that the field should be a single line field.</param>
            <param name="rich">Flag to indicate that the text field should have rich text features enabled.</param>
            <param name="lined">Flag to indicate that the field should not be an interactive field, but should instead
            be drawn as a lined area, with line spacing equal to the fontsize. If the fontsize is zero, a line
            spacing of 15 points.</param>
            <param name="justification">Justification for the field, indicating if the field should be left, right,
            or centre justified.</param>
            <param name="type">The content type of this field, indicating if the field should constrain
            it's value to a floating point or integer number.</param>
            <size>0 0</size>
        </member>
        <member name="T:SharpSheets.Widgets.CheckField">
            <summary>
            This widget creates a check field in the document, whose style and parameters can be specified.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.CheckField.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,System.String,System.Nullable{System.Single},SharpSheets.Canvas.CheckType,System.Nullable{SharpSheets.Colors.Color})">
            <summary>
            Constructor for CheckField widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="name">The name for this check field.</param>
            <param name="tooltip">Tooltip string to use for the field, which can be used to provide additional
            information in the final document for accesibility and usability purposes.</param>
            <param name="aspect">The aspect ratio for this field. If none is provided, the field will conform
            the the size and aspect ratio of the provided area. If provided, the final field area will be the
            largest rectangle of that aspect ratio that can fit inside the provided area.</param>
            <param name="check">The check symbol to use when this field is in the "On" state.</param>
            <param name="color">An optional color for the check field symbol. If no value is provided,
            the current text color will be used.</param>
            <size>0 0</size>
        </member>
        <member name="T:SharpSheets.Widgets.ImageField">
            <summary>
            This widget creates an image field in the document, which may have a default image and aspect ratio specified.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.ImageField.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,System.String,SharpSheets.Canvas.CanvasImageData,System.Single)">
            <summary>
            Constructor for ImageField widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="name">The name for this image field.</param>
            <param name="tooltip">Tooltip string to use for the field, which can be used to provide additional
            information in the final document for accesibility and usability purposes.</param>
            <param name="placeholder">A path to a placeholder image to use for this image field (which will
            be visible in the document before any other image is selected).</param>
            <param name="aspect">The aspect ratio for this field. If none is provided, the field will conform
            the the size and aspect ratio of the provided area. If provided, the final field area will be the
            largest rectangle of that aspect ratio that can fit inside the provided area.</param>
            <size>0 0</size>
        </member>
        <member name="T:SharpSheets.Widgets.TopEntry">
            <summary>
            This widget creates an area with an annotated field at the top. If the
            widget has no children, then the remaining area will be filled with a
            text field.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.TopEntry.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,System.String,SharpSheets.Canvas.Text.TextFormat,System.Single,System.Nullable{System.Single},System.Nullable{System.Single},System.ValueTuple{System.Single,System.Single},System.Boolean)">
            <summary>
            Constructor for TopEntry.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="name">The name for this widget, which will be used as
            the basis of the field names (but will not be drawn).</param>
            <param name="text" example="Text">The text to draw as the annotation
            for the top field. If no text is provided, the top text will be left
            blank, but the field will still be added.</param>
            <param name="_format">The format for the annotation text and the
            field text.</param>
            <param name="fontSize">The fontsize for the annotation text and field
            text.</param>
            <param name="height">A height for the top annotation and field. Defaults
            to 1.5 times <paramref name="fontSize"/>.</param>
            <param name="spacing">The spacing between the top annotation and the
            remaining area for the widget. Defaults to 0.5 times
            <paramref name="fontSize"/>.</param>
            <param name="textOffset">An offset for the annotation text.</param>
            <param name="rich">Flag to indicate that the fields should use
            rich text features.</param>
        </member>
        <member name="T:SharpSheets.Widgets.Subdivided">
            <summary>
            This widget divides the available area into a series of subdivisions, in a number of rows and columns,
            with an outline around each subdivision. Each column may optionally have a title, the format of which can be specified.
            The relative widths of columns can also be specified. Each subdivision contains a text field. The number of columns
            will be the maximum length of "columns" or "widths", with missing column names being empty, and missing widths
            being set to 1 relative unit. If an absolute row height is specified, then the widget's size can be "auto", as a full
            height may be calculated.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Subdivided.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,System.String[],System.Single,System.Single,SharpSheets.Layouts.Dimension[],SharpSheets.Canvas.Text.Justification[],System.Nullable{System.ValueTuple{System.Single,System.Single}},System.Nullable{SharpSheets.Layouts.Dimension},System.Int32,SharpSheets.Shapes.IBox,System.Boolean)">
            <summary>
            Constructor for Subdivided widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="name">A base name to use when naming the subdivision text fields.</param>
            <param name="columns" example="Column 1,Column 2">A list of names for the columns.</param>
            <param name="headerFontSize">The font size for the column headers.</param>
            <param name="headerSpacing">The spacing between the column headers and the top of the subdivisions.</param>
            <param name="widths" example="2,1">The widths of the columns.</param>
            <param name="justification" default="LEFT">The justifcations for the column, which will be used for column headers and fields.</param>
            <param name="_spacing" default="5,5">The spacing between the subdivisions, as a pair of numbers,
            for column and row spacing, respectively. Measured in points.</param>
            <param name="_height" default="1">The height of each row (not including the spacing). The default is 1 relative unit.
            If an absolute value is specified, then the widget size may be calculated for auto-sizing.</param>
            <param name="_rows" example="5">The number of rows to draw.</param>
            <param name="division" example="Simple">The outline style for each division.</param>
            <param name="rich">Flag to indicate that the subdivision fields should have rich text features enabled.</param>
        </member>
        <member name="M:SharpSheets.Widgets.Subdivided.GetRects(SharpSheets.Layouts.Rectangle,SharpSheets.Layouts.Rectangle[]@,SharpSheets.Layouts.Rectangle[]@,SharpSheets.Layouts.Rectangle@)">
            <summary></summary>
            <exception cref="T:SharpSheets.Exceptions.SharpDrawingException"></exception>
            <exception cref="T:SharpSheets.Layouts.InvalidRectangleException"></exception>
        </member>
        <member name="T:SharpSheets.Widgets.Repeat">
            <summary>
            This widget draws a specified content multiple times in a grid layout, with a specified number of rows and columns.
            The repeated content will be drawn on a two-dimensional, rectangular grid, with equal-sized elements.
            Gutter details may be drawn in between the repeated elements, if desired.
            </summary>
        </member>
        <member name="T:SharpSheets.Widgets.Repeat.GutterLayout">
            <summary>
            Different arrangements of gutters between elements in a two-dimensional grid.
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.Repeat.GutterLayout.NONE">
            <summary>
            No gutters to be drawn between elements.
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.Repeat.GutterLayout.COLUMNS">
            <summary>
            Gutter details should be drawn between columns (i.e. vertical gutters).
            </summary>
        </member>
        <member name="F:SharpSheets.Widgets.Repeat.GutterLayout.ROWS">
            <summary>
            Gutter details should be drawn between rows (i.e. horizontal gutters).
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Repeat.Spacing.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            
            </summary>
            <param name="horizontal">Horizontal spacing between elements, measured in points.</param>
            <param name="vertical">Vertical spacing between elements, measured in points.</param>
        </member>
        <member name="M:SharpSheets.Widgets.Repeat.#ctor(SharpSheets.Widgets.WidgetSetup,System.String,System.Int32,System.Int32,System.Nullable{System.Single},SharpSheets.Widgets.Repeat.Spacing,SharpSheets.Parsing.ChildHolder,SharpSheets.Widgets.Repeat.GutterLayout)">
            <summary>
            Constructor for Repeat widget.
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="name">A name to be appended to all child form fields, to distinguish between repeated fields.</param>
            <param name="_rows">The number of repeated rows to draw.</param>
            <param name="_columns">The number of repeated columns to draw.</param>
            <param name="spacing">The default spacing to use for the repeated elements, measured in points.</param>
            <param name="spacing_">Spacing data for this widget.</param>
            <param name="content">The content to be repeated in each grid element.</param>
            <param name="gutterLayout">The gutter layout to use when drawing gutter details between the grid elements.
            The details can either be drawn between rows, between columns, or not be drawn at all.</param>
            <size>0 0</size>
        </member>
        <member name="T:SharpSheets.Widgets.Image">
            <summary>
            This widget draws an image, taken from an image file, to the document, within the available area,
            with the option of specifying an aspect ratio for the drawn image.
            </summary>
        </member>
        <member name="M:SharpSheets.Widgets.Image.#ctor(SharpSheets.Widgets.WidgetSetup,SharpSheets.Canvas.CanvasImageData,System.Nullable{System.Single})">
            <summary>
            
            </summary>
            <param name="setup">Widget setup data.</param>
            <param name="_file">The image file path, relative to the current configuration file.</param>
            <param name="_aspect">An optional aspect ratio to use for the image when drawing to the document.
            If this is not specified, the images intrinsic aspect ratio will be used.</param>
            <size>0 0</size>
        </member>
        <member name="M:SharpSheets.Widgets.WidgetFactory.#cctor">
            <summary></summary>
            <exception cref="T:System.TypeInitializationException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpSheets.Widgets.WidgetSetup.FontCollection.#ctor(SharpSheets.Fonts.FontPath,SharpSheets.Fonts.FontPath,SharpSheets.Fonts.FontPath,SharpSheets.Fonts.FontPath)">
            <summary>
            Constructor for FontCollection.
            </summary>
            <param name="regular">Standard font to use for text without formatting.</param>
            <param name="bold">Font to use for bold text.</param>
            <param name="italic">Font to use for italic text.</param>
            <param name="bolditalic">Font to use for bold-italic text.</param>
        </member>
        <member name="M:SharpSheets.Widgets.WidgetSetup.#ctor(SharpSheets.Layouts.Margins,System.Single,System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},System.Nullable{SharpSheets.Colors.Color},SharpSheets.Fonts.FontPathGrouping,SharpSheets.Widgets.WidgetSetup.FontCollection,System.Single,SharpSheets.Shapes.IDetail,System.Nullable{SharpSheets.Layouts.Dimension},System.Nullable{SharpSheets.Layouts.Position},SharpSheets.Layouts.Layout,SharpSheets.Layouts.Arrangement,SharpSheets.Layouts.LayoutOrder,System.Boolean)">
            <summary>
            Constructor for WidgetSetup.
            </summary>
            <param name="_margins" default="(0,0,0,0)">Margins to apply to the widget area before drawing.
            These margins will be factored into the minimum size of the widget if
            autosizing is used.</param>
            <param name="linewidth">Default line width for this widget and its children.</param>
            <param name="foreground" default="Black">Foreground color for this widget and its children.
            This color is commonly used for outlines and detailing.</param>
            <param name="background" default="White">Background color for this widget and its children.
            This color is commonly used to fill in background areas.</param>
            <param name="midtone" default="Gray">Midtone color for this widget and its children.
            This color is commonly used for secondary details.</param>
            <param name="textColor" default="Black">Text color for this widget and its children.</param>
            <param name="font">Fonts to use for text in this widget and its children.
            This value can be provided as 1 to 4
            font names or paths, specifying Regular, Bold, Italic, and Bold Italic font styles.
            Fonts are identified by name or path, searching first in the current directory,
            and then in the system font directory.</param>
            <param name="font_">FontCollection object for overriding specific font styles for
            this widget and its children.</param>
            <param name="gutter">Spacing between this widget's children, measured in points.</param>
            <param name="gutter_">Gutter style for this widget and its children.
            This style is used to draw detailing in the spaces between child widgets.</param>
            <param name="_size" default="1">Size of the widget, either as a absolute dimension (pt, cm, in),
            a relative size (in percent or arbitrary units), or auto-sized (with "auto"). If a size is provided,
            position should not be used.</param>
            <param name="_position">Position the widget as an inset of its parents area.
            Position is specified by an anchor point, width, height, and x and y offsets.
            The lengths can be expressed as absolute lengths (pt, cm, in), or percentages of the
            overall widget size. If this value is set, the size parameter will be ignored.</param>
            <param name="layout">Specifies the arrangement of child widgets on the page,
            either as rows or columns.</param>
            <param name="arrangement">Specifies the arrangement of the widgets children 
            in the available space, indicating whether the children should be arranged
            centrally, or to one end of, the available space.</param>
            <param name="order">Specifies the order that the widgets children should be drawn in 
            across the available space, allowing children to be drawn in reverse document order.</param>
            <param name="_diagnostic">Flag to indicate that schematic information is to
            be drawn for this widget, to help with design and debugging.</param>
        </member>
    </members>
</doc>
