# Markup Cookbook

This section contains a series of example Markup patterns and pattern snippets to help you get started with creating your own patterns.

## Basic Pattern Examples

Below is an example of each pattern type, containing the basic building blocks of that pattern with some toy graphical content.

### Widget

This simple widget just draws some text at the top of the area, while leaving the remaining space for child widgets.

``` Markup
<pattern type="widget" name="ExampleWidget">
		
	<desc> A very simple example widget. </desc>
	
	<args>
		<arg name="text" type="string" default="My Text"
			desc="Some text to draw at the top of the widget."/>
		<arg name="fontsize" type="float" default="10"
			desc="The fontsize for the widget text."/>
		<arg name="format" type="textformat" default="REGULAR"
			desc="The font format for the widget text."/>
	</args>
		
	<area name="remaining" margin="{height(text, format, fontsize) + gutter} 0 0 0"/>
		
	<textRect font-size="fontsize" font-style="format"
		alignment="TOP" justification="CENTRE"
		height-strategy="ASCENTDESCENT"
		>{text}</textRect>
		
</pattern>
```

### Box

This box simply draws a rectangular outline and allows the user to specify a border trim for the remaining area.

``` Markup
<pattern type="box" name="ExampleBox">
		
	<desc> A very simple example box. </desc>
	
	<args>
		<arg name="trim" type="ufloat" default="5"
			desc="The size of the inner border, in points."/>
	</args>
	
	<area name="remaining" margin="{trim}"/>
		
	<path fill="background"
		stroke="foreground" stroke-width="linewidth"
		d="M {left},{bottom}
		{right},{bottom}
		{right},{top}
		{left},{top}
		Z"/>
	
</pattern>
```

### Labelled Box

This labelled box simply creates a label area at the bottom of the box, whose height is a fraction of the overall box height.

``` Markup
<pattern type="labelledbox" name="ExampleLabelledBox">
		
	<desc> A very simple example labelled box. </desc>
	
	<args>
		<arg name="labelfrac" type="ufloat" default="0.2"
			desc="The size of the inner border, in points."
			validate="labelfrac > 0 &amp; labelfrac < 1"
			validate-message="The label fraction must be between 0 and 1 (exclusive)."/>
	</args>
	
	<area name="remaining"
		y="labelfrac * height"
		height="(1 - labelfrac) * height"/>
	<area name="label"
		height="labelfrac * height"/>
		
	<path fill="background"
		stroke="foreground" stroke-width="linewidth"
		d="M {left},{bottom}
		{right},{bottom}
		{right},{top}
		{left},{top}
		Z
		M {left} {bottom + labelfrac * height}
		H {right}"/>
	
</pattern>
```

### Titled Box

This titled box places the title text in a filled box at the bottom of the box area, and allows for adding space around the title text in that filled area.

``` Markup
<pattern type="titledBox" name="ExampleTitledBox">
		
	<desc> A very simple example titled box. </desc>
		
	<args>
		<arg name="spacing" type="float" default="2.0"
			desc="Spacing around title in header bar."/>
				
		<var name="titleHeight" value="len(parts) * fontsize + 2*spacing"/>
	</args>
		
	<area name="remaining" margin="0 0 {titleHeight} 0"/>
		
	<rect width="width" height="height"
		stroke="foreground" fill="background"/>
		
	<rect y="bottom" width="width" height="titleHeight"
		stroke="foreground" fill="foreground"/>
			
	<textRect y="bottom" width="width" height="titleHeight"
		text-color="background" font-size="fontsize" font-style="format"
		line-spacing="1.0" height-strategy="AscentDescent"
		alignment='centre' justification="centre"
		>{name}</textRect>
		
</pattern>
```

### Entried Shape

This entried shape simply creates a rectangle outline with a set of vertically arranged entry areas, each separated by a horizontal line.

``` Markup
<pattern type="entriedshape" name="ExampleEntriedArea">
		
	<desc> A very simple example entried shape. </desc>
	
	<args>
		<arg name="sizes" type="dimension[]" default="1" example="1,2,3"
			desc="The sizes for each of the vertically arranged entry areas."
			validate="len(sizes) > 0"
			validate-message="Must provide at least one size value."/>
	</args>
	
	<rect fill="background" stroke="foreground" stroke-width="linewidth"
		x="0%" y="0%" width="100%" height="100%"/>
		
	<div for-each="s in range(len(sizes))" size="sizes[s]">
		<line enabled="s>0"
			stroke="foreground" stroke-width="linewidth"
			x1="0%" x2="100%" y1="100%" y2="100%"/>
	
		<area name='{"entry" + str(s)}' margin="linewidth/2"/>
	</div>
	
</pattern>
```

### Bar

This example bar draws a simple rectangular shape around the bar areas, and allows the user to specify what proportion of the bar is taken up by the label area.

``` Markup
<pattern type="bar" name="ExampleBar" example-size="100 20">
	
	<desc> A very simple example bar. </desc>
	
	<args>
		<arg name="labelFraction" type="ufloat" default="0.5"
			desc="The fraction of the bar width taken up by the label area."
			validate="labelFraction > 0.0 &amp; labelFraction < 1.0"
			validate-message="Label fraction must be a value greater than 0 and less than 1."/>
	</args>
		
	<area name="label"
		x="left"
		width="labelFraction * width"/>
	<area name="remaining"
		x="labelFraction * width"
		width="(1 - labelFraction) * width"/>
		
	<rect stroke="foreground" stroke-width="linewidth" fill="background"
		x="left"
		width="labelFraction * width"
		height="height"/>
	<rect stroke="foreground" stroke-width="linewidth" fill="background"
		x="labelFraction * width"
		width="(1 - labelFraction) * width"
		height="height"/>
		
</pattern>
```

### UsageBar

This example usage bar draws a simple rectangular shape around the bar areas, and allows the user to specify what proportion of the bar is taken up by the label area. The entry areas take up half of the remaining space each.

``` Markup
<pattern type="usagebar" name="ExampleBar" example-size="100 20">
	
	<desc> A very simple example bar. </desc>
	
	<args>
		<arg name="labelFraction" type="ufloat" default="0.5"
			desc="The fraction of the bar width taken up by the label area."
			validate="labelFraction > 0.0 &amp; labelFraction < 1.0"
			validate-message="Label fraction must be a value greater than 0 and less than 1."/>
	</args>
		
	<area name="label"
		x="left"
		width="labelFraction * width"/>
	<area name="entry1"
		x="labelFraction * width"
		width="0.5 * (1 - labelFraction) * width"/>
	<area name="entry2"
		x="0.5 * (labelFraction * width + width)"
		width="0.5 * (1 - labelFraction) * width"/>
		
	<rect stroke="foreground" stroke-width="linewidth" fill="background"
		x="left"
		width="labelFraction * width"
		height="height"/>
	<rect stroke="foreground" stroke-width="linewidth" fill="background"
		x="labelFraction * width"
		width="0.5 * (1 - labelFraction) * width"
		height="height"/>
	<rect stroke="foreground" stroke-width="linewidth" fill="background"
		x="0.5 * (labelFraction * width + width)"
		width="0.5 * (1 - labelFraction) * width"
		height="height"/>
		
</pattern>
```

### Detail

This example detail simply draws a horizontal or vertical line, depending on the detail layout, at twice the current line width. The user can optionall set the color of the line, which will default to using the current foreground color.

``` Markup
<pattern type="detail" name="ExampleDetail" example-size="100 10">
		
	<desc> A very simple example detail. </desc>
		
	<args>
		<arg name="stroke" type="color" optional="true"
			desc="An optional color for the detail line."/>
			
		<var name="finalStroke" value="stroke ?? foreground"/>
	</args>
		
	<!-- Drawing for the "rows" layout. -->
	<line enabled='layout == "rows"'
		x1="left" x2="right" y1="height/2" y2="height/2"
		stroke-width="linewidth * 2" stroke="finalStroke"/>
		
	<!-- Drawing for the "columns" layout. -->
	<line enabled='layout == "columns"'
		x1="width/2" x2="width/2" y1="bottom" y2="top"
		stroke-width="linewidth * 2" stroke="finalStroke"/>
		
</pattern>
```


## Lined Widgets

The pattern below can be used as a basis for creating your own widgets with a similar layout to the other lined widgets, such as [LinedField](widget::LinedField). It uses an optional row height argument, and row/column spacing specified as a float tuple.

``` Markup
<pattern type="widget" name="LinedExample" gutter="spacing[1]">

	<desc> A description of the widget behaviour. </desc>

	<args>
		<arg name="rows" type="uint" default="1"
			desc="Number of rows to include."/>
		<arg name="height" variable="rowheight" type="Dimension"
			optional="true"
			desc="Height of each row."/>
		<arg name="spacing" type="ufloat[2]" default="3,3"
			desc="Spacing between columns and rows."/>
	</args>

	<div for-each="i in range(rows)"
		size="exists(rowheight) ? rowheight : fromrelative(1)"
		layout="columns" gutter="spacing[0]">

		<div repeat="2" size="fromrelative(1)">
			<line x1="left" y1="-linewidth/2" x2="right" y2="-linewidth/2"
				stroke="foreground" stroke-width="linewidth"/>
		</div>
	</div>
	
</pattern>
```


## Text Field Arguments

Below is an example group argument for collecting the data necessary for arranging a text field, to match the style used by the built-in SharpSheets widgets, such as [LinedField](widget::LinedField) or [Section](widget::Section).

``` Markup
<!-- Field Arguments and Variables -->			
<grouparg name="field">
	<arg name="fontsize" type="ufloat" default="0"
		desc="Font size for text fields, must be greater than or equal to zero (0 for autosizing)."/>
	<arg name="font" type="TextFormat" default="REGULAR"
		desc="Font format for text fields."/>
	<arg name="justification" type="Justification" default="LEFT"
		desc="Justification for text fields."/>
	<arg name="rich" type="bool" default="false"
		desc="Flag to indicate whether text fields should have rich text features enabled."/>
	<arg name="color" type="Color" optional="true"
		desc="Color for text in text fields."/>
</grouparg>

<var name="fieldFinalColor" value="field.color ?? textcolor"/>
```