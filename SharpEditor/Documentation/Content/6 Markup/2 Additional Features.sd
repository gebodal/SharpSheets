# Additional Markup Features

The following are extra information about, and additional features of, the Markup system to help give you greater control over your Markup patterns and the resulting designs.

## Clipping Paths

Clipping paths, the targets of `clip-path` attributes available on many graphical elements, can be expressed in two primary ways: either as identifiable shape geometry elements (e.g. `<circle>`, `<rect>`, `<path>`, etc.), or as identifiable `<clipPath>` [elements](Markup::clipPath) containing said shape geometries.

In the case of identifiable shape elements, these elements may be part of the graphics drawn to the document (i.e. they do not have to be inside a `<defs>` [elements](Markup::defs)). As such, a shape may be used both as graphical content and clipping path.

``` Markup
<circle id="myCircle" cx="width/2" cy="height/2" r="width/2"/>

<g clip-path="#myCircle">
	<!-- Graphical content here. -->
</g>
```

The `<clipPath>` element can be used to collect a series of geometries to use as a single clipping path. This element, by itself, will not draw any content to the document, or result in any clipping applied to other graphical elements. As such, it is advisable to place any `<clipPath>` elements inside a `<defs>` element to separate it from graphical content. `<clipPath>` elements are only used as the targets of `clip-path` attributes on other graphical elements:

``` Markup
<defs>
	<clipPath id="myClipPath">
		<circle cx="width/2" cy="height/2" r="width/2"/>
		<rect x="width/4" y="bottom" width="width/2" height="height"/>
	</clipPath>
</defs>

<g clip-path="#myClipPath">
	<!-- Graphical content here. -->
</g>
```

The contents of a `<clipPath>` element must all be shape elements (e.g. `<circle>`, `<path>`, etc.), and will be applied sequentially -- this means that only areas in the overlap of all child elements of the `<clipPath>` will available for painting.


## For Each

Various Markup elements can make use of a `for-each` attribute, which must have a value of the form: `"[loopVar] in [arrayExpr]"`, where "[loopVar]" is replaced with a variable name, and "[arrayExpr]" is replaced with an expression whose return type is an array.

An element with such a for-each attribute will be repeated, once for each entry in the provided array expression. Each such entry will be available to each repetition of the element via the provided loop variable name.

This setup allows you to repeat elements programatically, such that each element can change its content or properties based on a value in an array.

Graphical elements (i.e. `<line>`, or `<rect>`) will be repeated within the same canvas area, whereas `<div>` elements will cause additional divisions to be included in the grid layout calculations.

Additionally, `<div>` elements have a `repeat` attribute, which accepts an integer value. The entire element, including any `for-each` attributes, will be repeated this many times, adding divisions to the grid layout calculations.

## Div Canvas Areas

You can change the coordinate system of a `<div>` [elements](Markup::div) by specifying a `canvas` attribute for that `<div>`.

A `canvas` is specified as a `width height` pair of numbers (which must be constant values, rather than expressions). This size will then be used as the coordinate basis for the div. This means that the coordinate system within the div element will act as if the div area is `width` units wide and `height` units tall -- regardless of the actual geometry of the div area.

So, if canvas is given as `50 100`, then the point `25 50` will be in the centre of the div egardless of the actual div area size. This is useful for drawing complex shapes where expressing each coordinate as an expression would be difficult or overly verbose.

Note however that this does not impose any restrictions on the aspect ratio of the div area. As such, any geometry will be transformed to match the actual div area. If you do wish to keep the aspect ratio of the canvas, this can be done by specifying the `aspect-ratio` attribute for the `<div>` element.

### Canvas Slicing

The `<slicing>` [element](Markup::slicing) can be used to change the meaning of the `<div>` `canvas` attribute by dynamically scaling the area without distorting certain areas.

A `<slicing>` element is only valid as the child of a `<div>` element which has a value for its `canvas` attribute.

The most common form of this scaling is "9-slice scaling", where the area is divided into 9 parts (with two vertical lines, and two horizontal lines). When the area is resized: the 4 corner divisions are kept at the same scale and proportions; the top and bottom centre divisions are scaled horizontally but kept at the same height; the left and right centre divisions are scaled vertically but kept at the same width; and the centre division is scaled horizontally and vertically to fill the remaining area. In this way, the area is distorted only in certain areas, allowing details at the corners to be kept in proportion regardless of the final area dimensions.

In Markup, this idea is generalised to allow for any number of dividing lines to be drawn horizontally or vertically. These will then be used such that each odd-numbered division (with the first division indexed as 1) has a fixed length along the corresponding dimension. Areas which fall into fixed-length regions in both axes are therefore undistorted when the area is rescaled.

These dividing lines can be specified in one of two ways: as lists of x and y coordinates (the `xs` and `ys` attributes of the `<slicing>` [element](Markup::slicing)), or as a margin area (using the `border` attribute) to produce the classic 9-slice rescaling. If both are specified, the `xs` and `ys` attributes will override the corresponding dimension of the `border` margins.


## Styled Div Elements

You can include shape styles in your markup patterns -- either shapes specified in the user configuration file that is using your pattern, or manually specified by you in the markup pattern directly. These are referred to as "styled div elements", and use a set of element types that have some special syntax governing their use.

The styled div elements available are as follows: `<box>` (see [here](Markup::box)), `<labelledBox>` (see [here](Markup::labelledBox)), `<bar>` (see [here](Markup::bar)), and `<usageBar>` (see [here](Markup::usageBar)).

The shape style to be used can be specified either using a variable name and the `href` attribute, or by specifying the style and its arguments directly using a series of attributes with the format `outline.[argument_name]`.

``` Markup
<arg name="shape" type="box"/>

<box href="shape">
	<!-- Content here. -->
</box>

<!-- Or... -->

<box outline.style="Rounded" outline.bevel="5">
	<!-- Content here. -->
</box>
```

The argument types available to support this use of shape variables are as follows:

``` Unknown
box
labelledbox
titledbox
bar
usagebar
detail
```

In order to draw content inside these shapes, according to their various remaining areas, each styled div may only have a specific set of child elements: `<box>`, `<labelledBox>`, and `<bar>` elements may have a `<remaining>` child; `<labelledBox>`, `<bar>`, and `<usageBar>` elements may have a `<label>` child, and the `<usageBar>` element may have an `<entry1>` child and an `<entry2>` child. Only one child of a given element type should be provided for each styled div. The children may be provided in any order, and will be drawn to the page in their markup document order.

``` Markup
<box href="shape">
	<remaining>
		<!-- Content here. -->
	</remaining>
</box>
```


## Named Children

Widget patterns may have named children (see [here](Tutorial)), which can be drawn at specified locations within the pattern area.

To declare a named child for a pattern, you simply create an argument with the `widget` type. Note that this argument will have to be optional to avoid missing parameter exceptions (as there is no way to specify a child widget example value), and therefore its existence should be checked before it is used (as a child may not be provided in the configuration file).

A named child is drawn using a `<child>` [element](Markup::child). This element has all the same attributes as a `<div>` [element](Markup::div), and can be positioned as such, along with margins and other grid-system specifics. The `size` of the child will not be taken into account during layout.

This would look something like:

``` Markup
<arg name="myChild" type="widget" optional="true"/>

<child enabled="exists(myChild)" href="myChild"/>
```

Note that named children may also be Numbered, by specifying the `format="NUMBERED"` attribute for the argument. In this case, the `optional` requirement no longer applies (as if no child is provided in the configuration, the array will simply have a length of zero).

``` Markup
<arg name="myChildren" type="widget[]" format="NUMBERED"/>

<div for-each="c in myChildren">
	<child href="c"/>
</div>
```

In this way, you may nest custom user content within your custom widget patterns.


## preserveAspectRatio

The `preserveAspectRatio` attribute controls how a "viewport" (the area where a drawing occurs) adjusts when the aspect ratio of the viewport does not match the aspect ratio of the content. This behaviour follows that found in SVG, and you are encouraged to look at the corresponding documentation for additional examples.

The `preserveAspectRatio` attribute has two main parts:

Alignment: This specifies how the content is aligned within the viewport. It has values like `xMinYMin`, `xMidYMid`, `xMaxYMax`, etc., representing different alignments along the x and y axes.

Meet/Slice: This component determines whether the content should be scaled to fit the viewport ("meet") or whether it should overflow or be clipped ("slice").

Some examples of how the attribute can be set are as follows:

If the value is `none`, then the content will not maintain its aspect ratio and may be distorted to fit the viewport.

``` Markup
<elem preserveAspectRatio="none"/>
```

The content can also be scaled uniformly to maintain its aspect ratio and be centered within the viewport. Here the entire content is visible, and there may be empty space in the viewport if the aspect ratios do not match.

``` Markup
<elem preserveAspectRatio="xMidYMid meet"/>
```

The content can be scaled to maintain its aspect ratio, such that it overflows or is clipped to fit within the viewport. The entire viewport will then be filled, but some parts of the content might be cropped.

``` Markup
<elem preserveAspectRatio="xMidYMid slice"/>
```