<!-- 
	Copyright (c) 2009 Daniel Grunwald
	
	Permission is hereby granted, free of charge, to any person obtaining a copy of this
	software and associated documentation files (the "Software"), to deal in the Software
	without restriction, including without limitation the rights to use, copy, modify, merge,
	publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
	to whom the Software is furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in all copies or
	substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
	FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.
-->
<UserControl x:Class="SharpEditor.SharpDocumentEditor"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:SharpEditor"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
	xmlns:sharpeditor="clr-namespace:SharpEditor"
	BorderThickness="0"
	>

	<UserControl.Resources>
		<Image x:Key="CutIcon" Source="Images/Cut3.png"/>
		<Image x:Key="CopyIcon" Source="Images/Copy2.png"/>
		<Image x:Key="PasteIcon" Source="Images/Paste2.png"/>

		<Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="OverridesDefaultStyle" Value="True" />
			<Setter Property="Grid.IsSharedSizeScope" Value="true" />
			<Setter Property="HasDropShadow" Value="True" />
			<Setter Property="MenuItem.Foreground" Value="LightGray"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ContextMenu}">
						<Border x:Name="Border" Background="#1e1e1e" BorderThickness="0.75">
							<Border.BorderBrush>
								<SolidColorBrush Color="LightGray" />
							</Border.BorderBrush>
							<!--<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />-->
							<StackPanel KeyboardNavigation.DirectionalNavigation="Cycle">
								<!--
								<MenuItem Command="ApplicationCommands.Cut">
									<MenuItem.Icon>
										<Image Source="Images/Cut3.png"/>
									</MenuItem.Icon>
								</MenuItem>
								<MenuItem Command="Copy">
									<MenuItem.Icon>
										<Image Source="Images/Copy2.png"/>
									</MenuItem.Icon>
								</MenuItem>
								<MenuItem Command="Paste">
									<MenuItem.Icon>
										<Image Source="Images/Paste2.png"/>
									</MenuItem.Icon>
								</MenuItem>
								<MenuItem Command="Delete">
									<MenuItem.Icon>
										<Image Source="Images/Delete2.png"/>
									</MenuItem.Icon>
								</MenuItem>
								-->
								<ItemsPresenter
									x:Name="ItemsPresenter"
									KeyboardNavigation.DirectionalNavigation="Cycle"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									KeyboardNavigation.TabNavigation="Cycle"/>
							</StackPanel>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="HasDropShadow" Value="true">
								<Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		
		<!--<SolidColorBrush x:Key="TestColorBrush" Color="{Binding Source={x:Static sharpeditor:SharpDataManager.Instance}, Path=TestColor}"/>-->


		<Style TargetType="Button" x:Key="FindButton" >
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Margin" Value="2"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border x:Name="border"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								SnapsToDevicePixels="True">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
						</Border>

						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background">
									<Setter.Value>
										<SolidColorBrush Color="#d3d3d3" Opacity="0.2" />
									</Setter.Value>
								</Setter>
								<Setter Property="BorderBrush" TargetName="border">
									<Setter.Value>
										<SolidColorBrush Color="#d3d3d3" Opacity="0.5" />
									</Setter.Value>
								</Setter>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style TargetType="ToggleButton" x:Key="FindToggleButton">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Margin" Value="2"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border x:Name="border"
								Padding="{TemplateBinding Padding}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								SnapsToDevicePixels="True">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
						</Border>

						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background">
									<Setter.Value>
										<SolidColorBrush Color="#d3d3d3" Opacity="0.2" />
									</Setter.Value>
								</Setter>
								<Setter Property="BorderBrush" TargetName="border">
									<Setter.Value>
										<SolidColorBrush Color="#d3d3d3" Opacity="0.5" />
									</Setter.Value>
								</Setter>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsChecked" Value="True"/>
									<Condition Property="IsMouseOver" Value="False"/>
								</MultiTrigger.Conditions>
								<Setter Property="Background">
									<Setter.Value>
										<SolidColorBrush Color="#d3d3d3" Opacity="0.2" />
									</Setter.Value>
								</Setter>
							</MultiTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style TargetType="{x:Type TextBox}" x:Key="SharpTextBox">
			<!--
			<Setter Property="SnapsToDevicePixels" Value="True"/>
			<Setter Property="OverridesDefaultStyle" Value="True"/>
			<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
			<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
			<Setter Property="MinWidth" Value="120"/>
			<Setter Property="MinHeight" Value="20"/>
			<Setter Property="AllowDrop" Value="true"/>
			-->
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TextBox}">
						<ControlTemplate.Resources>
							<SolidColorBrush x:Key="SelectedBorderBrush" Opacity="0.5" Color="{Binding BorderBrush.Color, RelativeSource={RelativeSource TemplatedParent}}"/>
						</ControlTemplate.Resources>
						<Border x:Name="border"
							Padding="{TemplateBinding Padding}"
							BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="True" ToolTip="{TemplateBinding ToolTip}">
							<ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" ToolTipService.IsEnabled="False"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Opacity" TargetName="border" Value="0.56"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource SelectedBorderBrush}"/>
							</Trigger>
							<Trigger Property="IsKeyboardFocused" Value="true">
								<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource SelectedBorderBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--
		<Style TargetType="TextBox">
			<Style.Resources>
				<VisualBrush x:Key="CueBannerBrush" AlignmentX="Left" AlignmentY="Center" Stretch="None">
					<!-https://stackoverflow.com/a/7204178/11002708->
					<VisualBrush.Visual>
						<Label Content="Find..." Foreground="LightGray"/>
					</VisualBrush.Visual>
				</VisualBrush>
			</Style.Resources>

			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderBrush" Value="LightGray"/>

			<Style.Triggers>
				<Trigger Property="Text" Value="{x:Static sys:String.Empty}">
					<Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
				</Trigger>
				<Trigger Property="Text" Value="{x:Null}">
					<Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
				</Trigger>

				<Trigger Property="Validation.HasError" Value="True">
					<Setter Property="BorderBrush" Value="Red"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		-->

		<SolidColorBrush x:Key="WindowBackgroundBrush" Color="Red"/>
		<SolidColorBrush x:Key="AccentColorBrush" Color="Green"/>
		<SolidColorBrush x:Key="IdealForegroundColorBrush" Color="Blue"/>


		<Style TargetType="avalonEdit:SearchPanel">
			<Setter Property="Background" Value="Orange"/>
			<Setter Property="ToolTipService.IsEnabled" Value="False"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type avalonEdit:SearchPanel}">
						<Border Background="#2d2d30"
							HorizontalAlignment="Right" VerticalAlignment="Top"
							Margin="5" Padding="5" BorderThickness="0" Cursor="Arrow">
							<StackPanel Orientation="Vertical" Margin="5,0,0,0">
								<StackPanel Orientation="Horizontal" Height="Auto" Margin="2">
									<TextBox Name="PART_searchTextBox" Focusable="True"
										Background="#1e1e1e"
										Foreground="White" BorderThickness="1"
										Width="150" Height="Auto" CaretBrush="White"
										Margin="0" Padding="2"
										VerticalAlignment="Center" ToolTipService.IsEnabled="False"
										FontFamily="{Binding FontFamily, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:SharpDocumentEditor}}}"
										FontSize="{Binding FontSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:SharpDocumentEditor}}}"
										Style="{StaticResource SharpTextBox}"
										ToolTip="Search pattern">

										<TextBox.Text>
											<Binding Path="SearchPattern" 
													RelativeSource="{RelativeSource TemplatedParent}"
													NotifyOnValidationError="True"
													UpdateSourceTrigger="PropertyChanged">
												<Binding.ValidationRules>
													<ExceptionValidationRule/>
												</Binding.ValidationRules>
											</Binding>
										</TextBox.Text>
									</TextBox>
									<!-- FindPrevious button -->
									<Button Style="{DynamicResource FindButton}" x:Name="FindPreviousButton"
										Command="avalonEdit:SearchCommands.FindPrevious" 
										ToolTip="{Binding Localization.FindPreviousText, RelativeSource={RelativeSource TemplatedParent}}" 
										Margin="4,0,0,0" Padding="0" Height="20" Width="20"
										VerticalAlignment="Center"
										BorderThickness="0" BorderBrush="Transparent">
										<Image Source="Images/Previous.png" Height="16"/>
									</Button>
									<!-- FindNext button -->
									<Button Style="{DynamicResource FindButton}" x:Name="FindNextButton"
										Command="avalonEdit:SearchCommands.FindNext" 
										ToolTip="{Binding Localization.FindNextText, RelativeSource={RelativeSource TemplatedParent}}" 
										Margin="2,0,0,0" Padding="0" Height="20" Width="20"
										VerticalAlignment="Center"
										BorderThickness="0" BorderBrush="Transparent">
										<Image Source="Images/Next.png" Height="16"/>
									</Button>
									<!-- Search Panel close button -->
									<Button Style="{DynamicResource FindButton}" x:Name="CloseButton"
										Command="avalonEdit:SearchCommands.CloseSearchPanel"
										ToolTip="Close"
										Margin="0" Padding="0" Height="20" Width="20"
										BorderThickness="0"
										VerticalAlignment="Center"
										VerticalContentAlignment="Center" HorizontalContentAlignment="Center"
										BorderBrush="Transparent">
										<Grid Width="20" Height="20" Margin="0" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="False">
											<Canvas Width="20" Height="20" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent">
												<Path Data="M 6,6 L 14,14 M 6,14 L 14,6" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" ClipToBounds="False" Stroke="LightGray" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>
											</Canvas>
										</Grid>
									</Button>
								</StackPanel>

								<StackPanel Orientation="Horizontal" Height="Auto" Margin="2">
									<!-- MatchCase button (Style="{DynamicResource MetroCircleToggleButtonStyle}")-->
									<ToggleButton Style="{DynamicResource FindToggleButton}"
										ToolTip="{Binding Localization.MatchCaseText, RelativeSource={RelativeSource TemplatedParent}}"
										IsChecked="{Binding MatchCase, RelativeSource={RelativeSource TemplatedParent}}"
										Margin="0" Padding="1"
										HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
										<Grid Width="22" Height="22" HorizontalAlignment="Center" VerticalAlignment="Center">
											<TextBlock Text="Aa" Foreground="LightGray" Margin="0,0,0,1" Background="Transparent" FontWeight="Bold" FontFamily="Consolas,Courier New,Courier" VerticalAlignment="Center" TextAlignment="Center" HorizontalAlignment="Stretch"/>
										</Grid>
									</ToggleButton>
									<!-- WholeWords button -->
									<ToggleButton Style="{DynamicResource FindToggleButton}"
										ToolTip="{Binding Localization.MatchWholeWordsText, RelativeSource={RelativeSource TemplatedParent}}"
										IsChecked="{Binding WholeWords, RelativeSource={RelativeSource TemplatedParent}}"
										Margin="4,0" Padding="1"
										HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
										<Grid Width="22" Height="22" HorizontalAlignment="Center" VerticalAlignment="Center">
											<TextBlock Text="ab" Foreground="LightGray" Margin="0,0,0,1" Background="Transparent" FontWeight="Bold" FontFamily="Consolas,Courier New,Courier" VerticalAlignment="Center" TextAlignment="Center" HorizontalAlignment="Stretch"/>
											<Path Data="M 0,0 L 10,0 M 0,10 L 10,10" Stretch="Fill" Margin="0,2,0,2" ClipToBounds="False" Stroke="LightGray" StrokeThickness="2" HorizontalAlignment="Center"/>
										</Grid>
									</ToggleButton>
									<!-- UseRegex button -->
									<ToggleButton Style="{DynamicResource FindToggleButton}"
										ToolTip="{Binding Localization.UseRegexText, RelativeSource={RelativeSource TemplatedParent}}"
										IsChecked="{Binding UseRegex, RelativeSource={RelativeSource TemplatedParent}}"
										Margin="0" Padding="1"
										HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
										<Grid Width="22" Height="22" HorizontalAlignment="Center" VerticalAlignment="Center">
											<TextBlock Text=".*" Foreground="LightGray" Margin="0,0,0,1" Background="Transparent" FontWeight="Bold" FontFamily="Consolas,Courier New,Courier" VerticalAlignment="Center" TextAlignment="Center" HorizontalAlignment="Stretch"/>
										</Grid>
									</ToggleButton>
								</StackPanel>
							</StackPanel>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>

			<Style.Triggers>
				<Trigger Property="Validation.HasError" Value="True">
					<Setter Property="Background" Value="Yellow"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style TargetType="{x:Type ListBoxItem}" x:Key="SharpErrorListBoxItem">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ListBoxItem">
						<Border 
							Padding="{TemplateBinding Control.Padding}"
							BorderBrush="Transparent"
							BorderThickness="0"
							Background="Transparent"
							Name="Bd"
							SnapsToDevicePixels="True">
							<ContentPresenter Content="{TemplateBinding ContentControl.Content}"
								ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
								ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
								HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
						</Border>
						<ControlTemplate.Triggers>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="Selector.IsSelectionActive" Value="False"/>
									<Condition Property="Selector.IsSelected" Value="True"/>
								</MultiTrigger.Conditions>
								<Setter Property="Panel.Background" TargetName="Bd">
									<Setter.Value>
										<SolidColorBrush Color="White" Opacity="0.25"/>
									</Setter.Value>
								</Setter>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="Selector.IsSelectionActive" Value="True"/>
									<Condition Property="Selector.IsSelected" Value="True"/>
								</MultiTrigger.Conditions>
								<Setter Property="Panel.Background" TargetName="Bd">
									<Setter.Value>
										<SolidColorBrush Color="White" Opacity="0.5"/>
									</Setter.Value>
								</Setter>
							</MultiTrigger>
							<Trigger Property="UIElement.IsMouseOver" Value="True">
								<Setter Property="Panel.Background" TargetName="Bd">
									<Setter.Value>
										<SolidColorBrush Color="White" Opacity="0.4"/>
									</Setter.Value>
								</Setter>
							</Trigger>
							<!--<Trigger Property="UIElement.IsEnabled" Value="False">
								<Setter Property="TextElement.Foreground" TargetName="Bd" Value="Blue"/>
							</Trigger>-->
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>


	</UserControl.Resources>

	<DockPanel Background="#2d2d30" GotFocus="EditorGotFocus">
		<StatusBar DockPanel.Dock="Bottom" Background="#2d2d30" Foreground="LightGray">
			<StatusBar.ItemsPanel>
				<ItemsPanelTemplate>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
					</Grid>
				</ItemsPanelTemplate>
			</StatusBar.ItemsPanel>
			<StatusBarItem Grid.Column="0">
				<TextBox
					x:Name="TextZoomTextBox"
					Width="50"
					Margin="2,1"
					Background="#1c1c1f"
					Foreground="LightGray"
					BorderThickness="1"
					BorderBrush="#1c1c1f"
					VerticalContentAlignment="Center"
					TextAlignment="Left"
					Text="100%"
					ToolTip="Text Zoom Level"
					PreviewKeyDown="TextZoomBoxKeyDown"
					PreviewTextInput="ValidateTextZoomBox"
					LostFocus="TextZoomBoxLostFocus"
					MouseWheel="TextZoomBoxMouseWheel"/>
			</StatusBarItem>
			<StatusBarItem Grid.Column="1">
				<StackPanel Orientation="Horizontal" Margin="20,0">
					<TextBlock Name="CursorLineText" Width="50" Margin="20,0"/>
					<TextBlock Name="CursorColText" Width="50" Margin="20,0"/>
				</StackPanel>
			</StatusBarItem>
			<StatusBarItem Grid.Column="2"/>
			<StatusBarItem Grid.Column="3" Name="BackgroundMessages" MouseDown="ErrorStatusClick" Foreground="LightGray" Visibility="Collapsed">
				<TextBlock Name="BackgroundMessageText" Margin="30,0">Parsing...</TextBlock>
			</StatusBarItem>
			<StatusBarItem Grid.Column="4" Name="ErrorStatus" MouseDown="ErrorStatusClick" Background="#c00000" Foreground="Black" Visibility="Collapsed">
				<StackPanel Orientation="Horizontal" Margin="20,0">
					<Image Source="Images/Exclamation.png" Height="16" Margin="0,0,3,0"/>
					<TextBlock Name="ErrorCount" Margin="10,0,5,0"/>
					<ToggleButton x:Name="ErrorPopupToggleButton" Click="ErrorPopupClick">
						<ToggleButton.Template>
							<ControlTemplate TargetType="ToggleButton">
								<Border x:Name="BBd" Background="Transparent" BorderThickness="0" Padding="4,5">
									<Path VerticalAlignment="Center" Fill="Black" Opacity="1"
										Data="M 0 6 L 6 0 L 12 6 Z"/>
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="IsMouseOver" Value="True">
										<Setter TargetName="BBd" Property="Background">
											<Setter.Value>
												<SolidColorBrush Color="Black" Opacity="0.2"/>
											</Setter.Value>
										</Setter>
									</Trigger>
									<Trigger Property="IsChecked" Value="True">
										<Setter TargetName="BBd" Property="Background">
											<Setter.Value>
												<SolidColorBrush Color="Black" Opacity="0.2"/>
											</Setter.Value>
										</Setter>
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</ToggleButton.Template>
					</ToggleButton>
					<Popup x:Name="ErrorPopup"
						   PlacementTarget="{Binding ElementName=ErrorStatus}"
						   Placement="Top"
						   StaysOpen="False" IsOpen="False"
						   Closed="ErrorPopupClosed">
						<Border Background="#2d2d30" MaxWidth="400" MaxHeight="500">
							<ListBox Name="ErrorPopupListBox"
									ScrollViewer.VerticalScrollBarVisibility="Auto"
									ScrollViewer.HorizontalScrollBarVisibility="Disabled"
									 Background="#2d2d30">
								<ListBox.ItemTemplate>
									<DataTemplate>
										<Grid Background="Transparent">
											<Grid.ColumnDefinitions>
												<ColumnDefinition MinWidth="30" Width="Auto" />
												<ColumnDefinition Width="*" />
											</Grid.ColumnDefinitions>
											<TextBlock Grid.Column="0"
												Text="{Binding Line, Mode=OneWay}"
												Margin="5"
												HorizontalAlignment="Center"
												Foreground="LightGray"/>
											<TextBlock Grid.Column="1"
												Text="{Binding Message, Mode=OneWay}"
												Margin="5"
												Foreground="LightGray"
												TextWrapping="Wrap"/>
										</Grid>
									</DataTemplate>
								</ListBox.ItemTemplate>
								<ListBox.ItemContainerStyle>
									<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource SharpErrorListBoxItem}">
										<EventSetter Event="MouseDoubleClick" Handler="ErrorPopupItemMouseDoubleClick"/>
									</Style>
								</ListBox.ItemContainerStyle>
							</ListBox>
						</Border>
					</Popup>
				</StackPanel>
			</StatusBarItem>
		</StatusBar>
		
		<Grid Name="MainGrid">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" MinWidth="150"/>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition Width="*" MinWidth="150"/>
			</Grid.ColumnDefinitions>
			<avalonEdit:TextEditor
				Grid.Column="0"
				Name="textEditor"
				FontFamily="Consolas"
				FontSize="12pt"
				HorizontalScrollBarVisibility="Auto"
				VerticalScrollBarVisibility="Auto"
				Background="#1e1e1e"
				Foreground="White"
				ToolTipService.IsEnabled="False"
				PreviewMouseWheel="OnTextPreviewMouseWheel"
				PreviewMouseRightButtonDown="OnTextPreviewRightMouseDown"
				PreviewKeyDown="OnPreviewKeyDown">
				<!--PreviewMouseWheel="OnPreviewMouseWheel"-->
				<avalonEdit:TextEditor.ToolTip>
					<ToolTip Name="TextEditorToolTip" Placement="Mouse" Background="#424245" Foreground="White" BorderThickness="0.75" MaxWidth="600">
						<StackPanel Name="ToolTipPanel" Orientation="Vertical" MinWidth="200"/>
					</ToolTip>
				</avalonEdit:TextEditor.ToolTip>
			</avalonEdit:TextEditor>
			<GridSplitter Grid.Column="1" Name="Splitter" Background="#2d2d30" Width="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
			<DockPanel Name="DesignerHolder" Grid.Column="2">
				<sharpeditor:DesignerArea
					x:Name="DesignerArea"
					CanvasAreaDoubleClick="OnCanvasDoubleClick"
					CanvasMouseMove="OnCanvasMouseMove"/>
			</DockPanel>
		</Grid>
	</DockPanel>
</UserControl>