# Form Fields

An important part of SharpSheets is the ability to create form fillable PDF documents which can easily be reused for different purposes, either as digital or physical game aids.

A form fillable PDF document is one which contains text fields and other interactive features which can be edited and saved by the user in a lrge number of PDF viewing applications.

For the purposes of SharpSheets, there are three kinds of form fields:

### Text Fields

Text fields allow users to input their own free text into PDF documents. The allowed inputs of the field can be specified, meaning that a field can be restricted to only contain numbers, or allow any text strings (these are the features currently implemented in SharpSheets).

Text fields in PDF can either have a specified font size, or a dynamic font size. A dynamic font size is specified by setting the field font size to zero. This convention is maintained in SharpSheets, and will work when setting the font size of [field](widget::Field) widgets (and other widgets that utilise fields).

Text fields can be single-line, or multi-line. If a fixed font size is specified for a multi-line text field, this implies a limited number of lines of text.

Text fields can also have left, centre, or right justification. However, the text cannot be justified, and the vertical alignment of the text cannot be changed. In the case of multi-line fields, the text with always be top-aligned, and for single-line fields it will be centre-aligned.

In SharpSheets, Text fields use the same text format system as other text, as discussed in the documentation on [handling text](Tutorial/Handling Text).

Text fields are built in to many widget styles, but can also be included directly using the [field](widget::Field) widget.

### Check Fields

Check fields allow the user to toggle a binary switch (i.e. it can be "On" or "Off"). When "On", the field will display a symbol, which can be specified from a selection of options (see the [CheckType](enum::CheckType) enum type).

Check fields are built in to many widget styles, but can also be included directly using the [checkfield](widget::CheckField) widget.

### Image Fields

Image fields allow the user to include images from their file system in the document, such that the image will be embedded in the document should they choose to send it to a different computer.

Image fields can also be included using the [imagefield](widget::ImageField) widget.


## Comments on Using Form Fields

Each form field in a PDF document has a name. In SharpSheets, each of the fields has a unique name, which can be seen in the editor (if field highlighting is enabled) by hovering over the field in the designer viewer. This name can generally be influenced by setting certain properties in the configuration, but is dependent on the design of the widget. This unique naming (enforced as the document is drawn) means that the values of form fields can be imported from a pre-existing filled-in version of a document, potentially into a modified version. Note that if the field names have been changed via the configuration, this will not work. However, where possible, it is useful to consider this when assigning or designing field names.

All form fields in a PDF document are also ordered, and the nature of the SharpSheets layout algorithm aids in making this ordering as logical as possible. Remember that items in the configuration (and Markup) files are drawn in configuration order. This means that the layout of your configuration file can be modified to improve the ordering of your field fields in some circumstances. This is also an important factor to bear in mind when designing your own widgets.
