# Data Types

SharpSheets uses a number of data types for configuration properties, card subject arguments, and other data values. Below is a list of common data types and some rules governing their usage.

### Number

A Number is any integer or decimal number. A number can be positive or negative, and they can be specified with or without a decimal point, like so:

```
number: 1
number: 1.0
number: 1.5
number: 0.5
number: -2
number: -1.5
```

Numbers may not contain spaces.

### Integer

An Integer is any integer value. It can have positive or negative values, and must be specified as a sequence of digits (with or without a sign), without spaces:

```
integer: 1
integer: -2
integer: +100
```

Integers may not contain decimal points or spaces.

### Positive Number

A Positive Number follows all the same rules as a Number, with the added constraint that the value must be positive.

### Positive Integer

A Positive Integer follows all the same rules as an Integer, with the added constraint that the value must be positive.

### Unit Interval

A Unit Interval follows all the same rules as a Number, with the added constraint that the value must be between 0 and 1 (inclusive).

### Strings

Text, or "strings", can be any sequence of valid text characters, with certain characters escaped as needed.

Certain characters cannot be used directly, but must be escaped to appear in the string properly. This means that they must be proceeded by a `\\` in order to not be interpreted as a special character (the `#`, for example, would normally the start of a comment). These characters are `:#@$\*\_{}\\`, and sometimes `,;|` when the string appears in an array.

There are also escape sequences which can be used to include other characters which cannot normally be entered in the string. The most notable of which is the newline character, which is included in a string using `\\n`. You can also include arbitrary Unicode characters using either `\u####` for 4-digit hexcodes, or `\U########` for 8-digit hexcodes (where the `##`s are replaced with hexadecimal Unicode codepoints).

With these exceptions, a string may contain any text (including Unicode characters directly, although it's generally safer to escape non-ASCII characters), with spaces and punctuation marks. Leading and trailing whitespace will be trimmed from the string (it can be included using Unicode codepoints if needed).

See the documentation on [Text](Tutorial/Handling Text) for further discussion on strings and text in SharpSheets.

### RichString

See the documentation on [Text](Tutorial/Handling Text) for information on RichStrings and text formatting.

### Flag

A Flag is a boolean value, and is specified using the name of the flag property, with an optional exclamation mark (`!`) to indicate a False value:

```
flag # True value
!flag # False value
```

There should be no space between any exclamation mark and property name.

### Enumeration Types

In some cases, the value of a property must be one of a specified list of options. For example, if we had a property "justification" that could only have the values "LEFT", "CENTRE", or "RIGHT", then the following would all be valid:

```
justification: LEFT
justification: CENTRE
justification: RIGHT
```

But any other value would produce an error:

```
justification: TOP # This would cause an error
```

There are many of these enumeration, or "enum", types (and you can define your own when creating Markup patterns), which each have their own list of valid values. Indeed, the [Justification](enum::Justification) type mentioned above exists. Another common enum that you will encounter is the [TextFormat](enum::TextFormat) enumeration type.

Enumeration values must not contain spaces, and are case-insensitive. This means that the following are equivalent:

```
# These are equivalent:
justification: LEFT
justification: left
justification: Left
```

### Colors

Colors may be specified as either comma-separated lists of color values, hex codes, or recognized color names. All colors values are single byte, meaning the color space is always mapped into the range 0-255.

Color values can be provided as either: 1 grey value, 3 RGB values, or 4 ARGB values. The color values may be either decimal numbers between 0 and 1 (inclusive), or integer values between 0 and 255 (inclusive). If decimal numbers are used, they will be mapped into the 0-255 range.

```
color: 0, 0, 0 # Black
color: 1.0, 1.0, 1.0 # White
color: 255, 0, 0 # Red
color: 0, 1, 0 # Green
color: 0.5 # Grey
```

Hex codes can be provided either as 6-digit RGB codes, or 8-digit ARGB codes. These are hexadecimal numbers, ranging from `00` to `FF`. So the code `123456` is an RGB color, with a hexadecimal value of 12 for red, 34 for green, and 56 for blue. The hex codes must not have any spaces, and are case-insensitive.

```
color: 000000 # Black
color: FFFFFF # White
color: ffffff # White
color: FF0000 # Red
```

The recognized color names conform to the UNIX X11 named color values, and can be specified as case-insensitive strings, with no spaces.

```
color: Red
color: red
color: goldenrod
color: WHITE
```

### Dimension

Dimensions can be written as relative values (e.g. "1"), percentage values (e.g. "10pc", "10%"), absolute values (e.g. "1cm", "10pt", "1in"), or automatic values (written as "auto"), or combinations of these (see below). Dimension values are case-insensitive, and may contain spaces between the number and unit.

All numbers provided for Dimension values may contain decimal points. They may optionally contain a sign, but note that negative Dimensions are not allowed in come circumstances (in particular, negative relative dimensions are seriously discouraged).

Percentage values use the range 0-100, such that `50pc` or `50%` will be interpreted as the fraction "0.5".

It should also be noted that in some cases an absolute value, or absolute or percentage value, will be required. Check the documentation for such cases.

```
value: 1 # Relative
value: 1.5 # Relative
value: 10cm # Absolute
value: 10CM # Absolute
value: 5.5pt # Absolute
value: 1.2in # Absolute
value: 50pc # Percentage
value: auto # Automatic sizing
value: Auto # Automatic sizing
```

Dimensions can be expressed as a combination of the above values, using the `+` symbol. So, if you want a Dimension that takes up 50% of the available space and an additional 10pt on top of that, you can express this as:

```
value: 50pc + 10pt
# or
value: 10pt+50%
```

You cannot combine `auto` with other Dimension values.

### Vector

A Vector is a comma-separated pair of Numbers. The numbers obey the rules described above, and a separated by a comma, with optional whitespace to separate them:

```
vector: 1, 2
vector: 0.5,1.5
vector: 3, 4.5
```

### Arrays and Tuples

When multiple values are required for a single property, arrays and tuples are used. Arrays can be of any length, whereas tuples have a length specified and exactly that many values must be provided. Arrays are provided as delimited lists (meaning that there is some "delimiter" character, which is used to split up the values). The simplest delimiter is a comma:

```
numbers: 1, 2, 3, 4 # This is an array of the numbers from 1 to 4
strings: Hello, World # This is an array of the strings "Hello" and "World"
```

Extra whitespace around values in an array or tuple will be trimmed.

Arrays are indicated in the documentation as `Type[]`, where "Type" is the property type, and it is followed by an empty pair of square braces.

Tuples are indicated in the documentation as `Type[count]`, where "Type" is the property type, and "count" is the size of the tuple.

Tuples and arrays can be nested inside one another, for example as `String[][]` for an array of string arrays. When this happens, other delimiter characters are used to indicate splits at different levels. In increasing order of significance, the delimiters used in SharpSheets are: `|`, `;`, and `,`. So if we have an array of arrays, it would look like this:

```
value: 1, 2, 3; 4, 5, 6; 7, 8, 9
```

This would be a square matrix of numbers, with 1, 2, and 3 on the first row, 4, 5, 6 on the second row, and 7, 8, 9 on the third row.

Nested arrays do not have to be square, however (meaning that each sub-array does not have to be the same length). However, if we have an array of tuples, as in `String[][2]` (for an array of pairs of strings), then the sub-arrays must be the same length:

```
stringpairs: Hello, World; This, Is; SharpSheets, Documentation # Valid
stringpairs: Hello, World; Oops # Invalid
```

If you need delimiter characters to be included in the values, you can escape them using `\\`.

```
# This is an array of two strings, "Hello, World" and "Testing Escaping"
escaped: Hello\, World, Testing Escaping
```

You may also encounter tuples requested as `Tuple(int, string)`, indicating that the tuple values are of different types. They are still separated using the same delimiters, but the values will be interpreted differently.

When an array or tuple is called for, its size requirements will be shown in the documentation.

### Lists

When a "(list of) Type" is specified for a configuration file, this indicates that the data is expected as entries. For example, a "(list of) int[]" would expect a series of integer array entries:

```
widget:
	- 1, 2
	- 3, 4, 5
	- 6, 7
```

Each entry obeys the rules for the type specified separately.

### Numbered Collections

When a "(numbered) Type" is specified for a configuration file, this indicates that the data is expected as a set of numbered properties. The number is appended to the property name to indicate the position of that value in the collection. For example, a "(numbered) String" property named "text" could be specified as follows:

```
text1: Hello World
text2: Testing, Testing
```

The numbering begins at 1, and can extend arbitrarily high (`text999` is possible, if unlikely).

The numbers do not have to be contiguous. For missing values, the next-lowest value will be used. If there is no lower value (i.e. the lowest numbered value is greater than 1), then the lowest available value will be used.

```
# text1 and text2 will be have the value "Testing"
text3: Testing
# text4 to text7 will also all have the value "Testing"
text8: Something else
# There is no text9 value (or higher), as the highest specified property is text8
```

You can also have numbered collections of multi-component properties:

```
outline1.style: Simple
outline1.fill: Red
outline2.style: Rounded
outline2.bevel: 3
```

### File Paths

File paths can be absolute, or relative to the current file (i.e. the file that the path is being written in). `/` can be used as a path separator on any operating system, and is recommended.

In addition, file paths (and image paths below) in configuration files may use `&SOURCE` as a stand-in for the current file path. Such that the following will indicate a file called `file.ext` located in a subdirectory that is in the same directory as the current file.

```
value: &SOURCE/resources/file.ext
```

This is useful when creating template configuration files, as `&SOURCE` will be replaced with the full path to the original template file. Using this you can safely use resources located in the template directory in your template configurations.

### Image

Images are simply specified as filepaths to the desired image file (absolute or relative paths).

JPEG and PNG files are guaranteed to be supported, with more spotty coverage of other file types.

Images can also be provided as PDF files. These will be included in the generated PDF documents, but may not display properly in the editor.

Generally speaking, images will be scaled before being included in the document, so the resolution of the image will not affect its size on the page (but will affect image quality and file size).

### Font Paths

See the documentation on [Text](Tutorial/Handling Text) for a discussion of fonts and specifying font paths.

### Page Size

Page sizes can be expressed as an A or B paper size, one of "letter", "legal", "ledger", "tabloid", or "executive", or as a set of dimensions of the form "20.5 x 20.5 cm" (units are "pt", "cm", "mm", or "in"). Page size values are case-insensitive, and when specified as dimensions may contain spaces between the components.

```
paper: A4
paper: a3
paper: B5
paper: letter
paper: LETTER
paper: 20x30cm
paper: 20X30CM
```